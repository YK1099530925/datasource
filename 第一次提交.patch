Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DataHumidityRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DataHumidityRepositoryLocal.java	(date 1574836478729)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DataHumidityRepositoryLocal.java	(date 1574836478729)
@@ -0,0 +1,10 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DataHumidity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface DataHumidityRepositoryLocal extends JpaRepository<DataHumidity, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_humidity order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DataHumidityRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DataHumidityRepositoryProduct.java	(date 1574836478790)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DataHumidityRepositoryProduct.java	(date 1574836478790)
@@ -0,0 +1,19 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DataHumidity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DataHumidityRepositoryProduct extends JpaRepository<DataHumidity, Integer> {
+
+    @Query(nativeQuery = true, value = "select id from data_humidity limit 1")
+    Integer getMinId();
+
+    @Query(nativeQuery = true, value = "select * from data_humidity where id > ? and id <= ?")
+    List<DataHumidity> get1wData(Integer beforeId, Integer afterId);
+
+    @Query(nativeQuery = true, value = "select id from data_humidity order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataHumidityServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataHumidityServerLocal.java	(date 1574836827612)
+++ src/main/java/datasuorcetwo/datasource/server/DataHumidityServerLocal.java	(date 1574836827612)
@@ -0,0 +1,39 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataHumidity;
+import datasuorcetwo.datasource.repositoryLocal.DataHumidityRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataHumidityServerLocal implements DataBaseServerInte<DataHumidity> {
+
+    @Autowired
+    DataHumidityRepositoryLocal dataHumidityRepositoryLocal;
+
+    @Override
+    public Integer getMaxId() {
+        return dataHumidityRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return null;
+    }
+
+    @Override
+    public List<DataHumidity> get1wData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<DataHumidity> dataHumidities) {
+        if(!dataHumidities.isEmpty()){
+            dataHumidityRepositoryLocal.saveAll(dataHumidities);
+        }
+        return 1;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataHumidityServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataHumidityServerProduct.java	(date 1574836827727)
+++ src/main/java/datasuorcetwo/datasource/server/DataHumidityServerProduct.java	(date 1574836827727)
@@ -0,0 +1,36 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataHumidity;
+import datasuorcetwo.datasource.repositoryProduct.DataHumidityRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataHumidityServerProduct implements DataBaseServerInte<DataHumidity> {
+
+    @Autowired
+    DataHumidityRepositoryProduct dataHumidityRepositoryProduct;
+
+    @Override
+    public Integer getMaxId() {
+        return dataHumidityRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return dataHumidityRepositoryProduct.getMinId();
+    }
+
+    @Override
+    public List<DataHumidity> get1wData(Integer beforeId, Integer afterId) {
+        return dataHumidityRepositoryProduct.get1wData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DataHumidity> dataHumidities) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataAirSoilLightServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataAirSoilLightServerLocal.java	(date 1574832782145)
+++ src/main/java/datasuorcetwo/datasource/server/DataAirSoilLightServerLocal.java	(date 1574832782145)
@@ -0,0 +1,39 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataAirSoilLight;
+import datasuorcetwo.datasource.repositoryLocal.DataAirSoilLightRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataAirSoilLightServerLocal implements DataBaseServerInte<DataAirSoilLight> {
+
+    @Autowired
+    DataAirSoilLightRepositoryLocal dataAirSoilLightRepositoryLocal;
+
+    @Override
+    public Integer getMaxId() {
+        return dataAirSoilLightRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return null;
+    }
+
+    @Override
+    public List<DataAirSoilLight> get1wData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<DataAirSoilLight> dataAirSoilLights) {
+        if(!dataAirSoilLights.isEmpty()){
+            dataAirSoilLightRepositoryLocal.saveAll(dataAirSoilLights);
+        }
+        return 1;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataAirSoilLightServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataAirSoilLightServerProduct.java	(date 1574832782098)
+++ src/main/java/datasuorcetwo/datasource/server/DataAirSoilLightServerProduct.java	(date 1574832782098)
@@ -0,0 +1,36 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataAirSoilLight;
+import datasuorcetwo.datasource.repositoryProduct.DataAirSoilLightRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataAirSoilLightServerProduct implements DataBaseServerInte<DataAirSoilLight> {
+
+    @Autowired
+    DataAirSoilLightRepositoryProduct dataAirSoilLightRepositoryProduct;
+
+    @Override
+    public Integer getMaxId() {
+        return dataAirSoilLightRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return dataAirSoilLightRepositoryProduct.getMinId();
+    }
+
+    @Override
+    public List<DataAirSoilLight> get1wData(Integer beforeId, Integer afterId) {
+        return dataAirSoilLightRepositoryProduct.get1wData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DataAirSoilLight> dataAirSoilLights) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DataHumidity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DataHumidity.java	(date 1574836478823)
+++ src/main/java/datasuorcetwo/datasource/entity/DataHumidity.java	(date 1574836478823)
@@ -0,0 +1,55 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "data_humidity")
+public class DataHumidity extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "humidity_value")
+    private Double humidityValue;
+    @Column(name = "device_id")
+    private Integer deviceId;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public Double getHumidityValue() {
+        return humidityValue;
+    }
+
+    public void setHumidityValue(Double humidityValue) {
+        this.humidityValue = humidityValue;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DataLightRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DataLightRepositoryProduct.java	(date 1574837090904)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DataLightRepositoryProduct.java	(date 1574837090904)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DataLight;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DataLightRepositoryProduct extends JpaRepository<DataLight, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_light limit 1")
+    Integer getMinId();
+
+    @Query(nativeQuery = true, value = "select * from data_light where id > ? and id <= ?")
+    List<DataLight> get1wData(Integer beforeId, Integer afterId);
+
+    @Query(nativeQuery = true, value = "select id from data_light order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataLightServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataLightServerLocal.java	(date 1574837353599)
+++ src/main/java/datasuorcetwo/datasource/server/DataLightServerLocal.java	(date 1574837353599)
@@ -0,0 +1,39 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataLight;
+import datasuorcetwo.datasource.repositoryLocal.DataLightRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataLightServerLocal implements DataBaseServerInte<DataLight> {
+
+    @Autowired
+    DataLightRepositoryLocal dataLightRepositoryLocal;
+
+    @Override
+    public Integer getMaxId() {
+        return dataLightRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return null;
+    }
+
+    @Override
+    public List<DataLight> get1wData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<DataLight> dataLights) {
+        if(!dataLights.isEmpty()){
+            dataLightRepositoryLocal.saveAll(dataLights);
+        }
+        return 1;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataLightServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataLightServerProduct.java	(date 1574837353545)
+++ src/main/java/datasuorcetwo/datasource/server/DataLightServerProduct.java	(date 1574837353545)
@@ -0,0 +1,36 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataLight;
+import datasuorcetwo.datasource.repositoryProduct.DataLightRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataLightServerProduct implements DataBaseServerInte<DataLight> {
+
+    @Autowired
+    DataLightRepositoryProduct dataLightRepositoryProduct;
+
+    @Override
+    public Integer getMaxId() {
+        return dataLightRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return dataLightRepositoryProduct.getMinId();
+    }
+
+    @Override
+    public List<DataLight> get1wData(Integer beforeId, Integer afterId) {
+        return dataLightRepositoryProduct.get1wData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DataLight> dataLights) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DataSixteenroadSoil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DataSixteenroadSoil.java	(date 1574838125122)
+++ src/main/java/datasuorcetwo/datasource/entity/DataSixteenroadSoil.java	(date 1574838125122)
@@ -0,0 +1,365 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "data_sixteenroad_soil")
+public class DataSixteenroadSoil extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_id")
+    private Integer deviceId;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "road1_temperature_value")
+    private Double road1TemperatureValue;
+    @Column(name = "road1_humidity_value")
+    private Double road1HumidityValue;
+    @Column(name = "road2_temperature_value")
+    private Double road2TemperatureValue;
+    @Column(name = "road2_humidity_value")
+    private Double road2HumidityValue;
+    @Column(name = "road3_temperature_value")
+    private Double road3TemperatureValue;
+    @Column(name = "road3_humidity_value")
+    private Double road3HumidityValue;
+    @Column(name = "road4_temperature_value")
+    private Double road4TemperatureValue;
+    @Column(name = "road4_humidity_value")
+    private Double road4HumidityValue;
+    @Column(name = "road5_temperature_value")
+    private Double road5TemperatureValue;
+    @Column(name = "road5_humidity_value")
+    private Double road5HumidityValue;
+    @Column(name = "road6_temperature_value")
+    private Double road6TemperatureValue;
+    @Column(name = "road6_humidity_value")
+    private Double road6HumidityValue;
+    @Column(name = "road7_temperature_value")
+    private Double road7TemperatureValue;
+    @Column(name = "road7_humidity_value")
+    private Double road7HumidityValue;
+    @Column(name = "road8_temperature_value")
+    private Double road8TemperatureValue;
+    @Column(name = "road8_humidity_value")
+    private Double road8HumidityValue;
+    @Column(name = "road9_temperature_value")
+    private Double road9TemperatureValue;
+    @Column(name = "road9_humidity_value")
+    private Double road9HumidityValue;
+    @Column(name = "road10_temperature_value")
+    private Double road10TemperatureValue;
+    @Column(name = "road10_humidity_value")
+    private Double road10HumidityValue;
+    @Column(name = "road11_temperature_value")
+    private Double road11TemperatureValue;
+    @Column(name = "road11_humidity_value")
+    private Double road11HumidityValue;
+    @Column(name = "road12_temperature_value")
+    private Double road12TemperatureValue;
+    @Column(name = "road12_humidity_value")
+    private Double road12HumidityValue;
+    @Column(name = "road13_temperature_value")
+    private Double road13TemperatureValue;
+    @Column(name = "road13_humidity_value")
+    private Double road13HumidityValue;
+    @Column(name = "road14_temperature_value")
+    private Double road14TemperatureValue;
+    @Column(name = "road14_humidity_value")
+    private Double road14HumidityValue;
+    @Column(name = "road15_temperature_value")
+    private Double road15TemperatureValue;
+    @Column(name = "road15_humidity_value")
+    private Double road15HumidityValue;
+    @Column(name = "road16_temperature_value")
+    private Double road16TemperatureValue;
+    @Column(name = "road16_humidity_value")
+    private Double road16HumidityValue;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public Double getRoad1TemperatureValue() {
+        return road1TemperatureValue;
+    }
+
+    public void setRoad1TemperatureValue(Double road1TemperatureValue) {
+        this.road1TemperatureValue = road1TemperatureValue;
+    }
+
+    public Double getRoad1HumidityValue() {
+        return road1HumidityValue;
+    }
+
+    public void setRoad1HumidityValue(Double road1HumidityValue) {
+        this.road1HumidityValue = road1HumidityValue;
+    }
+
+    public Double getRoad2TemperatureValue() {
+        return road2TemperatureValue;
+    }
+
+    public void setRoad2TemperatureValue(Double road2TemperatureValue) {
+        this.road2TemperatureValue = road2TemperatureValue;
+    }
+
+    public Double getRoad2HumidityValue() {
+        return road2HumidityValue;
+    }
+
+    public void setRoad2HumidityValue(Double road2HumidityValue) {
+        this.road2HumidityValue = road2HumidityValue;
+    }
+
+    public Double getRoad3TemperatureValue() {
+        return road3TemperatureValue;
+    }
+
+    public void setRoad3TemperatureValue(Double road3TemperatureValue) {
+        this.road3TemperatureValue = road3TemperatureValue;
+    }
+
+    public Double getRoad3HumidityValue() {
+        return road3HumidityValue;
+    }
+
+    public void setRoad3HumidityValue(Double road3HumidityValue) {
+        this.road3HumidityValue = road3HumidityValue;
+    }
+
+    public Double getRoad4TemperatureValue() {
+        return road4TemperatureValue;
+    }
+
+    public void setRoad4TemperatureValue(Double road4TemperatureValue) {
+        this.road4TemperatureValue = road4TemperatureValue;
+    }
+
+    public Double getRoad4HumidityValue() {
+        return road4HumidityValue;
+    }
+
+    public void setRoad4HumidityValue(Double road4HumidityValue) {
+        this.road4HumidityValue = road4HumidityValue;
+    }
+
+    public Double getRoad5TemperatureValue() {
+        return road5TemperatureValue;
+    }
+
+    public void setRoad5TemperatureValue(Double road5TemperatureValue) {
+        this.road5TemperatureValue = road5TemperatureValue;
+    }
+
+    public Double getRoad5HumidityValue() {
+        return road5HumidityValue;
+    }
+
+    public void setRoad5HumidityValue(Double road5HumidityValue) {
+        this.road5HumidityValue = road5HumidityValue;
+    }
+
+    public Double getRoad6TemperatureValue() {
+        return road6TemperatureValue;
+    }
+
+    public void setRoad6TemperatureValue(Double road6TemperatureValue) {
+        this.road6TemperatureValue = road6TemperatureValue;
+    }
+
+    public Double getRoad6HumidityValue() {
+        return road6HumidityValue;
+    }
+
+    public void setRoad6HumidityValue(Double road6HumidityValue) {
+        this.road6HumidityValue = road6HumidityValue;
+    }
+
+    public Double getRoad7TemperatureValue() {
+        return road7TemperatureValue;
+    }
+
+    public void setRoad7TemperatureValue(Double road7TemperatureValue) {
+        this.road7TemperatureValue = road7TemperatureValue;
+    }
+
+    public Double getRoad7HumidityValue() {
+        return road7HumidityValue;
+    }
+
+    public void setRoad7HumidityValue(Double road7HumidityValue) {
+        this.road7HumidityValue = road7HumidityValue;
+    }
+
+    public Double getRoad8TemperatureValue() {
+        return road8TemperatureValue;
+    }
+
+    public void setRoad8TemperatureValue(Double road8TemperatureValue) {
+        this.road8TemperatureValue = road8TemperatureValue;
+    }
+
+    public Double getRoad8HumidityValue() {
+        return road8HumidityValue;
+    }
+
+    public void setRoad8HumidityValue(Double road8HumidityValue) {
+        this.road8HumidityValue = road8HumidityValue;
+    }
+
+    public Double getRoad9TemperatureValue() {
+        return road9TemperatureValue;
+    }
+
+    public void setRoad9TemperatureValue(Double road9TemperatureValue) {
+        this.road9TemperatureValue = road9TemperatureValue;
+    }
+
+    public Double getRoad9HumidityValue() {
+        return road9HumidityValue;
+    }
+
+    public void setRoad9HumidityValue(Double road9HumidityValue) {
+        this.road9HumidityValue = road9HumidityValue;
+    }
+
+    public Double getRoad10TemperatureValue() {
+        return road10TemperatureValue;
+    }
+
+    public void setRoad10TemperatureValue(Double road10TemperatureValue) {
+        this.road10TemperatureValue = road10TemperatureValue;
+    }
+
+    public Double getRoad10HumidityValue() {
+        return road10HumidityValue;
+    }
+
+    public void setRoad10HumidityValue(Double road10HumidityValue) {
+        this.road10HumidityValue = road10HumidityValue;
+    }
+
+    public Double getRoad11TemperatureValue() {
+        return road11TemperatureValue;
+    }
+
+    public void setRoad11TemperatureValue(Double road11TemperatureValue) {
+        this.road11TemperatureValue = road11TemperatureValue;
+    }
+
+    public Double getRoad11HumidityValue() {
+        return road11HumidityValue;
+    }
+
+    public void setRoad11HumidityValue(Double road11HumidityValue) {
+        this.road11HumidityValue = road11HumidityValue;
+    }
+
+    public Double getRoad12TemperatureValue() {
+        return road12TemperatureValue;
+    }
+
+    public void setRoad12TemperatureValue(Double road12TemperatureValue) {
+        this.road12TemperatureValue = road12TemperatureValue;
+    }
+
+    public Double getRoad12HumidityValue() {
+        return road12HumidityValue;
+    }
+
+    public void setRoad12HumidityValue(Double road12HumidityValue) {
+        this.road12HumidityValue = road12HumidityValue;
+    }
+
+    public Double getRoad13TemperatureValue() {
+        return road13TemperatureValue;
+    }
+
+    public void setRoad13TemperatureValue(Double road13TemperatureValue) {
+        this.road13TemperatureValue = road13TemperatureValue;
+    }
+
+    public Double getRoad13HumidityValue() {
+        return road13HumidityValue;
+    }
+
+    public void setRoad13HumidityValue(Double road13HumidityValue) {
+        this.road13HumidityValue = road13HumidityValue;
+    }
+
+    public Double getRoad14TemperatureValue() {
+        return road14TemperatureValue;
+    }
+
+    public void setRoad14TemperatureValue(Double road14TemperatureValue) {
+        this.road14TemperatureValue = road14TemperatureValue;
+    }
+
+    public Double getRoad14HumidityValue() {
+        return road14HumidityValue;
+    }
+
+    public void setRoad14HumidityValue(Double road14HumidityValue) {
+        this.road14HumidityValue = road14HumidityValue;
+    }
+
+    public Double getRoad15TemperatureValue() {
+        return road15TemperatureValue;
+    }
+
+    public void setRoad15TemperatureValue(Double road15TemperatureValue) {
+        this.road15TemperatureValue = road15TemperatureValue;
+    }
+
+    public Double getRoad15HumidityValue() {
+        return road15HumidityValue;
+    }
+
+    public void setRoad15HumidityValue(Double road15HumidityValue) {
+        this.road15HumidityValue = road15HumidityValue;
+    }
+
+    public Double getRoad16TemperatureValue() {
+        return road16TemperatureValue;
+    }
+
+    public void setRoad16TemperatureValue(Double road16TemperatureValue) {
+        this.road16TemperatureValue = road16TemperatureValue;
+    }
+
+    public Double getRoad16HumidityValue() {
+        return road16HumidityValue;
+    }
+
+    public void setRoad16HumidityValue(Double road16HumidityValue) {
+        this.road16HumidityValue = road16HumidityValue;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DataLight.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DataLight.java	(date 1574837090855)
+++ src/main/java/datasuorcetwo/datasource/entity/DataLight.java	(date 1574837090855)
@@ -0,0 +1,55 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "data_light")
+public class DataLight extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "light_value")
+    private Double lightValue;
+    @Column(name = "device_id")
+    private Integer deviceId;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public Double getLightValue() {
+        return lightValue;
+    }
+
+    public void setLightValue(Double lightValue) {
+        this.lightValue = lightValue;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DataLightRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DataLightRepositoryLocal.java	(date 1574837090990)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DataLightRepositoryLocal.java	(date 1574837090990)
@@ -0,0 +1,10 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DataLight;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface DataLightRepositoryLocal extends JpaRepository<DataLight, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_light order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataSixteenroadSoilServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataSixteenroadSoilServerProduct.java	(date 1574838125178)
+++ src/main/java/datasuorcetwo/datasource/server/DataSixteenroadSoilServerProduct.java	(date 1574838125178)
@@ -0,0 +1,36 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataSixteenroadSoil;
+import datasuorcetwo.datasource.repositoryProduct.DataSixteenroadSoilRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataSixteenroadSoilServerProduct implements DataBaseServerInte<DataSixteenroadSoil> {
+
+    @Autowired
+    DataSixteenroadSoilRepositoryProduct dataSixteenroadSoilRepositoryProduct;
+
+    @Override
+    public Integer getMaxId() {
+        return dataSixteenroadSoilRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return dataSixteenroadSoilRepositoryProduct.getMinId();
+    }
+
+    @Override
+    public List<DataSixteenroadSoil> get1wData(Integer beforeId, Integer afterId) {
+        return dataSixteenroadSoilRepositoryProduct.get1wData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DataSixteenroadSoil> dataSixteenroadSoils) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DataSoilMoistureNutrient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DataSoilMoistureNutrient.java	(date 1574838378867)
+++ src/main/java/datasuorcetwo/datasource/entity/DataSoilMoistureNutrient.java	(date 1574838378867)
@@ -0,0 +1,75 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "data_soil_moist_nutr")
+public class DataSoilMoistureNutrient extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "moisture_value")
+    private Double moistureValue;
+    @Column(name = "device_id")
+    private Integer deviceId;
+    @Column(name = "nutrient_value")
+    private Double nutrientValue;
+    @Column(name = "s3_nutrient")
+    private String s3Nutrient;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public Double getMoistureValue() {
+        return moistureValue;
+    }
+
+    public void setMoistureValue(Double moistureValue) {
+        this.moistureValue = moistureValue;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+
+    public Double getNutrientValue() {
+        return nutrientValue;
+    }
+
+    public void setNutrientValue(Double nutrientValue) {
+        this.nutrientValue = nutrientValue;
+    }
+
+    public String getS3Nutrient() {
+        return s3Nutrient;
+    }
+
+    public void setS3Nutrient(String s3Nutrient) {
+        this.s3Nutrient = s3Nutrient == null ? null : s3Nutrient.trim();
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DataSoilMoistureNutrientRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DataSoilMoistureNutrientRepositoryLocal.java	(date 1574838812130)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DataSoilMoistureNutrientRepositoryLocal.java	(date 1574838812130)
@@ -0,0 +1,10 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DataSoilMoistureNutrient;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface DataSoilMoistureNutrientRepositoryLocal extends JpaRepository<DataSoilMoistureNutrient, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_soil_moist_nutr order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DataSoilMoistureNutrientRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DataSoilMoistureNutrientRepositoryProduct.java	(date 1574838812354)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DataSoilMoistureNutrientRepositoryProduct.java	(date 1574838812354)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DataSoilMoistureNutrient;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DataSoilMoistureNutrientRepositoryProduct extends JpaRepository<DataSoilMoistureNutrient, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_soil_moist_nutr limit 1")
+    Integer getMinId();
+
+    @Query(nativeQuery = true, value = "select * from data_soil_moist_nutr where id > ? and id <= ?")
+    List<DataSoilMoistureNutrient> get1wData(Integer beforeId, Integer afterId);
+
+    @Query(nativeQuery = true, value = "select id from data_soil_moist_nutr order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DataSixteenroadSoilRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DataSixteenroadSoilRepositoryLocal.java	(date 1574838124997)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DataSixteenroadSoilRepositoryLocal.java	(date 1574838124997)
@@ -0,0 +1,10 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DataSixteenroadSoil;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface DataSixteenroadSoilRepositoryLocal extends JpaRepository<DataSixteenroadSoil, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_sixteenroad_soil order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DataSixteenroadSoilRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DataSixteenroadSoilRepositoryProduct.java	(date 1574838124945)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DataSixteenroadSoilRepositoryProduct.java	(date 1574838124945)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DataSixteenroadSoil;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DataSixteenroadSoilRepositoryProduct extends JpaRepository<DataSixteenroadSoil, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_sixteenroad_soil limit 1")
+    Integer getMinId();
+
+    @Query(nativeQuery = true, value = "select * from data_sixteenroad_soil where id > ? and id <= ?")
+    List<DataSixteenroadSoil> get1wData(Integer beforeId, Integer afterId);
+
+    @Query(nativeQuery = true, value = "select id from data_sixteenroad_soil order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataSixteenroadSoilServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataSixteenroadSoilServerLocal.java	(date 1574838125232)
+++ src/main/java/datasuorcetwo/datasource/server/DataSixteenroadSoilServerLocal.java	(date 1574838125232)
@@ -0,0 +1,39 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataSixteenroadSoil;
+import datasuorcetwo.datasource.repositoryLocal.DataSixteenroadSoilRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataSixteenroadSoilServerLocal implements DataBaseServerInte<DataSixteenroadSoil> {
+
+    @Autowired
+    DataSixteenroadSoilRepositoryLocal dataSixteenroadSoilRepositoryLocal;
+
+    @Override
+    public Integer getMaxId() {
+        return dataSixteenroadSoilRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return null;
+    }
+
+    @Override
+    public List<DataSixteenroadSoil> get1wData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<DataSixteenroadSoil> dataSixteenroadSoils) {
+        if(!dataSixteenroadSoils.isEmpty()){
+            dataSixteenroadSoilRepositoryLocal.saveAll(dataSixteenroadSoils);
+        }
+        return 1;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DataTemperature.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DataTemperature.java	(date 1574839183460)
+++ src/main/java/datasuorcetwo/datasource/entity/DataTemperature.java	(date 1574839183460)
@@ -0,0 +1,55 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "data_temperature")
+public class DataTemperature extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "temperature_value")
+    private Double temperatureValue;
+    @Column(name = "device_id")
+    private Integer deviceId;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public Double getTemperatureValue() {
+        return temperatureValue;
+    }
+
+    public void setTemperatureValue(Double temperatureValue) {
+        this.temperatureValue = temperatureValue;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DataTemperatureRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DataTemperatureRepositoryLocal.java	(date 1574839183510)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DataTemperatureRepositoryLocal.java	(date 1574839183510)
@@ -0,0 +1,10 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DataTemperature;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface DataTemperatureRepositoryLocal extends JpaRepository<DataTemperature, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_temperature order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DataTemperatureRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DataTemperatureRepositoryProduct.java	(date 1574839183574)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DataTemperatureRepositoryProduct.java	(date 1574839183574)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DataTemperature;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DataTemperatureRepositoryProduct extends JpaRepository<DataTemperature, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_temperature limit 1")
+    Integer getMinId();
+
+    @Query(nativeQuery = true, value = "select * from data_temperature where id > ? and id <= ?")
+    List<DataTemperature> get1wData(Integer beforeId, Integer afterId);
+
+    @Query(nativeQuery = true, value = "select id from data_temperature order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataSoilMoistureNutrientServiceLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataSoilMoistureNutrientServiceLocal.java	(date 1574838812226)
+++ src/main/java/datasuorcetwo/datasource/server/DataSoilMoistureNutrientServiceLocal.java	(date 1574838812226)
@@ -0,0 +1,38 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataSoilMoistureNutrient;
+import datasuorcetwo.datasource.repositoryLocal.DataSoilMoistureNutrientRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataSoilMoistureNutrientServiceLocal implements DataBaseServerInte<DataSoilMoistureNutrient> {
+    @Autowired
+    DataSoilMoistureNutrientRepositoryLocal dataSoilMoistureNutrientRepositoryLocal;
+
+    @Override
+    public Integer getMaxId() {
+        return dataSoilMoistureNutrientRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return null;
+    }
+
+    @Override
+    public List<DataSoilMoistureNutrient> get1wData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<DataSoilMoistureNutrient> dataSoilMoistureNutrients) {
+        if(!dataSoilMoistureNutrients.isEmpty()){
+            dataSoilMoistureNutrientRepositoryLocal.saveAll(dataSoilMoistureNutrients);
+        }
+        return 1;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataSoilMoistureNutrientServiceProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataSoilMoistureNutrientServiceProduct.java	(date 1574838812307)
+++ src/main/java/datasuorcetwo/datasource/server/DataSoilMoistureNutrientServiceProduct.java	(date 1574838812307)
@@ -0,0 +1,35 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataSoilMoistureNutrient;
+import datasuorcetwo.datasource.repositoryProduct.DataSoilMoistureNutrientRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataSoilMoistureNutrientServiceProduct implements DataBaseServerInte<DataSoilMoistureNutrient> {
+    @Autowired
+    DataSoilMoistureNutrientRepositoryProduct dataSoilMoistureNutrientRepositoryProduct;
+
+    @Override
+    public Integer getMaxId() {
+        return dataSoilMoistureNutrientRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return dataSoilMoistureNutrientRepositoryProduct.getMinId();
+    }
+
+    @Override
+    public List<DataSoilMoistureNutrient> get1wData(Integer beforeId, Integer afterId) {
+        return dataSoilMoistureNutrientRepositoryProduct.get1wData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DataSoilMoistureNutrient> dataSoilMoistureNutrients) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DataWaterPressureRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DataWaterPressureRepositoryLocal.java	(date 1574839681415)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DataWaterPressureRepositoryLocal.java	(date 1574839681415)
@@ -0,0 +1,10 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DataWaterPressure;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface DataWaterPressureRepositoryLocal extends JpaRepository<DataWaterPressure, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_water_pressure order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DataWaterPressureRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DataWaterPressureRepositoryProduct.java	(date 1574839681289)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DataWaterPressureRepositoryProduct.java	(date 1574839681289)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DataWaterPressure;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DataWaterPressureRepositoryProduct extends JpaRepository<DataWaterPressure, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_water_pressure limit 1")
+    Integer getMinId();
+
+    @Query(nativeQuery = true, value = "select * from data_water_pressure where id > ? and id <= ?")
+    List<DataWaterPressure> get1wData(Integer beforeId, Integer afterId);
+
+    @Query(nativeQuery = true, value = "select id from data_water_pressure order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataWaterPressureServiceLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataWaterPressureServiceLocal.java	(date 1574839681455)
+++ src/main/java/datasuorcetwo/datasource/server/DataWaterPressureServiceLocal.java	(date 1574839681455)
@@ -0,0 +1,38 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataWaterPressure;
+import datasuorcetwo.datasource.repositoryLocal.DataWaterPressureRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataWaterPressureServiceLocal implements DataBaseServerInte<DataWaterPressure> {
+    @Autowired
+    DataWaterPressureRepositoryLocal dataWaterPressureRepositoryLocal;
+
+    @Override
+    public Integer getMaxId() {
+        return dataWaterPressureRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return null;
+    }
+
+    @Override
+    public List<DataWaterPressure> get1wData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<DataWaterPressure> dataWaterPressures) {
+        if(!dataWaterPressures.isEmpty()){
+            dataWaterPressureRepositoryLocal.saveAll(dataWaterPressures);
+        }
+        return 1;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataWaterPressureServiceProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataWaterPressureServiceProduct.java	(date 1574839681495)
+++ src/main/java/datasuorcetwo/datasource/server/DataWaterPressureServiceProduct.java	(date 1574839681495)
@@ -0,0 +1,35 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataWaterPressure;
+import datasuorcetwo.datasource.repositoryProduct.DataWaterPressureRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataWaterPressureServiceProduct implements DataBaseServerInte<DataWaterPressure> {
+    @Autowired
+    DataWaterPressureRepositoryProduct dataWaterPressureRepositoryProduct;
+
+    @Override
+    public Integer getMaxId() {
+        return dataWaterPressureRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return dataWaterPressureRepositoryProduct.getMinId();
+    }
+
+    @Override
+    public List<DataWaterPressure> get1wData(Integer beforeId, Integer afterId) {
+        return dataWaterPressureRepositoryProduct.get1wData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DataWaterPressure> dataWaterPressures) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataTemperatureServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataTemperatureServerLocal.java	(date 1574839183249)
+++ src/main/java/datasuorcetwo/datasource/server/DataTemperatureServerLocal.java	(date 1574839183249)
@@ -0,0 +1,38 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataTemperature;
+import datasuorcetwo.datasource.repositoryLocal.DataTemperatureRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataTemperatureServerLocal implements DataBaseServerInte<DataTemperature> {
+    @Autowired
+    DataTemperatureRepositoryLocal dataTemperatureRepositoryLocal;
+
+    @Override
+    public Integer getMaxId() {
+        return dataTemperatureRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return null;
+    }
+
+    @Override
+    public List<DataTemperature> get1wData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<DataTemperature> dataTemperatures) {
+        if(!dataTemperatures.isEmpty()){
+            dataTemperatureRepositoryLocal.saveAll(dataTemperatures);
+        }
+        return 1;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataTemperatureServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataTemperatureServerProduct.java	(date 1574839183387)
+++ src/main/java/datasuorcetwo/datasource/server/DataTemperatureServerProduct.java	(date 1574839183387)
@@ -0,0 +1,35 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataTemperature;
+import datasuorcetwo.datasource.repositoryProduct.DataTemperatureRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataTemperatureServerProduct implements DataBaseServerInte<DataTemperature> {
+    @Autowired
+    DataTemperatureRepositoryProduct dataTemperatureRepositoryProduct;
+
+    @Override
+    public Integer getMaxId() {
+        return dataTemperatureRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return dataTemperatureRepositoryProduct.getMinId();
+    }
+
+    @Override
+    public List<DataTemperature> get1wData(Integer beforeId, Integer afterId) {
+        return dataTemperatureRepositoryProduct.get1wData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DataTemperature> dataTemperatures) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DataWaterPressure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DataWaterPressure.java	(date 1575855028140)
+++ src/main/java/datasuorcetwo/datasource/entity/DataWaterPressure.java	(date 1575855028140)
@@ -0,0 +1,235 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "data_water_pressure")
+public class DataWaterPressure extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "devTime")
+    private String devtime;
+    @Column(name = "firmware_version")
+    private Integer firmwareVersion;
+    @Column(name = "device_id")
+    private Integer deviceId;
+    @Column(name = "devType")
+    private Integer devtype;
+    @Column(name = "devSoftVer")
+    private Integer devsoftver;
+    @Column(name = "devProVer")
+    private Integer devprover;
+    @Column(name = "devIMEI")
+    private String devimei;
+    @Column(name = "devIMSI")
+    private String devimsi;
+    @Column(name = "waterLevelState")
+    private Integer waterlevelstate;
+    @Column(name = "waterLevelMax")
+    private Integer waterlevelmax;
+    @Column(name = "waterLevelMin")
+    private Integer waterlevelmin;
+    @Column(name = "voltage_value")
+    private Double voltageValue;
+    @Column(name = "connCsq")
+    private Integer conncsq;
+    @Column(name = "devSendClycle")
+    private Integer devsendclycle;
+    @Column(name = "waterpressure_value")
+    private Double waterpressureValue;
+    @Column(name = "devMessageCnt")
+    private Integer devmessagecnt;
+    @Column(name = "connPCI")
+    private Integer connpci;
+    @Column(name = "connRsrp")
+    private Integer connrsrp;
+    @Column(name = "connSnr")
+    private Integer connsnr;
+    @Column(name = "waterLevelFluctuation")
+    private Integer waterlevelfluctuation;
+
+    public Integer getWaterlevelfluctuation() {
+        return waterlevelfluctuation;
+    }
+
+    public void setWaterlevelfluctuation(Integer waterlevelfluctuation) {
+        this.waterlevelfluctuation = waterlevelfluctuation;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public String getDevtime() {
+        return devtime;
+    }
+
+    public void setDevtime(String devtime) {
+        this.devtime = devtime == null ? null : devtime.trim();
+    }
+
+    public Integer getFirmwareVersion() {
+        return firmwareVersion;
+    }
+
+    public void setFirmwareVersion(Integer firmwareVersion) {
+        this.firmwareVersion = firmwareVersion;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+
+    public Integer getDevtype() {
+        return devtype;
+    }
+
+    public void setDevtype(Integer devtype) {
+        this.devtype = devtype;
+    }
+
+    public Integer getDevsoftver() {
+        return devsoftver;
+    }
+
+    public void setDevsoftver(Integer devsoftver) {
+        this.devsoftver = devsoftver;
+    }
+
+    public Integer getDevprover() {
+        return devprover;
+    }
+
+    public void setDevprover(Integer devprover) {
+        this.devprover = devprover;
+    }
+
+    public String getDevimei() {
+        return devimei;
+    }
+
+    public void setDevimei(String devimei) {
+        this.devimei = devimei == null ? null : devimei.trim();
+    }
+
+    public String getDevimsi() {
+        return devimsi;
+    }
+
+    public void setDevimsi(String devimsi) {
+        this.devimsi = devimsi == null ? null : devimsi.trim();
+    }
+
+    public Integer getWaterlevelstate() {
+        return waterlevelstate;
+    }
+
+    public void setWaterlevelstate(Integer waterlevelstate) {
+        this.waterlevelstate = waterlevelstate;
+    }
+
+    public Integer getWaterlevelmax() {
+        return waterlevelmax;
+    }
+
+    public void setWaterlevelmax(Integer waterlevelmax) {
+        this.waterlevelmax = waterlevelmax;
+    }
+
+    public Integer getWaterlevelmin() {
+        return waterlevelmin;
+    }
+
+    public void setWaterlevelmin(Integer waterlevelmin) {
+        this.waterlevelmin = waterlevelmin;
+    }
+
+    public Double getVoltageValue() {
+        return voltageValue;
+    }
+
+    public void setVoltageValue(Double voltageValue) {
+        this.voltageValue = voltageValue;
+    }
+
+    public Integer getConncsq() {
+        return conncsq;
+    }
+
+    public void setConncsq(Integer conncsq) {
+        this.conncsq = conncsq;
+    }
+
+    public Integer getDevsendclycle() {
+        return devsendclycle;
+    }
+
+    public void setDevsendclycle(Integer devsendclycle) {
+        this.devsendclycle = devsendclycle;
+    }
+
+    public Double getWaterpressureValue() {
+        return waterpressureValue;
+    }
+
+    public void setWaterpressureValue(Double waterpressureValue) {
+        this.waterpressureValue = waterpressureValue;
+    }
+
+    public Integer getDevmessagecnt() {
+        return devmessagecnt;
+    }
+
+    public void setDevmessagecnt(Integer devmessagecnt) {
+        this.devmessagecnt = devmessagecnt;
+    }
+
+    public Integer getConnpci() {
+        return connpci;
+    }
+
+    public void setConnpci(Integer connpci) {
+        this.connpci = connpci;
+    }
+
+    public Integer getConnrsrp() {
+        return connrsrp;
+    }
+
+    public void setConnrsrp(Integer connrsrp) {
+        this.connrsrp = connrsrp;
+    }
+
+    public Integer getConnsnr() {
+        return connsnr;
+    }
+
+    public void setConnsnr(Integer connsnr) {
+        this.connsnr = connsnr;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataWindRainfallServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataWindRainfallServerProduct.java	(date 1574840330565)
+++ src/main/java/datasuorcetwo/datasource/server/DataWindRainfallServerProduct.java	(date 1574840330565)
@@ -0,0 +1,35 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataWindRainfall;
+import datasuorcetwo.datasource.repositoryProduct.DataWindRainfallRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataWindRainfallServerProduct implements DataBaseServerInte<DataWindRainfall> {
+    @Autowired
+    DataWindRainfallRepositoryProduct dataWindRainfallRepositoryProduct;
+
+    @Override
+    public Integer getMaxId() {
+        return dataWindRainfallRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return dataWindRainfallRepositoryProduct.getMinId();
+    }
+
+    @Override
+    public List<DataWindRainfall> get1wData(Integer beforeId, Integer afterId) {
+        return dataWindRainfallRepositoryProduct.get1wData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DataWindRainfall> dataWindRainfalls) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DataWindRainfall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DataWindRainfall.java	(date 1574840330434)
+++ src/main/java/datasuorcetwo/datasource/entity/DataWindRainfall.java	(date 1574840330434)
@@ -0,0 +1,125 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "data_wind_rainfall")
+public class DataWindRainfall extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "speed_value")
+    private Double speedValue;
+    @Column(name = "wind_value")
+    private String windValue;
+    @Column(name = "rainfall_vale")
+    private Double rainfallVale;
+    @Column(name = "battery_value")
+    private Double batteryValue;
+    @Column(name = "temperature_value")
+    private String temperatureValue;
+    @Column(name = "humidity_value")
+    private Double humidityValue;
+    @Column(name = "light_value")
+    private Double lightValue;
+    @Column(name = "pressure_value")
+    private Double pressureValue;
+    @Column(name = "device_id")
+    private Integer deviceId;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public Double getSpeedValue() {
+        return speedValue;
+    }
+
+    public void setSpeedValue(Double speedValue) {
+        this.speedValue = speedValue;
+    }
+
+    public String getWindValue() {
+        return windValue;
+    }
+
+    public void setWindValue(String windValue) {
+        this.windValue = windValue == null ? null : windValue.trim();
+    }
+
+    public Double getRainfallVale() {
+        return rainfallVale;
+    }
+
+    public void setRainfallVale(Double rainfallVale) {
+        this.rainfallVale = rainfallVale;
+    }
+
+    public Double getBatteryValue() {
+        return batteryValue;
+    }
+
+    public void setBatteryValue(Double batteryValue) {
+        this.batteryValue = batteryValue;
+    }
+
+    public String getTemperatureValue() {
+        return temperatureValue;
+    }
+
+    public void setTemperatureValue(String temperatureValue) {
+        this.temperatureValue = temperatureValue == null ? null : temperatureValue.trim();
+    }
+
+    public Double getHumidityValue() {
+        return humidityValue;
+    }
+
+    public void setHumidityValue(Double humidityValue) {
+        this.humidityValue = humidityValue;
+    }
+
+    public Double getLightValue() {
+        return lightValue;
+    }
+
+    public void setLightValue(Double lightValue) {
+        this.lightValue = lightValue;
+    }
+
+    public Double getPressureValue() {
+        return pressureValue;
+    }
+
+    public void setPressureValue(Double pressureValue) {
+        this.pressureValue = pressureValue;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DataWindRainfallRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DataWindRainfallRepositoryLocal.java	(date 1574840330625)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DataWindRainfallRepositoryLocal.java	(date 1574840330625)
@@ -0,0 +1,10 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DataWindRainfall;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface DataWindRainfallRepositoryLocal extends JpaRepository<DataWindRainfall, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_wind_rainfall order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DataWindRainfallRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DataWindRainfallRepositoryProduct.java	(date 1574840330315)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DataWindRainfallRepositoryProduct.java	(date 1574840330315)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DataWindRainfall;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DataWindRainfallRepositoryProduct extends JpaRepository<DataWindRainfall, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_wind_rainfall limit 1")
+    Integer getMinId();
+
+    @Query(nativeQuery = true, value = "select * from data_wind_rainfall where id > ? and id <= ?")
+    List<DataWindRainfall> get1wData(Integer beforeId, Integer afterId);
+
+    @Query(nativeQuery = true, value = "select id from data_wind_rainfall order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataWindRainfallServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataWindRainfallServerLocal.java	(date 1574840330505)
+++ src/main/java/datasuorcetwo/datasource/server/DataWindRainfallServerLocal.java	(date 1574840330505)
@@ -0,0 +1,38 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataWindRainfall;
+import datasuorcetwo.datasource.repositoryLocal.DataWindRainfallRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataWindRainfallServerLocal implements DataBaseServerInte<DataWindRainfall> {
+    @Autowired
+    DataWindRainfallRepositoryLocal dataWindRainfallRepositoryLocal;
+
+    @Override
+    public Integer getMaxId() {
+        return dataWindRainfallRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return null;
+    }
+
+    @Override
+    public List<DataWindRainfall> get1wData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<DataWindRainfall> dataWindRainfalls) {
+        if(!dataWindRainfalls.isEmpty()){
+            dataWindRainfallRepositoryLocal.saveAll(dataWindRainfalls);
+        }
+        return 1;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/threadpool/UpdateRunnable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/threadpool/UpdateRunnable.java	(date 1575360925378)
+++ src/main/java/datasuorcetwo/datasource/threadpool/UpdateRunnable.java	(date 1575360925378)
@@ -0,0 +1,133 @@
+package datasuorcetwo.datasource.threadpool;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.BaseEntity;
+import datasuorcetwo.datasource.timer.UpdateTableTimer;
+
+import java.util.*;
+
+/**
+ * run方法是同步出去data的部分
+ * @param <T>
+ */
+public class UpdateRunnable<T> implements Runnable {
+
+    private int productMaxId;
+
+    public void setProductMaxId(int productMaxId) {
+        this.productMaxId = productMaxId;
+    }
+
+    // 起点Id
+    private int basisBase = 1;
+    public void setBasisBase(int basisBase) {
+        this.basisBase = basisBase;
+    }
+
+    // 增长基数
+    private int increaseBase;
+    public void setIncreaseBase(int increaseBase) {
+        this.increaseBase = increaseBase;
+    }
+
+    // 循环次数
+    private int cycleCount;
+    public void setCycleCount(int cycleCount) {
+        this.cycleCount = cycleCount;
+    }
+
+    private String name;
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    private BaseServerInte<T> product;
+    private BaseServerInte<T> local;
+    public void setProduct(BaseServerInte product) {
+        this.product = product;
+    }
+    public void setLocal(BaseServerInte local) {
+        this.local = local;
+    }
+
+    @Override
+    public void run() {
+        long l = System.currentTimeMillis();
+        for(int i = 0; i < cycleCount; i++){
+            // 获取两个表中同一个区间的数据
+            long l1 = System.currentTimeMillis();
+            List<T> localBetweenData = local.getBetweenData(basisBase, (basisBase + increaseBase));
+            List<T> productBetweenData = product.getBetweenData(basisBase, (basisBase + increaseBase));
+            long l2 = System.currentTimeMillis();
+            System.out.println("时间：" + UpdateTableTimer.dateFormat.format(new Date()) + " " + name + "：第 " + i + " 次获取 " + basisBase + " - " + (basisBase + increaseBase) + " 耗时：" + (l2 - l1) + "ms");
+            // 如果 productBetweenData == null，分两种情况，一种是游标还未到达最后一位，则继续，如果游标大于最后一位，说明后面没有数据了，则退出
+            if(productBetweenData.isEmpty()){
+                if(basisBase > productMaxId){
+                    break;
+                }else {
+                    basisBase = basisBase + increaseBase;
+                }
+                continue;
+            }
+            // 如果 localBetweenData == null，那么则将 productBetweenData 添加到目标数据库中
+            if(localBetweenData.isEmpty()){
+                long l3 = System.currentTimeMillis();
+                local.insert(productBetweenData);
+                long l4 = System.currentTimeMillis();
+                System.out.println("时间：" + UpdateTableTimer.dateFormat.format(new Date()) + " " + name + "：" + basisBase + " - " + (basisBase + increaseBase) + " 为null，添加 " + productBetweenData.size() + " 个耗时：" + (l4 - l3) + "ms");
+                basisBase = basisBase + increaseBase;
+                continue;
+            }
+            /*
+             * 1、将两个list转换为set集合，然后 目 减去 源 则是目标数据库需要删除与修改的数据
+             * 2、源 减去 目 则是目标数据库需要添加与修改的数据
+             * 总结：这样做虽然可能将目与源都有但属性值不一样的数据删除了（其实修改就行了），然后在进行添加，
+             *  可能这比较多余，但是总的来说，比一个一个的去比对要方便得多，因为一个一个比对可能会涉及到双重循环。
+             * 注：但是如果集合中是对象，那么除非是一个对象，否则进行运算都会当成不同的对象，因此上面所有list中的对象
+             *  都是不一样的对象，虽然可能对象中的属性值一模一样，这是由于object中的hashcode造成的，因此如果需要使得
+             *  两个属性一样的对象在set中当成一个，必须得重写object中的hashcode和equals方法，重写hashcode方法是保证
+             *  两个对象属性值一样但地址值不一样的对象的hashcode的值一样；（因此在baseEntity中重写这两个方法即可）
+             */
+            // 这两个用来计算：目 - 源 = 目标数据库应该删除（与修改）的
+            Set<T> pSet = new HashSet<>(productBetweenData);
+            Set<T> lSet = new HashSet<>(localBetweenData);
+            lSet.removeAll(pSet);
+            /*
+             * 需要先删除的作用在于：如果不要这一步，那么下面的insert就相当于update操作；但是如果没有这一步，假如源数据库中有一条
+             * 记录被删除了，但是目标数据库还有记录，这样就会导致目标数据库那条记录永远存在。而加上这一步，虽然会把已存在的设备先
+             * 删除掉，但是可以完全保证数据同步（即：每个数据都完全一样。）
+             */
+            if(!lSet.isEmpty()){
+                long l5 = System.currentTimeMillis();
+                local.deleteByIterator(lSet);
+                long l6 = System.currentTimeMillis();
+                // 记录删除的id
+                StringBuilder ids = new StringBuilder();
+                for(T t : lSet){
+                    ids.append(((BaseEntity) t).getId() + ",");
+                }
+                System.out.println("时间：" + UpdateTableTimer.dateFormat.format(new Date()) + " " + name + "：删除" + basisBase + " - " + (basisBase + increaseBase) + " 之间 " + lSet.size() + " 个数据，id是("+
+                        ids.toString()+")耗时：" + (l6 - l5) + "ms");
+            }
+
+            // 这两个用来计算：源 - 目 = 目标数据库应该添加（与修改）的
+            Set<T> p1Set = new HashSet<>(productBetweenData);
+            Set<T> l1Set = new HashSet<>(localBetweenData);
+            p1Set.removeAll(l1Set);
+            if(!p1Set.isEmpty()){
+                long l7 = System.currentTimeMillis();
+                local.insert(new ArrayList<>(p1Set));
+                long l8 = System.currentTimeMillis();
+                StringBuilder ids = new StringBuilder();
+                for(T t : p1Set){
+                    ids.append(((BaseEntity) t).getId() + ",");
+                }
+                System.out.println("时间：" + UpdateTableTimer.dateFormat.format(new Date()) + " " + name + "：添加" + basisBase + " - " + (basisBase + increaseBase) + " 之间 " + p1Set.size() + " 个数据，id是("+
+                        ids.toString()+")耗时：" + (l8 - l7) + "ms");
+            }
+            basisBase = basisBase + increaseBase;
+        }
+        long ll = System.currentTimeMillis();
+        System.out.println("时间：" + UpdateTableTimer.dateFormat.format(new Date()) + " " + name + "：总耗时：**************************************************：" + (ll - l) + "ms");
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/controller/TestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/controller/TestController.java	(date 1563267133589)
+++ src/main/java/datasuorcetwo/datasource/controller/TestController.java	(date 1563267133589)
@@ -0,0 +1,33 @@
+package datasuorcetwo.datasource.controller;
+
+import datasuorcetwo.datasource.entity.DeviceSwitch;
+import datasuorcetwo.datasource.server.DeviceSwitchServerLocal;
+import datasuorcetwo.datasource.server.DeviceSwitchServerProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.ResponseBody;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Controller
+public class TestController {
+    @Autowired
+    DeviceSwitchServerProduct deviceSwitchServerProduct;
+    @Autowired
+    DeviceSwitchServerLocal deviceSwitchServerLocal;
+
+    @RequestMapping(value = "getProductDeviceSwitchAllByDeviceTypeId")
+    @ResponseBody
+    public String getProductDeviceSwitchAllByDeviceTypeId(){
+        deviceSwitchServerProduct.getMaxId();
+        return "生产";
+    }
+
+    @RequestMapping(value = "getLocalDeviceSwitchAllByDeviceTypeId")
+    @ResponseBody
+    public String getLocalDeviceSwitchAllByDeviceTypeId(){
+        return "本地";
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceSwitchServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceSwitchServerProduct.java	(date 1575349522014)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceSwitchServerProduct.java	(date 1575349522014)
@@ -0,0 +1,39 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceSwitch;
+import datasuorcetwo.datasource.repositoryProduct.DeviceSwitchRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import java.util.List;
+
+@Service
+public class DeviceSwitchServerProduct implements BaseServerInte<DeviceSwitch> {
+    @Autowired
+    DeviceSwitchRepositoryProduct deviceSwitchRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceSwitchRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceSwitch> getThanMaxId(Integer maxId) {
+        return deviceSwitchRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceSwitch> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceSwitchRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceSwitch> deviceSwitches) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceSwitch> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceSwitch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceSwitch.java	(date 1575353602417)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceSwitch.java	(date 1575353602417)
@@ -0,0 +1,636 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ * 注：不知为何，没有添加 @Column(name = "") 会报没找到字段的错误
+ */
+@Entity
+@Table(name = "device_switch")
+public class DeviceSwitch extends BaseEntity implements Serializable{
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+
+    @Column(name = "device_nb_id")
+    private String deviceNbId;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "mode")
+    private String mode;
+    @Column(name = "mode2")
+    private String mode2;
+    @Column(name = "upper_limit")
+    private Double upperLimit;
+    @Column(name = "lower_limit")
+    private Double lowerLimit;
+    @Column(name = "outs")
+    private String outs;
+    @Column(name = "outs2")
+    private String outs2;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "is_delete")
+    private Integer isDelete;
+    @Column(name = "status_change_time")
+    private Date statusChangeTime;
+    @Column(name = "interval_time")
+    private Integer intervalTime;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "image_path")
+    private String imagePath;
+    @Column(name = "first_letter")
+    private String firstLetter;
+    @Column(name = "fixed_parameters")
+    private String fixedParameters;
+    @Column(name = "fixed_parameters2")
+    private String fixedParameters2;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+    @Column(name = "user_id")
+    private Integer userId;
+    @Column(name = "device_ip")
+    private String deviceIp;
+    @Column(name = "switch_status")
+    private Long switchStatus;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "gateway_id")
+    private Integer gatewayId;
+    @Column(name = "gateway_name")
+    private String gatewayName;
+    @Column(name = "gateway_code")
+    private String gatewayCode;
+    @Column(name = "channel")
+    private Integer channel;
+    @Column(name = "access_mode")
+    private Byte accessMode;
+    @Column(name = "brand")
+    private String brand;
+    @Column(name = "model")
+    private String model;
+    @Column(name = "firmware")
+    private String firmware;
+    @Column(name = "organization")
+    private String organization;
+    @Column(name = "region")
+    private String region;
+    @Column(name = "branch")
+    private String branch;
+    @Column(name = "cmd_first_letter")
+    private Long cmdFirstLetter;
+    @Column(name = "cmd_switch_status")
+    private Long cmdSwitchStatus;
+    @Column(name = "road")
+    private Integer road;
+    @Column(name = "linkage_device_id")
+    private Integer linkageDeviceId;
+    @Column(name = "linkage_device_type_id")
+    private Integer linkageDeviceTypeId;
+    @Column(name = "linkage_weather")
+    private Integer linkageWeather;
+    @Column(name = "lower_limit_expect")
+    private Double lowerLimitExpect;
+    @Column(name = "lower_limit_value")
+    private Double lowerLimitValue;
+    @Column(name = "upper_limit_expect")
+    private Double upperLimitExpect;
+    @Column(name = "upper_limit_value")
+    private Double upperLimitValue;
+    @Column(name = "road2")
+    private Integer road2;
+    @Column(name = "linkage_weather2")
+    private Integer linkageWeather2;
+    @Column(name = "linkage_device_id2")
+    private Integer linkageDeviceId2;
+    @Column(name = "linkage_device_type_id2")
+    private Integer linkageDeviceTypeId2;
+    @Column(name = "lower_limit_expect2")
+    private Double lowerLimitExpect2;
+    @Column(name = "lower_limit_value2")
+    private Double lowerLimitValue2;
+    @Column(name = "upper_limit_expect2")
+    private Double upperLimitExpect2;
+    @Column(name = "upper_limit_value2")
+    private Double upperLimitValue2;
+
+    @Column(name = "cmd_copy")
+    private Long cmdCopy;
+
+    @Column(name = "cmd_copy_time")
+    private Date cmdCopyTime;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getDeviceNbId() {
+        return deviceNbId;
+    }
+
+    public void setDeviceNbId(String deviceNbId) {
+        this.deviceNbId = deviceNbId == null ? null : deviceNbId.trim();
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public String getMode() {
+        return mode;
+    }
+
+    public void setMode(String mode) {
+        this.mode = mode == null ? null : mode.trim();
+    }
+
+    public String getMode2() {
+        return mode2;
+    }
+
+    public void setMode2(String mode2) {
+        this.mode2 = mode2 == null ? null : mode2.trim();
+    }
+
+    public Double getUpperLimit() {
+        return upperLimit;
+    }
+
+    public void setUpperLimit(Double upperLimit) {
+        this.upperLimit = upperLimit;
+    }
+
+    public Double getLowerLimit() {
+        return lowerLimit;
+    }
+
+    public void setLowerLimit(Double lowerLimit) {
+        this.lowerLimit = lowerLimit;
+    }
+
+    public String getOuts() {
+        return outs;
+    }
+
+    public void setOuts(String outs) {
+        this.outs = outs == null ? null : outs.trim();
+    }
+
+    public String getOuts2() {
+        return outs2;
+    }
+
+    public void setOuts2(String outs2) {
+        this.outs2 = outs2 == null ? null : outs2.trim();
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Integer getIsDelete() {
+        return isDelete;
+    }
+
+    public void setIsDelete(Integer isDelete) {
+        this.isDelete = isDelete;
+    }
+
+    public Date getStatusChangeTime() {
+        return statusChangeTime;
+    }
+
+    public void setStatusChangeTime(Date statusChangeTime) {
+        this.statusChangeTime = statusChangeTime;
+    }
+
+    public Integer getIntervalTime() {
+        return intervalTime;
+    }
+
+    public void setIntervalTime(Integer intervalTime) {
+        this.intervalTime = intervalTime;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public String getImagePath() {
+        return imagePath;
+    }
+
+    public void setImagePath(String imagePath) {
+        this.imagePath = imagePath == null ? null : imagePath.trim();
+    }
+
+    public String getFirstLetter() {
+        return firstLetter;
+    }
+
+    public void setFirstLetter(String firstLetter) {
+        this.firstLetter = firstLetter == null ? null : firstLetter.trim();
+    }
+
+    public String getFixedParameters() {
+        return fixedParameters;
+    }
+
+    public void setFixedParameters(String fixedParameters) {
+        this.fixedParameters = fixedParameters == null ? null : fixedParameters.trim();
+    }
+
+    public String getFixedParameters2() {
+        return fixedParameters2;
+    }
+
+    public void setFixedParameters2(String fixedParameters2) {
+        this.fixedParameters2 = fixedParameters2 == null ? null : fixedParameters2.trim();
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public Integer getUserId() {
+        return userId;
+    }
+
+    public void setUserId(Integer userId) {
+        this.userId = userId;
+    }
+
+    public String getDeviceIp() {
+        return deviceIp;
+    }
+
+    public void setDeviceIp(String deviceIp) {
+        this.deviceIp = deviceIp == null ? null : deviceIp.trim();
+    }
+
+    public Long getSwitchStatus() {
+        return switchStatus;
+    }
+
+    public void setSwitchStatus(Long switchStatus) {
+        this.switchStatus = switchStatus;
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public Integer getGatewayId() {
+        return gatewayId;
+    }
+
+    public void setGatewayId(Integer gatewayId) {
+        this.gatewayId = gatewayId;
+    }
+
+    public String getGatewayName() {
+        return gatewayName;
+    }
+
+    public void setGatewayName(String gatewayName) {
+        this.gatewayName = gatewayName == null ? null : gatewayName.trim();
+    }
+
+    public String getGatewayCode() {
+        return gatewayCode;
+    }
+
+    public void setGatewayCode(String gatewayCode) {
+        this.gatewayCode = gatewayCode == null ? null : gatewayCode.trim();
+    }
+
+    public Integer getChannel() {
+        return channel;
+    }
+
+    public void setChannel(Integer channel) {
+        this.channel = channel;
+    }
+
+    public Byte getAccessMode() {
+        return accessMode;
+    }
+
+    public void setAccessMode(Byte accessMode) {
+        this.accessMode = accessMode;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand == null ? null : brand.trim();
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model == null ? null : model.trim();
+    }
+
+    public String getFirmware() {
+        return firmware;
+    }
+
+    public void setFirmware(String firmware) {
+        this.firmware = firmware == null ? null : firmware.trim();
+    }
+
+    public String getOrganization() {
+        return organization;
+    }
+
+    public void setOrganization(String organization) {
+        this.organization = organization == null ? null : organization.trim();
+    }
+
+    public String getRegion() {
+        return region;
+    }
+
+    public void setRegion(String region) {
+        this.region = region == null ? null : region.trim();
+    }
+
+    public String getBranch() {
+        return branch;
+    }
+
+    public void setBranch(String branch) {
+        this.branch = branch == null ? null : branch.trim();
+    }
+
+    public Long getCmdFirstLetter() {
+        return cmdFirstLetter;
+    }
+
+    public void setCmdFirstLetter(Long cmdFirstLetter) {
+        this.cmdFirstLetter = cmdFirstLetter;
+    }
+
+    public Long getCmdSwitchStatus() {
+        return cmdSwitchStatus;
+    }
+
+    public void setCmdSwitchStatus(Long cmdSwitchStatus) {
+        this.cmdSwitchStatus = cmdSwitchStatus;
+    }
+
+    public Integer getRoad() {
+        return road;
+    }
+
+    public void setRoad(Integer road) {
+        this.road = road;
+    }
+
+    public Integer getLinkageDeviceId() {
+        return linkageDeviceId;
+    }
+
+    public void setLinkageDeviceId(Integer linkageDeviceId) {
+        this.linkageDeviceId = linkageDeviceId;
+    }
+
+    public Integer getLinkageDeviceTypeId() {
+        return linkageDeviceTypeId;
+    }
+
+    public void setLinkageDeviceTypeId(Integer linkageDeviceTypeId) {
+        this.linkageDeviceTypeId = linkageDeviceTypeId;
+    }
+
+    public Integer getLinkageWeather() {
+        return linkageWeather;
+    }
+
+    public void setLinkageWeather(Integer linkageWeather) {
+        this.linkageWeather = linkageWeather;
+    }
+
+    public Double getLowerLimitExpect() {
+        return lowerLimitExpect;
+    }
+
+    public void setLowerLimitExpect(Double lowerLimitExpect) {
+        this.lowerLimitExpect = lowerLimitExpect;
+    }
+
+    public Double getLowerLimitValue() {
+        return lowerLimitValue;
+    }
+
+    public void setLowerLimitValue(Double lowerLimitValue) {
+        this.lowerLimitValue = lowerLimitValue;
+    }
+
+    public Double getUpperLimitExpect() {
+        return upperLimitExpect;
+    }
+
+    public void setUpperLimitExpect(Double upperLimitExpect) {
+        this.upperLimitExpect = upperLimitExpect;
+    }
+
+    public Double getUpperLimitValue() {
+        return upperLimitValue;
+    }
+
+    public void setUpperLimitValue(Double upperLimitValue) {
+        this.upperLimitValue = upperLimitValue;
+    }
+
+    public Integer getRoad2() {
+        return road2;
+    }
+
+    public void setRoad2(Integer road2) {
+        this.road2 = road2;
+    }
+
+    public Integer getLinkageWeather2() {
+        return linkageWeather2;
+    }
+
+    public void setLinkageWeather2(Integer linkageWeather2) {
+        this.linkageWeather2 = linkageWeather2;
+    }
+
+    public Integer getLinkageDeviceId2() {
+        return linkageDeviceId2;
+    }
+
+    public void setLinkageDeviceId2(Integer linkageDeviceId2) {
+        this.linkageDeviceId2 = linkageDeviceId2;
+    }
+
+    public Integer getLinkageDeviceTypeId2() {
+        return linkageDeviceTypeId2;
+    }
+
+    public void setLinkageDeviceTypeId2(Integer linkageDeviceTypeId2) {
+        this.linkageDeviceTypeId2 = linkageDeviceTypeId2;
+    }
+
+    public Double getLowerLimitExpect2() {
+        return lowerLimitExpect2;
+    }
+
+    public void setLowerLimitExpect2(Double lowerLimitExpect2) {
+        this.lowerLimitExpect2 = lowerLimitExpect2;
+    }
+
+    public Double getLowerLimitValue2() {
+        return lowerLimitValue2;
+    }
+
+    public void setLowerLimitValue2(Double lowerLimitValue2) {
+        this.lowerLimitValue2 = lowerLimitValue2;
+    }
+
+    public Double getUpperLimitExpect2() {
+        return upperLimitExpect2;
+    }
+
+    public void setUpperLimitExpect2(Double upperLimitExpect2) {
+        this.upperLimitExpect2 = upperLimitExpect2;
+    }
+
+    public Double getUpperLimitValue2() {
+        return upperLimitValue2;
+    }
+
+    public void setUpperLimitValue2(Double upperLimitValue2) {
+        this.upperLimitValue2 = upperLimitValue2;
+    }
+
+    public Long getCmdCopy() {
+        return cmdCopy;
+    }
+
+    public void setCmdCopy(Long cmdCopy) {
+        this.cmdCopy = cmdCopy;
+    }
+
+    public Date getCmdCopyTime() {
+        return cmdCopyTime;
+    }
+
+    public void setCmdCopyTime(Date cmdCopyTime) {
+        this.cmdCopyTime = cmdCopyTime;
+    }
+
+    @Override
+    public String toString() {
+        return "DS{" +
+                "id=" + id +
+                ", ni='" + deviceNbId + '\'' +
+                ", c='" + deviceCode + '\'' +
+                ", n='" + name + '\'' +
+                ", m='" + mode + '\'' +
+                ", m2='" + mode2 + '\'' +
+                ", o='" + outs + '\'' +
+                ", o2='" + outs2 + '\'' +
+                ", ss=" + status +
+                ", iD=" + isDelete +
+                ", sC=" + statusChangeTime +
+                ", fP='" + fixedParameters + '\'' +
+                ", fP2='" + fixedParameters2 + '\'' +
+                ", dTI=" + deviceTypeId +
+                ", sS=" + switchStatus +
+                ", gI=" + gatewayId +
+                ", gC='" + gatewayCode + '\'' +
+                ", cl=" + channel +
+                ", aM=" + accessMode +
+                ", ml='" + model + '\'' +
+                ", on='" + organization + '\'' +
+                ", rn='" + region + '\'' +
+                ", bh='" + branch + '\'' +
+                ", cFL=" + cmdFirstLetter +
+                ", cSS=" + cmdSwitchStatus +
+                ", road=" + road +
+                ", lDId=" + linkageDeviceId +
+                ", lDTId=" + linkageDeviceTypeId +
+                ", lW=" + linkageWeather +
+                ", lLE=" + lowerLimitExpect +
+                ", lLV=" + lowerLimitValue +
+                ", r2=" + road2 +
+                ", lW2=" + linkageWeather2 +
+                ", lDI2=" + linkageDeviceId2 +
+                ", lDTI2=" + linkageDeviceTypeId2 +
+                ", lLE2=" + lowerLimitExpect2 +
+                ", lLV2=" + lowerLimitValue2 +
+                ", cC=" + cmdCopy +
+                ", cCT=" + cmdCopyTime +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceWaterPressure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceWaterPressure.java	(date 1575358928368)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceWaterPressure.java	(date 1575358928368)
@@ -0,0 +1,442 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "device_water_pressure")
+public class DeviceWaterPressure  extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_nb_id")
+    private String deviceNbId;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "upper_limit")
+    private Double upperLimit;
+    @Column(name = "lower_limit")
+    private Double lowerLimit;
+    @Column(name = "waterpressure_yellow")
+    private Double waterpressureYellow;
+    @Column(name = "waterpressure_orange")
+    private Double waterpressureOrange;
+    @Column(name = "waterpressure_red")
+    private Double waterpressureRed;
+    @Column(name = "voltage_yellow")
+    private Double voltageYellow;
+    @Column(name = "voltage_orange")
+    private Double voltageOrange;
+    @Column(name = "voltage_red")
+    private Double voltageRed;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "status_change_time")
+    private Date statusChangeTime;
+    @Column(name = "interval_time")
+    private Integer intervalTime;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "image_path")
+    private String imagePath;
+    @Column(name = "first_letter")
+    private String firstLetter;
+    @Column(name = "rate")
+    private String rate;
+    @Column(name = "alarmStatus")
+    private String alarmstatus;
+    @Column(name = "picture")
+    private String picture;
+    @Column(name = "is_delete")
+    private Integer isDelete;
+    @Column(name = "has_switch")
+    private Integer hasSwitch;
+    @Column(name = "fixed_parameters")
+    private String fixedParameters;
+    @Column(name = "switch_status")
+    private Integer switchStatus;
+    @Column(name = "switch_status_change_time")
+    private Date switchStatusChangeTime;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+    @Column(name = "gateway_id")
+    private Integer gatewayId;
+    @Column(name = "gateway_name")
+    private String gatewayName;
+    @Column(name = "gateway_code")
+    private String gatewayCode;
+    @Column(name = "channel")
+    private Integer channel;
+    @Column(name = "access_mode")
+    private Byte accessMode;
+    @Column(name = "brand")
+    private String brand;
+    @Column(name = "model")
+    private String model;
+    @Column(name = "firmware")
+    private String firmware;
+    @Column(name = "organization")
+    private String organization;
+    @Column(name = "region")
+    private String region;
+    @Column(name = "branch")
+    private String branch;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getDeviceNbId() {
+        return deviceNbId;
+    }
+
+    public void setDeviceNbId(String deviceNbId) {
+        this.deviceNbId = deviceNbId == null ? null : deviceNbId.trim();
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public Double getUpperLimit() {
+        return upperLimit;
+    }
+
+    public void setUpperLimit(Double upperLimit) {
+        this.upperLimit = upperLimit;
+    }
+
+    public Double getLowerLimit() {
+        return lowerLimit;
+    }
+
+    public void setLowerLimit(Double lowerLimit) {
+        this.lowerLimit = lowerLimit;
+    }
+
+    public Double getWaterpressureYellow() {
+        return waterpressureYellow;
+    }
+
+    public void setWaterpressureYellow(Double waterpressureYellow) {
+        this.waterpressureYellow = waterpressureYellow;
+    }
+
+    public Double getWaterpressureOrange() {
+        return waterpressureOrange;
+    }
+
+    public void setWaterpressureOrange(Double waterpressureOrange) {
+        this.waterpressureOrange = waterpressureOrange;
+    }
+
+    public Double getWaterpressureRed() {
+        return waterpressureRed;
+    }
+
+    public void setWaterpressureRed(Double waterpressureRed) {
+        this.waterpressureRed = waterpressureRed;
+    }
+
+    public Double getVoltageYellow() {
+        return voltageYellow;
+    }
+
+    public void setVoltageYellow(Double voltageYellow) {
+        this.voltageYellow = voltageYellow;
+    }
+
+    public Double getVoltageOrange() {
+        return voltageOrange;
+    }
+
+    public void setVoltageOrange(Double voltageOrange) {
+        this.voltageOrange = voltageOrange;
+    }
+
+    public Double getVoltageRed() {
+        return voltageRed;
+    }
+
+    public void setVoltageRed(Double voltageRed) {
+        this.voltageRed = voltageRed;
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Date getStatusChangeTime() {
+        return statusChangeTime;
+    }
+
+    public void setStatusChangeTime(Date statusChangeTime) {
+        this.statusChangeTime = statusChangeTime;
+    }
+
+    public Integer getIntervalTime() {
+        return intervalTime;
+    }
+
+    public void setIntervalTime(Integer intervalTime) {
+        this.intervalTime = intervalTime;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public String getImagePath() {
+        return imagePath;
+    }
+
+    public void setImagePath(String imagePath) {
+        this.imagePath = imagePath == null ? null : imagePath.trim();
+    }
+
+    public String getFirstLetter() {
+        return firstLetter;
+    }
+
+    public void setFirstLetter(String firstLetter) {
+        this.firstLetter = firstLetter == null ? null : firstLetter.trim();
+    }
+
+    public String getRate() {
+        return rate;
+    }
+
+    public void setRate(String rate) {
+        this.rate = rate == null ? null : rate.trim();
+    }
+
+    public String getAlarmstatus() {
+        return alarmstatus;
+    }
+
+    public void setAlarmstatus(String alarmstatus) {
+        this.alarmstatus = alarmstatus == null ? null : alarmstatus.trim();
+    }
+
+    public String getPicture() {
+        return picture;
+    }
+
+    public void setPicture(String picture) {
+        this.picture = picture == null ? null : picture.trim();
+    }
+
+    public Integer getIsDelete() {
+        return isDelete;
+    }
+
+    public void setIsDelete(Integer isDelete) {
+        this.isDelete = isDelete;
+    }
+
+    public Integer getHasSwitch() {
+        return hasSwitch;
+    }
+
+    public void setHasSwitch(Integer hasSwitch) {
+        this.hasSwitch = hasSwitch;
+    }
+
+    public String getFixedParameters() {
+        return fixedParameters;
+    }
+
+    public void setFixedParameters(String fixedParameters) {
+        this.fixedParameters = fixedParameters == null ? null : fixedParameters.trim();
+    }
+
+    public Integer getSwitchStatus() {
+        return switchStatus;
+    }
+
+    public void setSwitchStatus(Integer switchStatus) {
+        this.switchStatus = switchStatus;
+    }
+
+    public Date getSwitchStatusChangeTime() {
+        return switchStatusChangeTime;
+    }
+
+    public void setSwitchStatusChangeTime(Date switchStatusChangeTime) {
+        this.switchStatusChangeTime = switchStatusChangeTime;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public Integer getGatewayId() {
+        return gatewayId;
+    }
+
+    public void setGatewayId(Integer gatewayId) {
+        this.gatewayId = gatewayId;
+    }
+
+    public String getGatewayName() {
+        return gatewayName;
+    }
+
+    public void setGatewayName(String gatewayName) {
+        this.gatewayName = gatewayName == null ? null : gatewayName.trim();
+    }
+
+    public String getGatewayCode() {
+        return gatewayCode;
+    }
+
+    public void setGatewayCode(String gatewayCode) {
+        this.gatewayCode = gatewayCode == null ? null : gatewayCode.trim();
+    }
+
+    public Integer getChannel() {
+        return channel;
+    }
+
+    public void setChannel(Integer channel) {
+        this.channel = channel;
+    }
+
+    public Byte getAccessMode() {
+        return accessMode;
+    }
+
+    public void setAccessMode(Byte accessMode) {
+        this.accessMode = accessMode;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand == null ? null : brand.trim();
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model == null ? null : model.trim();
+    }
+
+    public String getFirmware() {
+        return firmware;
+    }
+
+    public void setFirmware(String firmware) {
+        this.firmware = firmware == null ? null : firmware.trim();
+    }
+
+    public String getOrganization() {
+        return organization;
+    }
+
+    public void setOrganization(String organization) {
+        this.organization = organization == null ? null : organization.trim();
+    }
+
+    public String getRegion() {
+        return region;
+    }
+
+    public void setRegion(String region) {
+        this.region = region == null ? null : region.trim();
+    }
+
+    public String getBranch() {
+        return branch;
+    }
+
+    public void setBranch(String branch) {
+        this.branch = branch == null ? null : branch.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceWaterPressure{" +
+                "id=" + id +
+                ", deviceNbId='" + deviceNbId + '\'' +
+                ", deviceCode='" + deviceCode + '\'' +
+                ", name='" + name + '\'' +
+                ", status=" + status +
+                ", statusChangeTime=" + statusChangeTime +
+                ", isDelete=" + isDelete +
+                ", deviceTypeId=" + deviceTypeId +
+                ", gatewayCode='" + gatewayCode + '\'' +
+                ", channel=" + channel +
+                ", accessMode=" + accessMode +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceSwitchRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceSwitchRepositoryProduct.java	(date 1575341426389)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceSwitchRepositoryProduct.java	(date 1575341426389)
@@ -0,0 +1,19 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceSwitch;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceSwitchRepositoryProduct extends JpaRepository<DeviceSwitch, Integer> {
+
+    @Query(nativeQuery = true, value = "select id from device_switch order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_switch where id > ?")
+    List<DeviceSwitch> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_switch where id >= ? and id < ?")
+    List<DeviceSwitch> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/dataSourceConfig/DataSourceConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/dataSourceConfig/DataSourceConfig.java	(date 1574760924993)
+++ src/main/java/datasuorcetwo/datasource/dataSourceConfig/DataSourceConfig.java	(date 1574760924993)
@@ -0,0 +1,34 @@
+package datasuorcetwo.datasource.dataSourceConfig;
+
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.boot.jdbc.DataSourceBuilder;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import javax.sql.DataSource;
+
+/**
+ * 创建数据源的java文件，告诉程序要用到两个数据源，于是程序就去连接这两个数据库
+ * 怎么连接呢？默认的连接已经行不通了，因此对于每个数据库还需要有一个定义文件告诉程序如何去连接他
+ * 同样在该包下新建两个数据库定义文件，分别定义生产和本地数据库
+ * 注：生产数据库即源数据库，本地数据库即目标数据库。到时候可以自己转换到对应数据库
+ */
+@Configuration
+public class DataSourceConfig {
+    @Bean(name = "productDataSource")
+    @Qualifier("productDataSource")
+    @ConfigurationProperties(prefix = "spring.datasource.product")
+    public DataSource productDataSource(){
+        System.out.println("源数据库");
+        return DataSourceBuilder.create().build();
+    }
+
+    @Bean(name = "localDataSource")
+    @Qualifier("localDataSource")
+    @ConfigurationProperties(prefix = "spring.datasource.local")
+    public DataSource localDataSource(){
+        System.out.println("目标数据库");
+        return DataSourceBuilder.create().build();
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/dataSourceConfig/LocalConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/dataSourceConfig/LocalConfig.java	(date 1563243615710)
+++ src/main/java/datasuorcetwo/datasource/dataSourceConfig/LocalConfig.java	(date 1563243615710)
@@ -0,0 +1,61 @@
+package datasuorcetwo.datasource.dataSourceConfig;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;
+import org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;
+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;
+import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Primary;
+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
+import org.springframework.orm.jpa.JpaTransactionManager;
+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
+import org.springframework.transaction.PlatformTransactionManager;
+import org.springframework.transaction.annotation.EnableTransactionManagement;
+
+import javax.annotation.Resource;
+import javax.persistence.EntityManager;
+import javax.sql.DataSource;
+import java.util.Map;
+import java.util.Properties;
+
+@Configuration
+@EnableTransactionManagement
+@EnableJpaRepositories(
+        entityManagerFactoryRef = "entityManagerFactoryBeanLocal",
+        transactionManagerRef = "transactionManagerLocal",
+        basePackages = {"datasuorcetwo.datasource.repositoryLocal"} // 设置Repository所在的位置
+)
+public class LocalConfig {
+    @Resource
+    @Qualifier("localDataSource")
+    private DataSource localDataSource;
+
+    @Primary
+    @Bean(name = "entityManagerFactoryBeanLocal")
+    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBeanLocal(){
+        HibernateJpaVendorAdapter jpaVendorAdapter = new HibernateJpaVendorAdapter();
+        LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean();
+        factoryBean.setDataSource(localDataSource);
+        factoryBean.setJpaVendorAdapter(jpaVendorAdapter);
+        factoryBean.setPackagesToScan("datasuorcetwo.datasource.entity");
+        factoryBean.setJpaProperties(hibernateProperties());
+
+        return factoryBean;
+    }
+
+    public Properties hibernateProperties(){
+        final Properties hibernateProperties = new Properties();
+        hibernateProperties.setProperty("hibernate.dialect","org.hibernate.dialect.MySQL5Dialect");
+        return hibernateProperties;
+    }
+
+    @Primary
+    @Bean(name = "transactionManagerLocal")
+    public PlatformTransactionManager transactionManagerLocal(){
+        return new JpaTransactionManager(entityManagerFactoryBeanLocal().getObject());
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/dataSourceConfig/ProductConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/dataSourceConfig/ProductConfig.java	(date 1563243615579)
+++ src/main/java/datasuorcetwo/datasource/dataSourceConfig/ProductConfig.java	(date 1563243615579)
@@ -0,0 +1,61 @@
+package datasuorcetwo.datasource.dataSourceConfig;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;
+import org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;
+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;
+import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Primary;
+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
+import org.springframework.orm.jpa.JpaTransactionManager;
+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
+import org.springframework.transaction.PlatformTransactionManager;
+import org.springframework.transaction.annotation.EnableTransactionManagement;
+
+import javax.annotation.Resource;
+import javax.persistence.EntityManager;
+import javax.sql.DataSource;
+import java.util.Map;
+import java.util.Properties;
+
+@Configuration
+@EnableTransactionManagement
+@EnableJpaRepositories(
+        entityManagerFactoryRef = "entityManagerFactoryBeanProduct",
+        transactionManagerRef = "transactionManagerProduct",
+        basePackages = {"datasuorcetwo.datasource.repositoryProduct"} // 设置Repository所在的位置
+)
+public class ProductConfig {
+    @Resource
+    @Qualifier("productDataSource")
+    private DataSource productDataSource;
+
+    @Primary
+    @Bean(name = "entityManagerFactoryBeanProduct")
+    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBeanProduct(){
+        HibernateJpaVendorAdapter jpaVendorAdapter = new HibernateJpaVendorAdapter();
+        LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean();
+        factoryBean.setDataSource(productDataSource);
+        factoryBean.setJpaVendorAdapter(jpaVendorAdapter);
+        factoryBean.setPackagesToScan("datasuorcetwo.datasource.entity");
+        factoryBean.setJpaProperties(hibernateProperties());
+
+        return factoryBean;
+    }
+
+    public Properties hibernateProperties(){
+        final Properties hibernateProperties = new Properties();
+        hibernateProperties.setProperty("hibernate.dialect","org.hibernate.dialect.MySQL5Dialect");
+        return hibernateProperties;
+    }
+
+    @Primary
+    @Bean(name = "transactionManagerProduct")
+    public PlatformTransactionManager transactionManagerProduct(){
+        return new JpaTransactionManager(entityManagerFactoryBeanProduct().getObject());
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceWaterPressureRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceWaterPressureRepositoryLocal.java	(date 1575358851096)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceWaterPressureRepositoryLocal.java	(date 1575358851096)
@@ -0,0 +1,17 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceWaterPressure;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceWaterPressureRepositoryLocal  extends JpaRepository<DeviceWaterPressure, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_water_pressure order by id desc limit 1")
+    Integer findMaxId();
+    @Query(nativeQuery = true, value = "select * from device_water_pressure where id > ?")
+    List<DeviceWaterPressure> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_water_pressure where id >= ? and id < ?")
+    List<DeviceWaterPressure> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceWaterPressureRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceWaterPressureRepositoryProduct.java	(date 1575358851053)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceWaterPressureRepositoryProduct.java	(date 1575358851053)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceWaterPressure;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceWaterPressureRepositoryProduct extends JpaRepository<DeviceWaterPressure, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_water_pressure order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_water_pressure where id > ?")
+    List<DeviceWaterPressure> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_water_pressure where id >= ? and id < ?")
+    List<DeviceWaterPressure> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceWaterPressureServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceWaterPressureServerLocal.java	(date 1575358851152)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceWaterPressureServerLocal.java	(date 1575358851152)
@@ -0,0 +1,48 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceWaterPressure;
+import datasuorcetwo.datasource.repositoryLocal.DeviceWaterPressureRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceWaterPressureServerLocal implements BaseServerInte<DeviceWaterPressure> {
+
+    @Autowired
+    DeviceWaterPressureRepositoryLocal deviceWaterPressureRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceWaterPressureRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceWaterPressureRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceWaterPressure> getThanMaxId(Integer id) {
+        return deviceWaterPressureRepositoryLocal.findThanMaxId(id);
+    }
+
+    @Override
+    public List<DeviceWaterPressure> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceWaterPressureRepositoryLocal.getBetweenData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceWaterPressure> deviceWaterPressures) {
+        if(!deviceWaterPressures.isEmpty()){
+            deviceWaterPressureRepositoryLocal.saveAll(deviceWaterPressures);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceWaterPressure> iterable) {
+        deviceWaterPressureRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceWaterPressureServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceWaterPressureServerProduct.java	(date 1575358851205)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceWaterPressureServerProduct.java	(date 1575358851205)
@@ -0,0 +1,41 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceWaterPressure;
+import datasuorcetwo.datasource.repositoryProduct.DeviceWaterPressureRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceWaterPressureServerProduct implements BaseServerInte<DeviceWaterPressure> {
+
+    @Autowired
+    DeviceWaterPressureRepositoryProduct deviceWaterPressureRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceWaterPressureRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceWaterPressure> getThanMaxId(Integer id) {
+        return deviceWaterPressureRepositoryProduct.findThanMaxId(id);
+    }
+
+    @Override
+    public List<DeviceWaterPressure> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceWaterPressureRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceWaterPressure> deviceWaterPressures) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceWaterPressure> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/NbCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/NbCommand.java	(date 1575445156089)
+++ src/main/java/datasuorcetwo/datasource/entity/NbCommand.java	(date 1575445156089)
@@ -0,0 +1,202 @@
+package datasuorcetwo.datasource.entity;
+
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "nb_command")
+public class NbCommand extends BaseEntity implements Serializable {
+    @Id
+    @Column(name = "command_id")
+    private String commandId;
+    @Column(name = "device_nb_id")
+    private String deviceNbId;
+    @Column(name = "para_dvc_type")
+    private Integer paraDvcType;
+    @Column(name = "para_cmd")
+    private Integer paraCmd;
+    @Column(name = "resp_para_cmd_rcvd")
+    private Integer respParaCmdRcvd;
+    @Column(name = "resp_para_response")
+    private Integer respParaResponse;
+    @Column(name = "resp_para_dvc_type")
+    private Integer respParaDvcType;
+    @Column(name = "resp_error_code")
+    private Integer respErrorCode;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "deliver_time")
+    private Date deliverTime;
+    @Column(name = "success_time")
+    private Date successTime;
+    @Column(name = "status")
+    private String status;
+    @Column(name = "timeout_time")
+    private Date timeoutTime;
+    @Column(name = "status_time")
+    private Date statusTime;
+    @Column(name = "retry_times")
+    private Date retryTimes;
+    @Column(name = "command_id_2nd")
+    private Date commandId2nd;
+    @Column(name = "command_id_3nd")
+    private Date commandId3nd;
+
+    public String getCommandId() {
+        return commandId;
+    }
+
+    public void setCommandId(String commandId) {
+        this.commandId = commandId == null ? null : commandId.trim();
+    }
+
+    public String getDeviceNbId() {
+        return deviceNbId;
+    }
+
+    public void setDeviceNbId(String deviceNbId) {
+        this.deviceNbId = deviceNbId == null ? null : deviceNbId.trim();
+    }
+
+    public Integer getParaDvcType() {
+        return paraDvcType;
+    }
+
+    public void setParaDvcType(Integer paraDvcType) {
+        this.paraDvcType = paraDvcType;
+    }
+
+    public Integer getParaCmd() {
+        return paraCmd;
+    }
+
+    public void setParaCmd(Integer paraCmd) {
+        this.paraCmd = paraCmd;
+    }
+
+    public Integer getRespParaCmdRcvd() {
+        return respParaCmdRcvd;
+    }
+
+    public void setRespParaCmdRcvd(Integer respParaCmdRcvd) {
+        this.respParaCmdRcvd = respParaCmdRcvd;
+    }
+
+    public Integer getRespParaResponse() {
+        return respParaResponse;
+    }
+
+    public void setRespParaResponse(Integer respParaResponse) {
+        this.respParaResponse = respParaResponse;
+    }
+
+    public Integer getRespParaDvcType() {
+        return respParaDvcType;
+    }
+
+    public void setRespParaDvcType(Integer respParaDvcType) {
+        this.respParaDvcType = respParaDvcType;
+    }
+
+    public Integer getRespErrorCode() {
+        return respErrorCode;
+    }
+
+    public void setRespErrorCode(Integer respErrorCode) {
+        this.respErrorCode = respErrorCode;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public Date getDeliverTime() {
+        return deliverTime;
+    }
+
+    public void setDeliverTime(Date deliverTime) {
+        this.deliverTime = deliverTime;
+    }
+
+    public Date getSuccessTime() {
+        return successTime;
+    }
+
+    public void setSuccessTime(Date successTime) {
+        this.successTime = successTime;
+    }
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status == null ? null : status.trim();
+    }
+
+    public Date getTimeoutTime() {
+        return timeoutTime;
+    }
+
+    public void setTimeoutTime(Date timeoutTime) {
+        this.timeoutTime = timeoutTime;
+    }
+
+    public Date getStatusTime() {
+        return statusTime;
+    }
+
+    public void setStatusTime(Date statusTime) {
+        this.statusTime = statusTime;
+    }
+
+    public Date getCommandId2nd() {
+        return commandId2nd;
+    }
+
+    public void setCommandId2nd(Date commandId2nd) {
+        this.commandId2nd = commandId2nd;
+    }
+
+    public Date getRetryTimes() {
+        return retryTimes;
+    }
+
+    public void setRetryTimes(Date retryTimes) {
+        this.retryTimes = retryTimes;
+    }
+
+    public Date getCommandId3nd() {
+        return commandId3nd;
+    }
+
+    public void setCommandId3nd(Date commandId3nd) {
+        this.commandId3nd = commandId3nd;
+    }
+
+    @Override
+    public String toString() {
+        return "NbCommand{" +
+                "commandId='" + commandId + '\'' +
+                ", deviceNbId='" + deviceNbId + '\'' +
+                ", paraDvcType=" + paraDvcType +
+                ", paraCmd=" + paraCmd +
+                ", respParaCmdRcvd=" + respParaCmdRcvd +
+                ", respParaResponse=" + respParaResponse +
+                ", respParaDvcType=" + respParaDvcType +
+                ", respErrorCode=" + respErrorCode +
+                ", createTime=" + createTime +
+                ", deliverTime=" + deliverTime +
+                ", successTime=" + successTime +
+                ", status='" + status + '\'' +
+                ", timeoutTime=" + timeoutTime +
+                ", statusTime=" + statusTime +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceSwitchRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceSwitchRepositoryLocal.java	(date 1575340404619)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceSwitchRepositoryLocal.java	(date 1575340404619)
@@ -0,0 +1,19 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceSwitch;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceSwitchRepositoryLocal extends JpaRepository<DeviceSwitch, Integer> {
+
+    @Query(nativeQuery = true, value = "select id from device_switch order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_switch where id > ?")
+    List<DeviceSwitch> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_switch where id >= ? and id < ?")
+    List<DeviceSwitch> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/NbCommandRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/NbCommandRepositoryLocal.java	(date 1575446930719)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/NbCommandRepositoryLocal.java	(date 1575446930719)
@@ -0,0 +1,13 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.NbCommand;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.Date;
+
+public interface NbCommandRepositoryLocal extends JpaRepository<NbCommand, String> {
+
+    @Query(nativeQuery = true, value = "SELECT create_time from nb_command ORDER BY create_time desc LIMIT 1")
+    Date getMaxCreateTime();
+}
Index: src/main/java/datasuorcetwo/datasource/timer/UpdateTableTimer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/timer/UpdateTableTimer.java	(date 1575855038695)
+++ src/main/java/datasuorcetwo/datasource/timer/UpdateTableTimer.java	(date 1575855038695)
@@ -0,0 +1,408 @@
+package datasuorcetwo.datasource.timer;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.baseInterface.NbBaseServerInte;
+import datasuorcetwo.datasource.entity.NbCommand;
+import datasuorcetwo.datasource.server.*;
+import datasuorcetwo.datasource.threadpool.ThreadPoolComponent;
+import datasuorcetwo.datasource.threadpool.UpdateDataRunnable;
+import datasuorcetwo.datasource.threadpool.UpdateNbRunnable;
+import datasuorcetwo.datasource.threadpool.UpdateRunnable;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.stereotype.Component;
+
+import java.sql.Timestamp;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+
+@Component
+public class UpdateTableTimer {
+
+    @Autowired
+    ThreadPoolComponent threadPoolComponent;
+
+    @Autowired
+    DeviceAirSoilLightServerProduct deviceAirSoilLightServerProduct;
+    @Autowired
+    DeviceAirSoilLightServerLocal deviceAirSoilLightServerLocal;
+
+    @Autowired
+    DeviceAlarmServerProduct deviceAlarmServerProduct;
+    @Autowired
+    DeviceAlarmServerLocal deviceAlarmServerLocal;
+
+    @Autowired
+    DeviceCo2ServerProduct deviceCo2ServerProduct;
+    @Autowired
+    DeviceCo2ServerLocal deviceCo2ServerLocal;
+
+    @Autowired
+    DeviceHumidityServerProduct deviceHumidityServerProduct;
+    @Autowired
+    DeviceHumidityServerLocal deviceHumidityServerLocal;
+
+    @Autowired
+    DeviceLightServerProduct deviceLightServerProduct;
+    @Autowired
+    DeviceLightServerLocal deviceLightServerLocal;
+
+    @Autowired
+    DeviceManyroadServerProduct deviceManyroadServerProduct;
+    @Autowired
+    DeviceManyroadServerLocal deviceManyroadServerLocal;
+
+    @Autowired
+    DeviceSixteenroadSoilServerProduct deviceSixteenroadSoilServerProduct;
+    @Autowired
+    DeviceSixteenroadSoilServerLocal deviceSixteenroadSoilServerLocal;
+
+    @Autowired
+    DeviceSoilMoistureNutrientServerProduct deviceSoilMoistureNutrientServerProduct;
+    @Autowired
+    DeviceSoilMoistureNutrientServerLocal deviceSoilMoistureNutrientServerLocal;
+
+    @Autowired
+    DeviceSwitchServerProduct deviceSwitchServerProduct;
+    @Autowired
+    DeviceSwitchServerLocal deviceSwitchServerLocal;
+
+    @Autowired
+    DeviceTemperatureServerProduct deviceTemperatureServerProduct;
+    @Autowired
+    DeviceTemperatureServerLocal deviceTemperatureServerLocal;
+
+    @Autowired
+    DeviceTypeServerProduct deviceTypeServerProduct;
+    @Autowired
+    DeviceTypeServerLocal deviceTypeServerLocal;
+
+    @Autowired
+    DeviceVideoServerProduct deviceVideoServerProduct;
+    @Autowired
+    DeviceVideoServerLocal deviceVideoServerLocal;
+
+    @Autowired
+    DeviceWaterPressureServerProduct deviceWaterPressureServerProduct;
+    @Autowired
+    DeviceWaterPressureServerLocal deviceWaterPressureServerLocal;
+
+    @Autowired
+    DeviceWindRainfallServerProduct deviceWindRainfallServerProduct;
+    @Autowired
+    DeviceWindRainfallServerLocal deviceWindRainfallServerLocal;
+
+    @Autowired
+    GatewayServerProduct gatewayServerProduct;
+    @Autowired
+    GatewayServerLocal gatewayServerLocal;
+
+    @Autowired
+    GroupDeviceServerProduct groupDeviceServerProduct;
+    @Autowired
+    GroupDeviceServerLocal groupDeviceServerLocal;
+
+    @Autowired
+    GroupServerProduct groupServerProduct;
+    @Autowired
+    GroupServerLocal groupServerLocal;
+
+    @Autowired
+    HistoryBrowseServerProduct historyBrowseServerProduct;
+    @Autowired
+    HistoryBrowseServerLocal historyBrowseServerLocal;
+
+    @Autowired
+    LinkageDeviceServerProduct linkageDeviceServerProduct;
+    @Autowired
+    LinkageDeviceServerLocal linkageDeviceServerLocal;
+
+    @Autowired
+    OrgServerProduct orgServerProduct;
+    @Autowired
+    OrgServerLocal orgServerLocal;
+
+    @Autowired
+    OrgUserServerProduct orgUserServerProduct;
+    @Autowired
+    OrgUserServerLocal orgUserServerLocal;
+
+    @Autowired
+    UserServerProduct userServerProduct;
+    @Autowired
+    UserServerLocal userServerLocal;
+
+    @Autowired
+    VersionServerProduct versionServerProduct;
+    @Autowired
+    VersionServerLocal versionServerLocal;
+
+    @Autowired
+    DataCo2ServerLocal dataCo2ServerLocal;
+    @Autowired
+    DataCo2ServerProduct dataCo2ServerProduct;
+    @Autowired
+    DataAccelerationServerLocal dataAccelerationServerLocal;
+    @Autowired
+    DataAccelerationServerProduct dataAccelerationServerProduct;
+    @Autowired
+    DataAirSoilLightServerLocal dataAirSoilLightServerLocal;
+    @Autowired
+    DataAirSoilLightServerProduct dataAirSoilLightServerProduct;
+    @Autowired
+    DataHumidityServerLocal dataHumidityServerLocal;
+    @Autowired
+    DataHumidityServerProduct dataHumidityServerProduct;
+    @Autowired
+    DataLightServerLocal dataLightServerLocal;
+    @Autowired
+    DataLightServerProduct dataLightServerProduct;
+    @Autowired
+    DataSixteenroadSoilServerLocal dataSixteenroadSoilServerLocal;
+    @Autowired
+    DataSixteenroadSoilServerProduct dataSixteenroadSoilServerProduct;
+    @Autowired
+    DataSoilMoistureNutrientServiceLocal dataSoilMoistureNutrientServiceLocal;
+    @Autowired
+    DataSoilMoistureNutrientServiceProduct dataSoilMoistureNutrientServiceProduct;
+    @Autowired
+    DataTemperatureServerLocal dataTemperatureServerLocal;
+    @Autowired
+    DataTemperatureServerProduct dataTemperatureServerProduct;
+    @Autowired
+    DataWaterPressureServiceLocal dataWaterPressureServiceLocal;
+    @Autowired
+    DataWaterPressureServiceProduct dataWaterPressureServiceProduct;
+    @Autowired
+    DataWindRainfallServerLocal dataWindRainfallServerLocal;
+    @Autowired
+    DataWindRainfallServerProduct dataWindRainfallServerProduct;
+    @Autowired
+    NbCommandServerProduct nbCommandServerProduct;
+    @Autowired
+    NbCommandServerLocal nbCommandServerLocal;
+    @Autowired
+    NbCommandSensorServerProduct nbCommandSensorServerProduct;
+    @Autowired
+    NbCommandSensorServerLocal nbCommandSensorServerLocal;
+
+    public static  SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+
+    public static SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS");
+
+//    @Scheduled(initialDelay = 1000, fixedRate = 300000)
+    public void updateNbTableTimer() {
+        System.out.println("+++++++++++++++++++++++++同步NB指令表：" + dateFormat.format(new Date()) + "+++++++++++++++++++++++++");
+        nbUpdateTable(nbCommandServerProduct, nbCommandServerLocal, "nb_command");
+        nbUpdateTable(nbCommandSensorServerProduct, nbCommandSensorServerLocal, "nb_command_sensor");
+    }
+
+    /**
+     * 同步NB指令表
+     * 按照时间来同步，每个线程同步1天的数据，一共10个线程同步十(自定义)天的数据，每个线程中分成24个小时(自定义)来同步，循环24次
+     * nb_command 表每一天的数据量大概在1.15w
+     * nb_command_sensor 表每一天的数据量大概在6.1w
+     * @param product
+     * @param local
+     * @param name
+     */
+    public void nbUpdateTable(NbBaseServerInte product, NbBaseServerInte local, String name){
+        /*
+         * 源库 最后一条数据的时间（但不能同步到最大的时间，应向前推移5分钟左右，原因是：可能有些指令还未返回，所以还不能
+         * 同步过来，否则如果同步过来之后，指令返回了，这样会导致其他属性不一样，即同步不完全）
+         */
+        Date productMaxCreateTime = product.getMaxCreateTime();
+        System.out.println("时间：" + productMaxCreateTime + " 源库-" + name);
+        // 将源库时间向前推移5分钟来同步（如果直接同步所有记录，注释掉这一行代码，即可同步到当前时间）
+        productMaxCreateTime = nextOneHourOrDayDate(productMaxCreateTime, Calendar.MINUTE, -5);
+        // 目标库 最后一条数据的时间
+        Date localMaxCreateTime = local.getMaxCreateTime();
+        System.out.println("时间：" + localMaxCreateTime + " 目标库-" + name);
+        // 开启10个线程，同步10天的数据，每个线程同步一天的数据
+        for(int i = 0; i < 10; i++){
+            UpdateNbRunnable runnable = new UpdateNbRunnable();
+            runnable.setName(name + i);
+            runnable.setDataNbProduct(product);
+            runnable.setDataNbLocal(local);
+            // 传入当前时间
+            runnable.setBasisDate(localMaxCreateTime);
+            // 传入源库最大时间
+            runnable.setProductMaxCreateTime(productMaxCreateTime);
+            threadPoolComponent.getExecutor().execute(runnable);
+            // 计算下个线程的时间起点
+            localMaxCreateTime = nextOneHourOrDayDate(localMaxCreateTime, Calendar.HOUR_OF_DAY, 1);
+            // 下一个线程的时间如果在源库最大时间之后，说明已经同步完成
+            if(localMaxCreateTime.after(productMaxCreateTime)){
+                break;
+            }
+        }
+    }
+
+    /**
+     * 获取count小时（分钟，天等）之前或者之后
+     * @param time 起始时间
+     * @param field 秒、小时、天等字段
+     * @param count 向前或向后推移属性
+     * @return
+     */
+    public static Date nextOneHourOrDayDate(Date time, int field, int count) {
+        try {
+            Calendar calendar = Calendar.getInstance();
+            calendar.setTime(time);
+            calendar.add(field, count);
+            return calendar.getTime();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    /**
+     * 该定时器是用来同步增加并且会改动的数据表（另外这些表的数据量不会很大，因此线程可以分配少一些）
+     * 同步设备、分组、用户等信息
+     * 做法：先判断是否需要新插入数据（以最后一条数据的id是否相同来判定），然后在比对每一条设备的tostring是否一样，
+     *      如果不一样则更新（每次比对100条数据，来减轻每个线程的运行时间）
+     */
+    @Scheduled(initialDelay = 15000, fixedRate = 3600000)
+    public void updateTableTimer() {
+        System.out.println("-------------------------同步设备、用户等时间：" + dateFormat.format(new Date()) + "-------------------------");
+        pubUpdateTable(deviceAirSoilLightServerProduct, deviceAirSoilLightServerLocal, "五合一设备");
+        pubUpdateTable(deviceAlarmServerProduct, deviceAlarmServerLocal, "报警");
+        pubUpdateTable(deviceCo2ServerProduct, deviceCo2ServerLocal, "二氧化碳设备");
+        pubUpdateTable(deviceHumidityServerProduct, deviceHumidityServerLocal, "湿度设备");
+        pubUpdateTable(deviceLightServerProduct, deviceLightServerLocal, "光照设备");
+        pubUpdateTable(deviceManyroadServerProduct, deviceManyroadServerLocal, "多路");
+        pubUpdateTable(deviceSixteenroadSoilServerProduct, deviceSixteenroadSoilServerLocal, "16路设备");
+        pubUpdateTable(deviceSoilMoistureNutrientServerProduct, deviceSoilMoistureNutrientServerLocal, "三阶设备");
+        pubUpdateTable(deviceSwitchServerProduct, deviceSwitchServerLocal, "开关设备");
+        pubUpdateTable(deviceTemperatureServerProduct, deviceTemperatureServerLocal, "温度设备");
+        pubUpdateTable(deviceTypeServerProduct, deviceTemperatureServerLocal, "设备类型");
+        pubUpdateTable(deviceVideoServerProduct, deviceVideoServerLocal, "视屏设备");
+        pubUpdateTable(deviceWaterPressureServerProduct, deviceWaterPressureServerLocal, "水压设备");
+        pubUpdateTable(deviceWindRainfallServerProduct, deviceWindRainfallServerLocal, "气象站设备");
+        pubUpdateTable(gatewayServerProduct, gatewayServerLocal, "网关设备");
+        pubUpdateTable(groupDeviceServerProduct, groupDeviceServerLocal, "设备分组");
+        pubUpdateTable(groupServerProduct, groupServerLocal, "大棚");
+        pubUpdateTable(linkageDeviceServerProduct, linkageDeviceServerLocal, "多绑定");
+        pubUpdateTable(orgServerProduct, orgServerLocal, "组织");
+        pubUpdateTable(orgUserServerProduct, orgUserServerLocal, "组织-用户");
+        pubUpdateTable(userServerProduct, userServerLocal, "用户");
+        pubUpdateTable(versionServerProduct, versionServerLocal, "版本");
+    }
+
+
+    public void pubUpdateTable(BaseServerInte product, BaseServerInte local, String name){
+        int productMaxId = product.getMaxId();
+        int localMaxId = local.getMaxId();
+        // 比对目标与源的最大id
+        // 分情况之后，这样做是为了保证目标数据库的 localMaxId 始终与源数据库 productMaxId 相同
+        if(productMaxId > localMaxId){
+            // 添加
+            long l1 = System.currentTimeMillis();
+            List moreThanIds = product.getThanMaxId(localMaxId);
+            long l2 = System.currentTimeMillis();
+            System.out.println("时间：" + dateFormat.format(new Date()) + " " + name + "：添加 id > " + localMaxId + " 的数据，耗时：" + (l2 - l1) + "ms");
+            local.insert(moreThanIds);
+        }if(productMaxId < localMaxId){
+            // 删除
+            long l1 = System.currentTimeMillis();
+            List moreThanIds = local.getThanMaxId(productMaxId);
+            long l2 = System.currentTimeMillis();
+            if(!moreThanIds.isEmpty()){
+                local.deleteByIterator(moreThanIds);
+                System.out.println("时间：" + dateFormat.format(new Date()) + " " + name + "：删除 id > " + productMaxId + " 的数据，耗时：" + (l2 - l1) + "ms");
+            }
+        }
+        // 如果查询出来的 localMaxId == 0，说明要么目标数据库没有数据，所以就不需要后续了
+        if(localMaxId != 0){
+            // 判断tostring，并更新（每个线程比对1000个数据，10次循环，每次循环100个id进行比对，然后整个线程的所有数据更新）
+            // 起点id初始值为1
+            int basisBase = 1;
+            // 增长基数
+            int increaseBase = 100;
+            // 循环次数
+            int cycleCount = 10;
+            // 需要的线程数
+            int manyRunableCount = (productMaxId / (increaseBase * cycleCount)) + 1;
+            System.out.println("时间：" + dateFormat.format(new Date()) + " " + name + "：同步需要 " + manyRunableCount + " 个线程");
+            for(int i = 0; i < manyRunableCount; i++){
+                UpdateRunnable runnable = new UpdateRunnable();
+                runnable.setProductMaxId(productMaxId);
+                runnable.setName(name + i);
+                runnable.setBasisBase(basisBase);
+                runnable.setIncreaseBase(increaseBase);
+                runnable.setCycleCount(cycleCount);
+                runnable.setProduct(product);
+                runnable.setLocal(local);
+                threadPoolComponent.getExecutor().execute(runnable);
+                // 下一个线程的起点id
+                basisBase = basisBase + increaseBase * cycleCount;
+            }
+        }
+    }
+
+
+    /**
+     * 该定时器是用来同步只增不改动的数据表，因为data部分只会增加不会改变（包括history表也是一样）。
+     * 同步data部分新增的数据
+     *  几乎能做到实时同步（如果将 fixedRate 设置为30s，那么将可视为实时同步
+     *      因为现在暂时每次新增数据都比较少，根据程序运行情况来看，插入1000条数据大概在3s内，而每30s内每个表不会超过
+     *      上万条数据，那么可以将定时间隔稍微变短）
+     * 做法：每个data表最多分配10个线程，每个线程插入100*20条数据
+     * 启动容器后，延迟 initialDelay 毫秒后，执行定时器，然后每隔 fixedRate 毫秒执行一次
+     */
+    @Scheduled(initialDelay = 500, fixedRate = 180000)
+    public void updateDataTableTimer() {
+        System.out.println("-------------------------同步数据时间：" + dateFormat.format(new Date()) + "-------------------------");
+        dataPubUpdateTable(dataCo2ServerProduct, dataCo2ServerLocal, "二氧化碳数据");
+        dataPubUpdateTable(dataAccelerationServerProduct, dataAccelerationServerLocal, "加速度数据");
+        dataPubUpdateTable(dataAirSoilLightServerProduct, dataAirSoilLightServerLocal, "五合一数据");
+        dataPubUpdateTable(dataHumidityServerProduct, dataHumidityServerLocal, "湿度数据");
+        dataPubUpdateTable(dataLightServerProduct, dataLightServerLocal, "光照数据");
+        dataPubUpdateTable(dataSixteenroadSoilServerProduct, dataSixteenroadSoilServerLocal, "16路数据");
+        dataPubUpdateTable(dataSoilMoistureNutrientServiceProduct, dataSoilMoistureNutrientServiceLocal, "三阶数据");
+        dataPubUpdateTable(dataTemperatureServerProduct, dataTemperatureServerLocal, "温度数据");
+        dataPubUpdateTable(dataWaterPressureServiceProduct, dataWaterPressureServiceLocal, "水压数据");
+        dataPubUpdateTable(dataWindRainfallServerProduct, dataWindRainfallServerLocal, "气象站数据");
+        dataPubUpdateTable(historyBrowseServerProduct, historyBrowseServerLocal, "历史记录数据");
+    }
+
+    public void dataPubUpdateTable(DataBaseServerInte dataProduct, DataBaseServerInte dataLocal, String name){
+        int increaseBase = 100;
+        int cycleCount = 20;
+        // 目标数据库最大id（若没有，则赋值为源数据库最小id）
+        Integer localMaxId = dataLocal.getMaxId();
+        if(localMaxId == null){
+            localMaxId = dataProduct.getMinId();
+        }
+        // 源数据库最大id
+        Integer productMaxId = dataProduct.getMaxId();
+        // 计算需要多少个线程
+        int manyRunableCount = (productMaxId - localMaxId) / (increaseBase * cycleCount);
+        // 创建manyRunable这么多个线程一起运行进行插入
+        System.out.println("时间：" + dateFormat.format(new Date()) + " " + name + "：需要 " + (manyRunableCount + 1) + " 个线程");
+        if(manyRunableCount > 9){
+            manyRunableCount = 9;
+        }
+        for(int i = 0; i < (manyRunableCount + 1); i++){
+            UpdateDataRunnable runnable = new UpdateDataRunnable();
+            // 设置名称
+            runnable.setName(name + i);
+            // 设置插入起始点
+            runnable.setBasisBase(localMaxId);
+            // 设置每次插入的基数
+            runnable.setIncreaseBase(increaseBase);
+            // 设置循环次数
+            runnable.setCycleCount(cycleCount);
+            runnable.setDataProduct(dataProduct);
+            runnable.setDataLocal(dataLocal);
+            threadPoolComponent.getExecutor().execute(runnable);
+            // 下一个线程则从 +1w 作为起点（每个线程的起点则是 IncreaseBase * CycleCount）
+            localMaxId = localMaxId + (increaseBase * cycleCount);
+        }
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/NbCommandServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/NbCommandServerProduct.java	(date 1575448316285)
+++ src/main/java/datasuorcetwo/datasource/server/NbCommandServerProduct.java	(date 1575448316285)
@@ -0,0 +1,62 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.NbBaseServerInte;
+import datasuorcetwo.datasource.entity.NbCommand;
+import datasuorcetwo.datasource.repositoryProduct.NbCommandRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.Date;
+import java.util.List;
+
+@Service
+public class NbCommandServerProduct implements NbBaseServerInte<NbCommand> {
+
+    @Autowired
+    NbCommandRepositoryProduct nbCommandRepositoryProduct;
+
+    @Override
+    public NbCommand getByCreateTime(Date date) {
+        return null;
+    }
+
+    @Override
+    public Date getMaxCreateTime() {
+        return nbCommandRepositoryProduct.getMaxCreateTime();
+    }
+
+    @Override
+    public List<NbCommand> getBetweenCreateTime(Date before, Date after) {
+        return nbCommandRepositoryProduct.getBetweenCreateTime(before, after);
+    }
+
+    @Override
+    public int getCountByCreateTimeBetween(Date before, Date after) {
+        return 0;
+    }
+
+    @Override
+    public int getMaxId() {
+        return 0;
+    }
+
+    @Override
+    public List<NbCommand> getThanMaxId(Integer id) {
+        return null;
+    }
+
+    @Override
+    public List<NbCommand> getBetweenData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<NbCommand> nbCommands) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<NbCommand> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/baseInterface/NbBaseServerInte.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/baseInterface/NbBaseServerInte.java	(date 1575438799746)
+++ src/main/java/datasuorcetwo/datasource/baseInterface/NbBaseServerInte.java	(date 1575438799746)
@@ -0,0 +1,15 @@
+package datasuorcetwo.datasource.baseInterface;
+
+import java.util.Date;
+import java.util.List;
+
+public interface NbBaseServerInte<T> extends BaseServerInte<T> {
+    // 根据时间获取最大的一条
+    T getByCreateTime(Date date);
+    // 获取最后一条的时间
+    Date getMaxCreateTime();
+    // 获取某个时间段的数据
+    List<T> getBetweenCreateTime(Date before, Date after);
+    // 获取某个时间段一共有多少条数据
+    int getCountByCreateTimeBetween(Date before, Date after);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/NbCommandRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/NbCommandRepositoryProduct.java	(date 1575446930635)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/NbCommandRepositoryProduct.java	(date 1575446930635)
@@ -0,0 +1,20 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.NbCommand;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.Date;
+import java.util.List;
+
+public interface NbCommandRepositoryProduct extends JpaRepository<NbCommand, String> {
+
+    @Query(nativeQuery = true, value = "select * from nb_command where create_time > ? and create_time <= ? ORDER BY create_time")
+    List<NbCommand> getBetweenCreateTime(Date before, Date after);
+
+    @Query(nativeQuery = true, value = "select count(*) from nb_command where create_time > ? and create_time <= ?")
+    int getCountByCreateTimeBetween(Date before, Date after);
+
+    @Query(nativeQuery = true, value = "SELECT create_time from nb_command ORDER BY create_time desc LIMIT 1")
+    Date getMaxCreateTime();
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceSwitchServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceSwitchServerLocal.java	(date 1575349522133)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceSwitchServerLocal.java	(date 1575349522133)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceSwitch;
+import datasuorcetwo.datasource.repositoryLocal.DeviceSwitchRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceSwitchServerLocal implements BaseServerInte<DeviceSwitch> {
+    @Autowired
+    DeviceSwitchRepositoryLocal deviceSwitchRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceSwitchRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceSwitchRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceSwitch> getThanMaxId(Integer maxId) {
+        return deviceSwitchRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceSwitch> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceSwitchRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceSwitch> deviceSwitches) {
+        if(!deviceSwitches.isEmpty()){
+            deviceSwitchRepositoryLocal.saveAll(deviceSwitches);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceSwitch> iterable) {
+        deviceSwitchRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/threadpool/ThreadPoolComponent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/threadpool/ThreadPoolComponent.java	(date 1574833729055)
+++ src/main/java/datasuorcetwo/datasource/threadpool/ThreadPoolComponent.java	(date 1574833729055)
@@ -0,0 +1,27 @@
+package datasuorcetwo.datasource.threadpool;
+
+import org.springframework.stereotype.Component;
+
+import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * 线程池对象，交给spring的IOC容器
+ */
+@Component
+public class ThreadPoolComponent {
+    final static BlockingQueue<Runnable> workQueue = new ArrayBlockingQueue<>(10);
+    private ThreadPoolExecutor executor;
+    /**
+     * 既然spring管理此bean，那么直接在构造函数中创建线程池用于使用
+     */
+    public ThreadPoolComponent(){
+        executor = new ThreadPoolExecutor(50, 100, 10, TimeUnit.SECONDS,workQueue);
+    }
+
+    public ThreadPoolExecutor getExecutor() {
+        return executor;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/NbCommandSensor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/NbCommandSensor.java	(date 1575448315996)
+++ src/main/java/datasuorcetwo/datasource/entity/NbCommandSensor.java	(date 1575448315996)
@@ -0,0 +1,130 @@
+package datasuorcetwo.datasource.entity;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.Table;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "nb_command_sensor")
+public class NbCommandSensor extends BaseEntity implements Serializable {
+    @Id
+    @Column(name = "command_id")
+    private String commandId;
+    @Column(name = "device_nb_id")
+    private String deviceNbId;
+    @Column(name = "para_receive_ok")
+    private Integer paraReceiveOk;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "deliver_time")
+    private Date deliverTime;
+    @Column(name = "success_time")
+    private Date successTime;
+    @Column(name = "status")
+    private String status;
+    @Column(name = "timeout_time")
+    private Date timeoutTime;
+    @Column(name = "status_time")
+    private Date statusTime;
+    @Column(name = "para_dvc_type")
+    private Integer paraDvcType;
+
+    public String getCommandId() {
+        return commandId;
+    }
+
+    public void setCommandId(String commandId) {
+        this.commandId = commandId;
+    }
+
+    public String getDeviceNbId() {
+        return deviceNbId;
+    }
+
+    public void setDeviceNbId(String deviceNbId) {
+        this.deviceNbId = deviceNbId;
+    }
+
+    public Integer getParaReceiveOk() {
+        return paraReceiveOk;
+    }
+
+    public void setParaReceiveOk(Integer paraReceiveOk) {
+        this.paraReceiveOk = paraReceiveOk;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public Date getDeliverTime() {
+        return deliverTime;
+    }
+
+    public void setDeliverTime(Date deliverTime) {
+        this.deliverTime = deliverTime;
+    }
+
+    public Date getSuccessTime() {
+        return successTime;
+    }
+
+    public void setSuccessTime(Date successTime) {
+        this.successTime = successTime;
+    }
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+
+    public Date getTimeoutTime() {
+        return timeoutTime;
+    }
+
+    public void setTimeoutTime(Date timeoutTime) {
+        this.timeoutTime = timeoutTime;
+    }
+
+    public Date getStatusTime() {
+        return statusTime;
+    }
+
+    public void setStatusTime(Date statusTime) {
+        this.statusTime = statusTime;
+    }
+
+    public Integer getParaDvcType() {
+        return paraDvcType;
+    }
+
+    public void setParaDvcType(Integer paraDvcType) {
+        this.paraDvcType = paraDvcType;
+    }
+
+    @Override
+    public String toString() {
+        return "NbCommandSensor{" +
+                "commandId='" + commandId + '\'' +
+                ", deviceNbId='" + deviceNbId + '\'' +
+                ", paraReceiveOk=" + paraReceiveOk +
+                ", createTime=" + createTime +
+                ", deliverTime=" + deliverTime +
+                ", successTime=" + successTime +
+                ", status='" + status + '\'' +
+                ", timeoutTime=" + timeoutTime +
+                ", statusTime=" + statusTime +
+                ", paraDvcType=" + paraDvcType +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceTemperatureRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceTemperatureRepositoryProduct.java	(date 1575341425708)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceTemperatureRepositoryProduct.java	(date 1575341425708)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceTemperature;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceTemperatureRepositoryProduct extends JpaRepository<DeviceTemperature, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_temperature order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_temperature where id > ?")
+    List<DeviceTemperature> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_temperature where id >= ? and id < ?")
+    List<DeviceTemperature> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/NbCommandSensorRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/NbCommandSensorRepositoryLocal.java	(date 1575448316383)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/NbCommandSensorRepositoryLocal.java	(date 1575448316383)
@@ -0,0 +1,12 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.NbCommandSensor;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.Date;
+
+public interface NbCommandSensorRepositoryLocal extends JpaRepository<NbCommandSensor, String> {
+    @Query(nativeQuery = true, value = "SELECT create_time from nb_command_sensor ORDER BY create_time desc LIMIT 1")
+    Date getMaxCreateTime();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/VersionRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/VersionRepositoryProduct.java	(date 1575341472203)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/VersionRepositoryProduct.java	(date 1575341472203)
@@ -0,0 +1,19 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.Version;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface VersionRepositoryProduct extends JpaRepository<Version, Integer> {
+    @Query(nativeQuery = true, value = "select id from version order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from version where id > ?")
+    List<Version> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from version where id >= ? and id < ?")
+    List<Version> getBetweenData(Integer beforeId, Integer afterId);
+
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceSoilMoistureNutrientRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceSoilMoistureNutrientRepositoryProduct.java	(date 1575341425642)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceSoilMoistureNutrientRepositoryProduct.java	(date 1575341425642)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceSoilMoistureNutrient;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceSoilMoistureNutrientRepositoryProduct extends JpaRepository<DeviceSoilMoistureNutrient, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_soil_moisture_nutrient order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_soil_moisture_nutrient where id > ?")
+    List<DeviceSoilMoistureNutrient> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_soil_moisture_nutrient where id >= ? and id < ?")
+    List<DeviceSoilMoistureNutrient> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/entity/Version.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/Version.java	(date 1575354395314)
+++ src/main/java/datasuorcetwo/datasource/entity/Version.java	(date 1575354395314)
@@ -0,0 +1,167 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+
+@Entity
+@Table(name = "version")
+public class Version extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+
+    @Column(name = "name")
+    private String name;
+    @Column(name = "version_no")
+    private Long versionNo;
+    @Column(name = "content1")
+    private String content1;
+    @Column(name = "content2")
+    private String content2;
+    @Column(name = "content3")
+    private String content3;
+    @Column(name = "content4")
+    private String content4;
+    @Column(name = "content5")
+    private String content5;
+    @Column(name = "content6")
+    private String content6;
+    @Column(name = "content7")
+    private String content7;
+    @Column(name = "content8")
+    private String content8;
+    @Column(name = "content9")
+    private String content9;
+    @Column(name = "content10")
+    private String content10;
+    @Column(name = "url")
+    private String url;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public Long getVersionNo() {
+        return versionNo;
+    }
+
+    public void setVersionNo(Long versionNo) {
+        this.versionNo = versionNo;
+    }
+
+    public String getContent1() {
+        return content1;
+    }
+
+    public void setContent1(String content1) {
+        this.content1 = content1 == null ? null : content1.trim();
+    }
+
+    public String getContent2() {
+        return content2;
+    }
+
+    public void setContent2(String content2) {
+        this.content2 = content2 == null ? null : content2.trim();
+    }
+
+    public String getContent3() {
+        return content3;
+    }
+
+    public void setContent3(String content3) {
+        this.content3 = content3 == null ? null : content3.trim();
+    }
+
+    public String getContent4() {
+        return content4;
+    }
+
+    public void setContent4(String content4) {
+        this.content4 = content4 == null ? null : content4.trim();
+    }
+
+    public String getContent5() {
+        return content5;
+    }
+
+    public void setContent5(String content5) {
+        this.content5 = content5 == null ? null : content5.trim();
+    }
+
+    public String getContent6() {
+        return content6;
+    }
+
+    public void setContent6(String content6) {
+        this.content6 = content6 == null ? null : content6.trim();
+    }
+
+    public String getContent7() {
+        return content7;
+    }
+
+    public void setContent7(String content7) {
+        this.content7 = content7 == null ? null : content7.trim();
+    }
+
+    public String getContent8() {
+        return content8;
+    }
+
+    public void setContent8(String content8) {
+        this.content8 = content8 == null ? null : content8.trim();
+    }
+
+    public String getContent9() {
+        return content9;
+    }
+
+    public void setContent9(String content9) {
+        this.content9 = content9 == null ? null : content9.trim();
+    }
+
+    public String getContent10() {
+        return content10;
+    }
+
+    public void setContent10(String content10) {
+        this.content10 = content10 == null ? null : content10.trim();
+    }
+
+    public String getUrl() {
+        return url;
+    }
+
+    public void setUrl(String url) {
+        this.url = url == null ? null : url.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "Version{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", versionNo=" + versionNo +
+                ", content1='" + content1 + '\'' +
+                ", content2='" + content2 + '\'' +
+                ", url='" + url + '\'' +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/threadpool/UpdateNbRunnable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/threadpool/UpdateNbRunnable.java	(date 1575508384866)
+++ src/main/java/datasuorcetwo/datasource/threadpool/UpdateNbRunnable.java	(date 1575508384866)
@@ -0,0 +1,89 @@
+package datasuorcetwo.datasource.threadpool;
+
+import datasuorcetwo.datasource.baseInterface.NbBaseServerInte;
+import datasuorcetwo.datasource.timer.UpdateTableTimer;
+
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+
+public class UpdateNbRunnable<T> implements Runnable {
+
+    // 名称
+    private String name;
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    // 起始时间
+    private Date basisDate;
+
+    public void setBasisDate(Date basisDate) {
+        this.basisDate = basisDate;
+    }
+
+    // 源库最大的一个时间，用于监测数据是否获取完成
+    private Date productMaxCreateTime;
+
+    public void setProductMaxCreateTime(Date productMaxCreateTime) {
+        this.productMaxCreateTime = productMaxCreateTime;
+    }
+
+    private NbBaseServerInte<T> dataNbProduct;
+    private NbBaseServerInte<T> dataNbLocal;
+
+    public void setDataNbProduct(NbBaseServerInte<T> dataNbProduct) {
+        this.dataNbProduct = dataNbProduct;
+    }
+
+    public void setDataNbLocal(NbBaseServerInte<T> dataNbLocal) {
+        this.dataNbLocal = dataNbLocal;
+    }
+
+    @Override
+    public void run() {
+        int count = 0;
+        long l = System.currentTimeMillis();
+        /*
+         * 1、可以循环24次，即i=25，每次循环同步1个小时的数据，即Calendar.HOUR_OF_DAY，1，就是一天
+         * 2、还可以循环48次，即i=49，每次循环同步半个小时的数据，即Calendar.MINUTE，30，就是一天
+         */
+        for(int i = 1; i < 13; i++){
+            Date nextOnHourDate = UpdateTableTimer.nextOneHourOrDayDate(basisDate, Calendar.MINUTE, 5);
+            if(nextOnHourDate != null){
+                // 获取时间段内的数据
+                long l1 = System.currentTimeMillis();
+                List<T> productOneHourData = new ArrayList<>();
+                // 判断 nextOnHourDate 是否大于 productMaxCreateTime
+                if(nextOnHourDate.after(productMaxCreateTime)){
+                    productOneHourData = dataNbProduct.getBetweenCreateTime(basisDate, productMaxCreateTime);
+                }else {
+                    productOneHourData = dataNbProduct.getBetweenCreateTime(basisDate, nextOnHourDate);
+                }
+                long l2 = System.currentTimeMillis();
+                if(!productOneHourData.isEmpty()){
+                    System.out.println("时间：" + UpdateTableTimer.dateFormat.format(new Date()) + " " + name +
+                            "：第" + i + "次获取 " + UpdateTableTimer.dateFormat1.format(basisDate) + " 到 " + UpdateTableTimer.dateFormat1.format(nextOnHourDate) +
+                            " 之间的数据 " + productOneHourData.size() + " 条，耗时：" + (l2 - l1) + " ms");
+                    count = count + productOneHourData.size();
+                    long l3 = System.currentTimeMillis();
+                    // -----------------直接添加500条数据左右，需要14-18s-------------------
+                    dataNbLocal.insert(productOneHourData);
+                    long l4 = System.currentTimeMillis();
+                    System.out.println("时间：" + UpdateTableTimer.dateFormat.format(new Date()) + " " + name +
+                            "：第" + i + "次插入 " + UpdateTableTimer.dateFormat1.format(basisDate) + " 到 " + UpdateTableTimer.dateFormat1.format(nextOnHourDate) +
+                            " 之间的数据 " + productOneHourData.size() + " 条，耗时：" + (l4 - l3) + " ms");
+                }
+            }
+            basisDate = nextOnHourDate;
+            if(basisDate.after(productMaxCreateTime)){
+                break;
+            }
+        }
+        long ll = System.currentTimeMillis();
+        System.out.println(name + "：获取与插入 " + count + " 条数据*******************************************************************" +
+                "*******************************************总耗时：" + (ll - l) + " ms");
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/NbCommandServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/NbCommandServerLocal.java	(date 1575444726269)
+++ src/main/java/datasuorcetwo/datasource/server/NbCommandServerLocal.java	(date 1575444726269)
@@ -0,0 +1,65 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.NbBaseServerInte;
+import datasuorcetwo.datasource.entity.NbCommand;
+import datasuorcetwo.datasource.repositoryLocal.NbCommandRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.Date;
+import java.util.List;
+
+@Service
+public class NbCommandServerLocal implements NbBaseServerInte<NbCommand> {
+
+    @Autowired
+    NbCommandRepositoryLocal nbCommandRepositoryLocal;
+
+    @Override
+    public NbCommand getByCreateTime(Date date) {
+        return null;
+    }
+
+    @Override
+    public Date getMaxCreateTime() {
+        return nbCommandRepositoryLocal.getMaxCreateTime();
+    }
+
+    @Override
+    public List<NbCommand> getBetweenCreateTime(Date before, Date after) {
+        return null;
+    }
+
+    @Override
+    public int getCountByCreateTimeBetween(Date before, Date after) {
+        return 0;
+    }
+
+    @Override
+    public int getMaxId() {
+        return 0;
+    }
+
+    @Override
+    public List<NbCommand> getThanMaxId(Integer id) {
+        return null;
+    }
+
+    @Override
+    public List<NbCommand> getBetweenData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<NbCommand> nbCommands) {
+        if(!nbCommands.isEmpty()){
+            nbCommandRepositoryLocal.saveAll(nbCommands);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<NbCommand> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/threadpool/UpdateDataRunnable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/threadpool/UpdateDataRunnable.java	(date 1575360960428)
+++ src/main/java/datasuorcetwo/datasource/threadpool/UpdateDataRunnable.java	(date 1575360960428)
@@ -0,0 +1,125 @@
+package datasuorcetwo.datasource.threadpool;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.BaseEntity;
+import datasuorcetwo.datasource.timer.UpdateTableTimer;
+
+import java.util.Date;
+import java.util.List;
+
+/**
+ * run方法是同步data部分
+ * 使用泛型，注入泛型对象，该泛型需要实现了 BaseServerInte 这个接口，方便后面任务的通用
+ * @param <T>
+ */
+public class UpdateDataRunnable<T> implements Runnable{
+
+    // 名称
+    private String name;
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    // 起始值
+    private int basisBase;
+    public void setBasisBase(int basisBase) {
+        this.basisBase = basisBase;
+    }
+
+    // 增长基数
+    private int increaseBase;
+    public void setIncreaseBase(int increaseBase) {
+        this.increaseBase = increaseBase;
+    }
+
+    // 循环次数
+    private int cycleCount;
+    public void setCycleCount(int cycleCount) {
+        this.cycleCount = cycleCount;
+    }
+
+    private DataBaseServerInte<T> dataProduct;
+    private DataBaseServerInte<T> dataLocal;
+    public void setDataProduct(DataBaseServerInte<T> dataProduct) {
+        this.dataProduct = dataProduct;
+    }
+    public void setDataLocal(DataBaseServerInte<T> dataLocal) {
+        this.dataLocal = dataLocal;
+    }
+
+    /**
+     * 该方式是一个线程只插入 (increaseBase * cycleCount) 条数据，调用的时候通过循环控制10条线程进行插入
+     */
+    @Override
+    public void run() {
+
+        long l = System.currentTimeMillis();
+        // 循环cycleCount次，则插入increaseBase * cycleCount条数据
+        for(int i = 0; i < cycleCount; i++){
+            // 获取源数据库的1w条记录
+            long l2 = System.currentTimeMillis();
+            List<T> inserts = dataProduct.get1wData(basisBase, basisBase + increaseBase);
+            long l3 = System.currentTimeMillis();
+            System.out.println("时间：" + UpdateTableTimer.dateFormat.format(new Date()) + " " + name + "：第" + i + "次获取 " + basisBase + " - " + (basisBase + increaseBase) + " 耗时：" + (l3 - l2) + "ms");
+            // 插入目标数据库
+            if(!inserts.isEmpty()){
+                long l4 = System.currentTimeMillis();
+                dataLocal.insert(inserts);
+                long l5 = System.currentTimeMillis();
+                // 记录插入的id，以免发生意外
+                StringBuilder stringBuilder = new StringBuilder();
+                for (T t : inserts){
+                    stringBuilder.append(((BaseEntity) t).getId() + ",");
+                }
+                System.out.println("时间：" + UpdateTableTimer.dateFormat.format(new Date()) + " " + name + "：第" + i + "插入 " + basisBase + " - " + (basisBase + increaseBase) + " （最后一个数的id=" + ((BaseEntity) inserts.get(inserts.size() - 1)).getId() + "）耗时：" + (l5 - l4) + "ms");
+            }else {
+                break;
+            }
+            basisBase = basisBase + increaseBase;
+        }
+        long l1 = System.currentTimeMillis();
+        System.out.println("时间：" + UpdateTableTimer.dateFormat.format(new Date()) + " " + name + "：**************************************************总耗时：" + (l1 - l) + "ms");
+    }
+
+    /**
+     * 该方式是一个线程直接将一个表格的数据同步，如果表格数据量很大，则花费的时间很多
+     */
+//    @Override
+//    public void run() {
+//        /*
+//         * 如果是设备的数据，那么之前已经同步了一部分数据，还剩下之后的一少部分数据（但是量还是比较多，比如几十万条），
+//         * 那么做法如下：
+//         * 从目标数据库查询最大的id，源数据库中该id之后的数据拿出来，然后添加到目标数据库中
+//         * 但是每次拿出来的量不宜过多，最大定为1w条数据，因为需要不断循环
+//         *
+//         */
+//        // 目标数据库获取最大id
+//        long l = System.currentTimeMillis();
+//        Integer localMaxId = dataLocal.getMaxId();
+//        if(localMaxId == null){
+//            // 获取源数据库的最小id
+//            localMaxId = dataProduct.getMinId();
+//        }
+//        System.out.println(localMaxId);
+//        for(;;){
+//            // 获取源数据库的1w条记录
+//            long l2 = System.currentTimeMillis();
+//            List<T> inserts = dataProduct.get1wData(localMaxId, localMaxId + increaseBase);
+//            long l3 = System.currentTimeMillis();
+//            System.out.println("获取 " + localMaxId + " - " + (localMaxId + increaseBase) + " 耗时：" + (l3 - l2) + "ms");
+//            // 插入目标数据库
+//            if(!inserts.isEmpty()){
+//                long l4 = System.currentTimeMillis();
+//                dataLocal.insert(inserts);
+//                long l5 = System.currentTimeMillis();
+//                System.out.println("插入 " + localMaxId + " - " + (localMaxId + increaseBase) + " 耗时：" + (l5 - l4) + "ms");
+//            }else {
+//                break;
+//            }
+//            localMaxId = localMaxId + increaseBase;
+//        }
+//        long l1 = System.currentTimeMillis();
+//        System.out.println("总耗时：" + (l1 - l));
+//    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/VersionServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/VersionServerLocal.java	(date 1575350476737)
+++ src/main/java/datasuorcetwo/datasource/server/VersionServerLocal.java	(date 1575350476737)
@@ -0,0 +1,48 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.Version;
+import datasuorcetwo.datasource.repositoryLocal.VersionRepositoryLocal;
+import datasuorcetwo.datasource.repositoryProduct.VersionRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class VersionServerLocal implements BaseServerInte<Version> {
+    @Autowired
+    VersionRepositoryLocal versionRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(versionRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return versionRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<Version> getThanMaxId(Integer maxId) {
+        return versionRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<Version> getBetweenData(Integer beforeId, Integer afterId) {
+        return versionRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<Version> versions) {
+        if(!versions.isEmpty()){
+            versionRepositoryLocal.saveAll(versions);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<Version> iterable) {
+        versionRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/VersionServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/VersionServerProduct.java	(date 1575350476688)
+++ src/main/java/datasuorcetwo/datasource/server/VersionServerProduct.java	(date 1575350476688)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.Version;
+import datasuorcetwo.datasource.repositoryProduct.VersionRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class VersionServerProduct implements BaseServerInte<Version> {
+    @Autowired
+    VersionRepositoryProduct versionRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return versionRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<Version> getThanMaxId(Integer maxId) {
+        return versionRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<Version> getBetweenData(Integer beforeId, Integer afterId) {
+        return versionRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<Version> versions) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<Version> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/VersionRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/VersionRepositoryLocal.java	(date 1575340754760)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/VersionRepositoryLocal.java	(date 1575340754760)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.Version;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface VersionRepositoryLocal extends JpaRepository<Version, Integer> {
+    @Query(nativeQuery = true, value = "select id from version order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from version where id > ?")
+    List<Version> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from version where id >= ? and id < ?")
+    List<Version> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/NbCommandSensorRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/NbCommandSensorRepositoryProduct.java	(date 1575448316245)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/NbCommandSensorRepositoryProduct.java	(date 1575448316245)
@@ -0,0 +1,20 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.NbCommandSensor;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.Date;
+import java.util.List;
+
+public interface NbCommandSensorRepositoryProduct extends JpaRepository<NbCommandSensor, String> {
+
+    @Query(nativeQuery = true, value = "select * from nb_command_sensor where create_time > ? and create_time <= ? ORDER BY create_time")
+    List<NbCommandSensor> getBetweenCreateTime(Date before, Date after);
+
+    @Query(nativeQuery = true, value = "select count(*) from nb_command_sensor where create_time > ? and create_time <= ?")
+    int getCountByCreateTimeBetween(Date before, Date after);
+
+    @Query(nativeQuery = true, value = "SELECT create_time from nb_command_sensor ORDER BY create_time desc LIMIT 1")
+    Date getMaxCreateTime();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceManyroadRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceManyroadRepositoryProduct.java	(date 1575341425749)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceManyroadRepositoryProduct.java	(date 1575341425749)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceManyroad;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceManyroadRepositoryProduct extends JpaRepository<DeviceManyroad, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_manyroad order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_manyroad where id > ?")
+    List<DeviceManyroad> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_manyroad where id >= ? and id < ?")
+    List<DeviceManyroad> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/NbCommandSensorServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/NbCommandSensorServerLocal.java	(date 1575448315888)
+++ src/main/java/datasuorcetwo/datasource/server/NbCommandSensorServerLocal.java	(date 1575448315888)
@@ -0,0 +1,65 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.NbBaseServerInte;
+import datasuorcetwo.datasource.entity.NbCommandSensor;
+import datasuorcetwo.datasource.repositoryLocal.NbCommandSensorRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.Date;
+import java.util.List;
+
+@Service
+public class NbCommandSensorServerLocal implements NbBaseServerInte<NbCommandSensor> {
+
+    @Autowired
+    NbCommandSensorRepositoryLocal nbCommandSensorRepositoryLocal;
+
+    @Override
+    public NbCommandSensor getByCreateTime(Date date) {
+        return null;
+    }
+
+    @Override
+    public Date getMaxCreateTime() {
+        return nbCommandSensorRepositoryLocal.getMaxCreateTime();
+    }
+
+    @Override
+    public List<NbCommandSensor> getBetweenCreateTime(Date before, Date after) {
+        return null;
+    }
+
+    @Override
+    public int getCountByCreateTimeBetween(Date before, Date after) {
+        return 0;
+    }
+
+    @Override
+    public int getMaxId() {
+        return 0;
+    }
+
+    @Override
+    public List<NbCommandSensor> getThanMaxId(Integer id) {
+        return null;
+    }
+
+    @Override
+    public List<NbCommandSensor> getBetweenData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<NbCommandSensor> nbCommandSensors) {
+        if(!nbCommandSensors.isEmpty()){
+            nbCommandSensorRepositoryLocal.saveAll(nbCommandSensors);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<NbCommandSensor> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/NbCommandSensorServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/NbCommandSensorServerProduct.java	(date 1575448316045)
+++ src/main/java/datasuorcetwo/datasource/server/NbCommandSensorServerProduct.java	(date 1575448316045)
@@ -0,0 +1,62 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.NbBaseServerInte;
+import datasuorcetwo.datasource.entity.NbCommandSensor;
+import datasuorcetwo.datasource.repositoryProduct.NbCommandSensorRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.Date;
+import java.util.List;
+
+@Service
+public class NbCommandSensorServerProduct implements NbBaseServerInte<NbCommandSensor> {
+
+    @Autowired
+    NbCommandSensorRepositoryProduct nbCommandSensorRepositoryProduct;
+
+    @Override
+    public NbCommandSensor getByCreateTime(Date date) {
+        return null;
+    }
+
+    @Override
+    public Date getMaxCreateTime() {
+        return nbCommandSensorRepositoryProduct.getMaxCreateTime();
+    }
+
+    @Override
+    public List<NbCommandSensor> getBetweenCreateTime(Date before, Date after) {
+        return nbCommandSensorRepositoryProduct.getBetweenCreateTime(before, after);
+    }
+
+    @Override
+    public int getCountByCreateTimeBetween(Date before, Date after) {
+        return 0;
+    }
+
+    @Override
+    public int getMaxId() {
+        return 0;
+    }
+
+    @Override
+    public List<NbCommandSensor> getThanMaxId(Integer id) {
+        return null;
+    }
+
+    @Override
+    public List<NbCommandSensor> getBetweenData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<NbCommandSensor> nbCommandSensors) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<NbCommandSensor> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/baseInterface/BaseServerInte.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/baseInterface/BaseServerInte.java	(date 1575421652100)
+++ src/main/java/datasuorcetwo/datasource/baseInterface/BaseServerInte.java	(date 1575421652100)
@@ -0,0 +1,14 @@
+package datasuorcetwo.datasource.baseInterface;
+
+import java.util.List;
+
+public interface BaseServerInte<T> {
+    // 获取最大id
+    int getMaxId();
+    // 获取id之后的数据
+    List<T> getThanMaxId(Integer id);
+    List<T> getBetweenData(Integer beforeId, Integer afterId);
+    int insert(List<T> ts);
+    // 根据iterator删除
+    int deleteByIterator(Iterable<T> iterable);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceCo2RepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceCo2RepositoryProduct.java	(date 1575338577921)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceCo2RepositoryProduct.java	(date 1575338577921)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceCo2;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceCo2RepositoryProduct extends JpaRepository<DeviceCo2, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_co2 order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_co2 where id > ?")
+    List<DeviceCo2> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_co2 where id >= ? and id < ?")
+    List<DeviceCo2> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceHumidityRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceHumidityRepositoryProduct.java	(date 1575341425782)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceHumidityRepositoryProduct.java	(date 1575341425782)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceHumidity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceHumidityRepositoryProduct extends JpaRepository<DeviceHumidity, Integer>{
+    @Query(nativeQuery = true, value = "select id from device_humidity order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_humidity where id > ?")
+    List<DeviceHumidity> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_humidity where id >= ? and id < ?")
+    List<DeviceHumidity> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceLightRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceLightRepositoryProduct.java	(date 1575341426036)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceLightRepositoryProduct.java	(date 1575341426036)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceLight;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceLightRepositoryProduct extends JpaRepository<DeviceLight, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_light order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_light where id > ?")
+    List<DeviceLight> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_light where id >= ? and id < ?")
+    List<DeviceLight> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceAirSoilLightRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceAirSoilLightRepositoryProduct.java	(date 1575341425813)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceAirSoilLightRepositoryProduct.java	(date 1575341425813)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceAirSoilLight;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceAirSoilLightRepositoryProduct extends JpaRepository<DeviceAirSoilLight, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_air_soil_light order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_air_soil_light where id > ?")
+    List<DeviceAirSoilLight> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_air_soil_light where id >= ? and id < ?")
+    List<DeviceAirSoilLight> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceAlarmRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceAlarmRepositoryProduct.java	(date 1575341426236)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceAlarmRepositoryProduct.java	(date 1575341426236)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceAlarm;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceAlarmRepositoryProduct extends JpaRepository<DeviceAlarm, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_alarm order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_alarm where id > ?")
+    List<DeviceAlarm> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_alarm where id >= ? and id < ?")
+    List<DeviceAlarm> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/entity/BaseEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/BaseEntity.java	(date 1575351811336)
+++ src/main/java/datasuorcetwo/datasource/entity/BaseEntity.java	(date 1575351811336)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.entity;
+
+/**
+ * baseentity的意义在于：让所有实体集成此类，然后在IdOrGenerate（自定义主键）中使用基类代表所有实体
+ */
+public class BaseEntity {
+    Integer id;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        BaseEntity bean = (BaseEntity) o;
+        if(toString().equals(bean.toString())) {
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * 重写hashcode，使用tostring来重写，是防止两个属性值一模一样的对象，因为地址不同，而导致hashcode不同，
+     * 因此如下重写之后，两个对象是否相同，只会根据其属性值是否相同，来断定。
+     * @return
+     */
+    @Override
+    public int hashCode() {
+        char[] charArray = this.toString().toCharArray();
+        int hash = 0;
+        for(char c : charArray) {
+            hash = hash * 131 + c;
+        }
+        return hash;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/IdOrGenerate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/IdOrGenerate.java	(date 1563326748261)
+++ src/main/java/datasuorcetwo/datasource/entity/IdOrGenerate.java	(date 1563326748261)
@@ -0,0 +1,25 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.HibernateException;
+import org.hibernate.engine.spi.SharedSessionContractImplementor;
+import org.hibernate.id.IdentityGenerator;
+
+import java.io.Serializable;
+
+/**
+ * 自定义主键：否则jpa的save的方法添加数据会导致有数据的id根据自增策略进行添加，因此已有id的数据进行插入，已有的id会改变
+ */
+public class IdOrGenerate extends IdentityGenerator {
+    @Override
+    public Serializable generate(SharedSessionContractImplementor s, Object obj) throws HibernateException{
+        if(obj == null){
+            throw new HibernateException(new NullPointerException());
+        }
+        if((((BaseEntity) obj).getId()) == null){
+            Serializable id = super.generate(s, obj);
+            return id;
+        }else {
+            return ((BaseEntity) obj).getId();
+        }
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceHumidity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceHumidity.java	(date 1575354116160)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceHumidity.java	(date 1575354116160)
@@ -0,0 +1,382 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "device_humidity")
+public class DeviceHumidity extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "upper_limit")
+    private Double upperLimit;
+    @Column(name = "lower_limit")
+    private Double lowerLimit;
+    @Column(name = "fixed_parameters")
+    private String fixedParameters;
+    @Column(name = "humidity_error")
+    private Double humidityError;
+    @Column(name = "alarm_value_yellow")
+    private Double alarmValueYellow;
+    @Column(name = "alarm_value_orange")
+    private Double alarmValueOrange;
+    @Column(name = "alarm_value_red")
+    private Double alarmValueRed;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "status_change_time")
+    private Date statusChangeTime;
+    @Column(name = "interval_time")
+    private Integer intervalTime;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "image_path")
+    private String imagePath;
+    @Column(name = "first_letter")
+    private String firstLetter;
+    @Column(name = "is_delete")
+    private Integer isDelete;
+    @Column(name = "has_switch")
+    private Integer hasSwitch;
+    @Column(name = "switch_status")
+    private Integer switchStatus;
+    @Column(name = "switch_status_change_time")
+    private Date switchStatusChangeTime;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+    @Column(name = "gateway_id")
+    private Integer gatewayId;
+    @Column(name = "gateway_name")
+    private String gatewayName;
+    @Column(name = "gateway_code")
+    private String gatewayCode;
+    @Column(name = "channel")
+    private Integer channel;
+    @Column(name = "access_mode")
+    private Byte accessMode;
+    @Column(name = "brand")
+    private String brand;
+    @Column(name = "model")
+    private String model;
+    @Column(name = "firmware")
+    private String firmware;
+    @Column(name = "organization")
+    private String organization;
+    @Column(name = "region")
+    private String region;
+    @Column(name = "branch")
+    private String branch;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public Double getUpperLimit() {
+        return upperLimit;
+    }
+
+    public void setUpperLimit(Double upperLimit) {
+        this.upperLimit = upperLimit;
+    }
+
+    public Double getLowerLimit() {
+        return lowerLimit;
+    }
+
+    public void setLowerLimit(Double lowerLimit) {
+        this.lowerLimit = lowerLimit;
+    }
+
+    public String getFixedParameters() {
+        return fixedParameters;
+    }
+
+    public void setFixedParameters(String fixedParameters) {
+        this.fixedParameters = fixedParameters == null ? null : fixedParameters.trim();
+    }
+
+    public Double getHumidityError() {
+        return humidityError;
+    }
+
+    public void setHumidityError(Double humidityError) {
+        this.humidityError = humidityError;
+    }
+
+    public Double getAlarmValueYellow() {
+        return alarmValueYellow;
+    }
+
+    public void setAlarmValueYellow(Double alarmValueYellow) {
+        this.alarmValueYellow = alarmValueYellow;
+    }
+
+    public Double getAlarmValueOrange() {
+        return alarmValueOrange;
+    }
+
+    public void setAlarmValueOrange(Double alarmValueOrange) {
+        this.alarmValueOrange = alarmValueOrange;
+    }
+
+    public Double getAlarmValueRed() {
+        return alarmValueRed;
+    }
+
+    public void setAlarmValueRed(Double alarmValueRed) {
+        this.alarmValueRed = alarmValueRed;
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Date getStatusChangeTime() {
+        return statusChangeTime;
+    }
+
+    public void setStatusChangeTime(Date statusChangeTime) {
+        this.statusChangeTime = statusChangeTime;
+    }
+
+    public Integer getIntervalTime() {
+        return intervalTime;
+    }
+
+    public void setIntervalTime(Integer intervalTime) {
+        this.intervalTime = intervalTime;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public String getImagePath() {
+        return imagePath;
+    }
+
+    public void setImagePath(String imagePath) {
+        this.imagePath = imagePath == null ? null : imagePath.trim();
+    }
+
+    public String getFirstLetter() {
+        return firstLetter;
+    }
+
+    public void setFirstLetter(String firstLetter) {
+        this.firstLetter = firstLetter == null ? null : firstLetter.trim();
+    }
+
+    public Integer getIsDelete() {
+        return isDelete;
+    }
+
+    public void setIsDelete(Integer isDelete) {
+        this.isDelete = isDelete;
+    }
+
+    public Integer getHasSwitch() {
+        return hasSwitch;
+    }
+
+    public void setHasSwitch(Integer hasSwitch) {
+        this.hasSwitch = hasSwitch;
+    }
+
+    public Integer getSwitchStatus() {
+        return switchStatus;
+    }
+
+    public void setSwitchStatus(Integer switchStatus) {
+        this.switchStatus = switchStatus;
+    }
+
+    public Date getSwitchStatusChangeTime() {
+        return switchStatusChangeTime;
+    }
+
+    public void setSwitchStatusChangeTime(Date switchStatusChangeTime) {
+        this.switchStatusChangeTime = switchStatusChangeTime;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public Integer getGatewayId() {
+        return gatewayId;
+    }
+
+    public void setGatewayId(Integer gatewayId) {
+        this.gatewayId = gatewayId;
+    }
+
+    public String getGatewayName() {
+        return gatewayName;
+    }
+
+    public void setGatewayName(String gatewayName) {
+        this.gatewayName = gatewayName == null ? null : gatewayName.trim();
+    }
+
+    public String getGatewayCode() {
+        return gatewayCode;
+    }
+
+    public void setGatewayCode(String gatewayCode) {
+        this.gatewayCode = gatewayCode == null ? null : gatewayCode.trim();
+    }
+
+    public Integer getChannel() {
+        return channel;
+    }
+
+    public void setChannel(Integer channel) {
+        this.channel = channel;
+    }
+
+    public Byte getAccessMode() {
+        return accessMode;
+    }
+
+    public void setAccessMode(Byte accessMode) {
+        this.accessMode = accessMode;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand == null ? null : brand.trim();
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model == null ? null : model.trim();
+    }
+
+    public String getFirmware() {
+        return firmware;
+    }
+
+    public void setFirmware(String firmware) {
+        this.firmware = firmware == null ? null : firmware.trim();
+    }
+
+    public String getOrganization() {
+        return organization;
+    }
+
+    public void setOrganization(String organization) {
+        this.organization = organization == null ? null : organization.trim();
+    }
+
+    public String getRegion() {
+        return region;
+    }
+
+    public void setRegion(String region) {
+        this.region = region == null ? null : region.trim();
+    }
+
+    public String getBranch() {
+        return branch;
+    }
+
+    public void setBranch(String branch) {
+        this.branch = branch == null ? null : branch.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceHumidity{" +
+                "id=" + id +
+                ", deviceCode='" + deviceCode + '\'' +
+                ", name='" + name + '\'' +
+                ", status=" + status +
+                ", statusChangeTime=" + statusChangeTime +
+                ", isDelete=" + isDelete +
+                ", deviceTypeId=" + deviceTypeId +
+                ", gatewayId=" + gatewayId +
+                ", gatewayCode='" + gatewayCode + '\'' +
+                ", channel=" + channel +
+                ", accessMode=" + accessMode +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceCo2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceCo2.java	(date 1575354116038)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceCo2.java	(date 1575354116038)
@@ -0,0 +1,382 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "device_co2")
+public class DeviceCo2 extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "upper_limit")
+    private Double upperLimit;
+    @Column(name = "lower_limit")
+    private Double lowerLimit;
+    @Column(name = "co2_error")
+    private Double co2Error;
+    @Column(name = "alarm_value_yellow")
+    private Double alarmValueYellow;
+    @Column(name = "alarm_value_orange")
+    private Double alarmValueOrange;
+    @Column(name = "fixed_parameters")
+    private String fixedParameters;
+    @Column(name = "alarm_value_red")
+    private Double alarmValueRed;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "status_change_time")
+    private Date statusChangeTime;
+    @Column(name = "interval_time")
+    private Integer intervalTime;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "image_path")
+    private String imagePath;
+    @Column(name = "first_letter")
+    private String firstLetter;
+    @Column(name = "is_delete")
+    private Integer isDelete;
+    @Column(name = "has_switch")
+    private Integer hasSwitch;
+    @Column(name = "switch_status")
+    private Integer switchStatus;
+    @Column(name = "switch_status_change_time")
+    private Date switchStatusChangeTime;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+    @Column(name = "gateway_id")
+    private Integer gatewayId;
+    @Column(name = "gateway_name")
+    private String gatewayName;
+    @Column(name = "gateway_code")
+    private String gatewayCode;
+    @Column(name = "channel")
+    private Integer channel;
+    @Column(name = "access_mode")
+    private Byte accessMode;
+    @Column(name = "brand")
+    private String brand;
+    @Column(name = "model")
+    private String model;
+    @Column(name = "firmware")
+    private String firmware;
+    @Column(name = "organization")
+    private String organization;
+    @Column(name = "region")
+    private String region;
+    @Column(name = "branch")
+    private String branch;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public Double getUpperLimit() {
+        return upperLimit;
+    }
+
+    public void setUpperLimit(Double upperLimit) {
+        this.upperLimit = upperLimit;
+    }
+
+    public Double getLowerLimit() {
+        return lowerLimit;
+    }
+
+    public void setLowerLimit(Double lowerLimit) {
+        this.lowerLimit = lowerLimit;
+    }
+
+    public Double getCo2Error() {
+        return co2Error;
+    }
+
+    public void setCo2Error(Double co2Error) {
+        this.co2Error = co2Error;
+    }
+
+    public Double getAlarmValueYellow() {
+        return alarmValueYellow;
+    }
+
+    public void setAlarmValueYellow(Double alarmValueYellow) {
+        this.alarmValueYellow = alarmValueYellow;
+    }
+
+    public Double getAlarmValueOrange() {
+        return alarmValueOrange;
+    }
+
+    public void setAlarmValueOrange(Double alarmValueOrange) {
+        this.alarmValueOrange = alarmValueOrange;
+    }
+
+    public String getFixedParameters() {
+        return fixedParameters;
+    }
+
+    public void setFixedParameters(String fixedParameters) {
+        this.fixedParameters = fixedParameters == null ? null : fixedParameters.trim();
+    }
+
+    public Double getAlarmValueRed() {
+        return alarmValueRed;
+    }
+
+    public void setAlarmValueRed(Double alarmValueRed) {
+        this.alarmValueRed = alarmValueRed;
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Date getStatusChangeTime() {
+        return statusChangeTime;
+    }
+
+    public void setStatusChangeTime(Date statusChangeTime) {
+        this.statusChangeTime = statusChangeTime;
+    }
+
+    public Integer getIntervalTime() {
+        return intervalTime;
+    }
+
+    public void setIntervalTime(Integer intervalTime) {
+        this.intervalTime = intervalTime;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public String getImagePath() {
+        return imagePath;
+    }
+
+    public void setImagePath(String imagePath) {
+        this.imagePath = imagePath == null ? null : imagePath.trim();
+    }
+
+    public String getFirstLetter() {
+        return firstLetter;
+    }
+
+    public void setFirstLetter(String firstLetter) {
+        this.firstLetter = firstLetter == null ? null : firstLetter.trim();
+    }
+
+    public Integer getIsDelete() {
+        return isDelete;
+    }
+
+    public void setIsDelete(Integer isDelete) {
+        this.isDelete = isDelete;
+    }
+
+    public Integer getHasSwitch() {
+        return hasSwitch;
+    }
+
+    public void setHasSwitch(Integer hasSwitch) {
+        this.hasSwitch = hasSwitch;
+    }
+
+    public Integer getSwitchStatus() {
+        return switchStatus;
+    }
+
+    public void setSwitchStatus(Integer switchStatus) {
+        this.switchStatus = switchStatus;
+    }
+
+    public Date getSwitchStatusChangeTime() {
+        return switchStatusChangeTime;
+    }
+
+    public void setSwitchStatusChangeTime(Date switchStatusChangeTime) {
+        this.switchStatusChangeTime = switchStatusChangeTime;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public Integer getGatewayId() {
+        return gatewayId;
+    }
+
+    public void setGatewayId(Integer gatewayId) {
+        this.gatewayId = gatewayId;
+    }
+
+    public String getGatewayName() {
+        return gatewayName;
+    }
+
+    public void setGatewayName(String gatewayName) {
+        this.gatewayName = gatewayName == null ? null : gatewayName.trim();
+    }
+
+    public String getGatewayCode() {
+        return gatewayCode;
+    }
+
+    public void setGatewayCode(String gatewayCode) {
+        this.gatewayCode = gatewayCode == null ? null : gatewayCode.trim();
+    }
+
+    public Integer getChannel() {
+        return channel;
+    }
+
+    public void setChannel(Integer channel) {
+        this.channel = channel;
+    }
+
+    public Byte getAccessMode() {
+        return accessMode;
+    }
+
+    public void setAccessMode(Byte accessMode) {
+        this.accessMode = accessMode;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand == null ? null : brand.trim();
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model == null ? null : model.trim();
+    }
+
+    public String getFirmware() {
+        return firmware;
+    }
+
+    public void setFirmware(String firmware) {
+        this.firmware = firmware == null ? null : firmware.trim();
+    }
+
+    public String getOrganization() {
+        return organization;
+    }
+
+    public void setOrganization(String organization) {
+        this.organization = organization == null ? null : organization.trim();
+    }
+
+    public String getRegion() {
+        return region;
+    }
+
+    public void setRegion(String region) {
+        this.region = region == null ? null : region.trim();
+    }
+
+    public String getBranch() {
+        return branch;
+    }
+
+    public void setBranch(String branch) {
+        this.branch = branch == null ? null : branch.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceCo2{" +
+                "id=" + id +
+                ", deviceCode='" + deviceCode + '\'' +
+                ", name='" + name + '\'' +
+                ", status=" + status +
+                ", statusChangeTime=" + statusChangeTime +
+                ", isDelete=" + isDelete +
+                ", deviceTypeId=" + deviceTypeId +
+                ", gatewayId=" + gatewayId +
+                ", gatewayCode='" + gatewayCode + '\'' +
+                ", channel=" + channel +
+                ", accessMode=" + accessMode +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceAlarm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceAlarm.java	(date 1575352851994)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceAlarm.java	(date 1575352851994)
@@ -0,0 +1,126 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "device_alarm")
+public class DeviceAlarm extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "start_time")
+    private Date startTime;
+    @Column(name = "end_time")
+    private Date endTime;
+    @Column(name = "alarm_type")
+    private Integer alarmType;
+    @Column(name = "gprs_flag")
+    private String gprsFlag;
+    @Column(name = "has_read")
+    private Integer hasRead;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "device_type_id")
+    private String userId;
+    @Column(name = "device_id")
+    private Integer deviceTypeId;
+    @Column(name = "user_id")
+    private Integer deviceId;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Date getStartTime() {
+        return startTime;
+    }
+
+    public void setStartTime(Date startTime) {
+        this.startTime = startTime;
+    }
+
+    public Date getEndTime() {
+        return endTime;
+    }
+
+    public void setEndTime(Date endTime) {
+        this.endTime = endTime;
+    }
+
+    public Integer getAlarmType() {
+        return alarmType;
+    }
+
+    public void setAlarmType(Integer alarmType) {
+        this.alarmType = alarmType;
+    }
+
+    public String getGprsFlag() {
+        return gprsFlag;
+    }
+
+    public void setGprsFlag(String gprsFlag) {
+        this.gprsFlag = gprsFlag == null ? null : gprsFlag.trim();
+    }
+
+    public Integer getHasRead() {
+        return hasRead;
+    }
+
+    public void setHasRead(Integer hasRead) {
+        this.hasRead = hasRead;
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId == null ? null : userId.trim();
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceAlarm{" +
+                "id=" + id +
+                ", startTime=" + startTime +
+                ", alarmType=" + alarmType +
+                ", deviceTypeId=" + deviceTypeId +
+                ", deviceId=" + deviceId +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceAirSoilLight.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceAirSoilLight.java	(date 1575354116107)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceAirSoilLight.java	(date 1575354116107)
@@ -0,0 +1,382 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "device_air_soil_light")
+public class DeviceAirSoilLight extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_nb_id")
+    private String deviceNbId;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "alarm_value_yellow")
+    private Double alarmValueYellow;
+    @Column(name = "alarm_value_orange")
+    private Double alarmValueOrange;
+    @Column(name = "alarm_value_red")
+    private Double alarmValueRed;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "status_change_time")
+    private Date statusChangeTime;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "is_delete")
+    private Integer isDelete;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+    @Column(name = "gateway_id")
+    private Integer gatewayId;
+    @Column(name = "gateway_name")
+    private String gatewayName;
+    @Column(name = "gateway_code")
+    private String gatewayCode;
+    @Column(name = "channel")
+    private Integer channel;
+    @Column(name = "access_mode")
+    private Byte accessMode;
+    @Column(name = "air_temperature_orange")
+    private Double airTemperatureOrange;
+    @Column(name = "air_temperature_yellow")
+    private Double airTemperatureYellow;
+    @Column(name = "air_temperature_red")
+    private Double airTemperatureRed;
+    @Column(name = "air_humidity_orange")
+    private Double airHumidityOrange;
+    @Column(name = "air_humidity_yellow")
+    private Double airHumidityYellow;
+    @Column(name = "air_humidity_red")
+    private Double airHumidityRed;
+    @Column(name = "soil_temperature_orange")
+    private Double soilTemperatureOrange;
+    @Column(name = "soil_temperature_yellow")
+    private Double soilTemperatureYellow;
+    @Column(name = "soil_temperature_red")
+    private Double soilTemperatureRed;
+    @Column(name = "soil_humidity_orange")
+    private Double soilHumidityOrange;
+    @Column(name = "soil_humidity_yellow")
+    private Double soilHumidityYellow;
+    @Column(name = "soil_humidity_red")
+    private Double soilHumidityRed;
+    @Column(name = "light_orange")
+    private Double lightOrange;
+    @Column(name = "light_yellow")
+    private Double lightYellow;
+    @Column(name = "light_red")
+    private Double lightRed;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "version")
+    private Integer version;
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getDeviceNbId() {
+        return deviceNbId;
+    }
+
+    public void setDeviceNbId(String deviceNbId) {
+        this.deviceNbId = deviceNbId == null ? null : deviceNbId.trim();
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public Double getAlarmValueYellow() {
+        return alarmValueYellow;
+    }
+
+    public void setAlarmValueYellow(Double alarmValueYellow) {
+        this.alarmValueYellow = alarmValueYellow;
+    }
+
+    public Double getAlarmValueOrange() {
+        return alarmValueOrange;
+    }
+
+    public void setAlarmValueOrange(Double alarmValueOrange) {
+        this.alarmValueOrange = alarmValueOrange;
+    }
+
+    public Double getAlarmValueRed() {
+        return alarmValueRed;
+    }
+
+    public void setAlarmValueRed(Double alarmValueRed) {
+        this.alarmValueRed = alarmValueRed;
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Date getStatusChangeTime() {
+        return statusChangeTime;
+    }
+
+    public void setStatusChangeTime(Date statusChangeTime) {
+        this.statusChangeTime = statusChangeTime;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public Integer getIsDelete() {
+        return isDelete;
+    }
+
+    public void setIsDelete(Integer isDelete) {
+        this.isDelete = isDelete;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public Integer getGatewayId() {
+        return gatewayId;
+    }
+
+    public void setGatewayId(Integer gatewayId) {
+        this.gatewayId = gatewayId;
+    }
+
+    public String getGatewayName() {
+        return gatewayName;
+    }
+
+    public void setGatewayName(String gatewayName) {
+        this.gatewayName = gatewayName == null ? null : gatewayName.trim();
+    }
+
+    public String getGatewayCode() {
+        return gatewayCode;
+    }
+
+    public void setGatewayCode(String gatewayCode) {
+        this.gatewayCode = gatewayCode == null ? null : gatewayCode.trim();
+    }
+
+    public Integer getChannel() {
+        return channel;
+    }
+
+    public void setChannel(Integer channel) {
+        this.channel = channel;
+    }
+
+    public Byte getAccessMode() {
+        return accessMode;
+    }
+
+    public void setAccessMode(Byte accessMode) {
+        this.accessMode = accessMode;
+    }
+
+    public Double getAirTemperatureOrange() {
+        return airTemperatureOrange;
+    }
+
+    public void setAirTemperatureOrange(Double airTemperatureOrange) {
+        this.airTemperatureOrange = airTemperatureOrange;
+    }
+
+    public Double getAirTemperatureYellow() {
+        return airTemperatureYellow;
+    }
+
+    public void setAirTemperatureYellow(Double airTemperatureYellow) {
+        this.airTemperatureYellow = airTemperatureYellow;
+    }
+
+    public Double getAirTemperatureRed() {
+        return airTemperatureRed;
+    }
+
+    public void setAirTemperatureRed(Double airTemperatureRed) {
+        this.airTemperatureRed = airTemperatureRed;
+    }
+
+    public Double getAirHumidityOrange() {
+        return airHumidityOrange;
+    }
+
+    public void setAirHumidityOrange(Double airHumidityOrange) {
+        this.airHumidityOrange = airHumidityOrange;
+    }
+
+    public Double getAirHumidityYellow() {
+        return airHumidityYellow;
+    }
+
+    public void setAirHumidityYellow(Double airHumidityYellow) {
+        this.airHumidityYellow = airHumidityYellow;
+    }
+
+    public Double getAirHumidityRed() {
+        return airHumidityRed;
+    }
+
+    public void setAirHumidityRed(Double airHumidityRed) {
+        this.airHumidityRed = airHumidityRed;
+    }
+
+    public Double getSoilTemperatureOrange() {
+        return soilTemperatureOrange;
+    }
+
+    public void setSoilTemperatureOrange(Double soilTemperatureOrange) {
+        this.soilTemperatureOrange = soilTemperatureOrange;
+    }
+
+    public Double getSoilTemperatureYellow() {
+        return soilTemperatureYellow;
+    }
+
+    public void setSoilTemperatureYellow(Double soilTemperatureYellow) {
+        this.soilTemperatureYellow = soilTemperatureYellow;
+    }
+
+    public Double getSoilTemperatureRed() {
+        return soilTemperatureRed;
+    }
+
+    public void setSoilTemperatureRed(Double soilTemperatureRed) {
+        this.soilTemperatureRed = soilTemperatureRed;
+    }
+
+    public Double getSoilHumidityOrange() {
+        return soilHumidityOrange;
+    }
+
+    public void setSoilHumidityOrange(Double soilHumidityOrange) {
+        this.soilHumidityOrange = soilHumidityOrange;
+    }
+
+    public Double getSoilHumidityYellow() {
+        return soilHumidityYellow;
+    }
+
+    public void setSoilHumidityYellow(Double soilHumidityYellow) {
+        this.soilHumidityYellow = soilHumidityYellow;
+    }
+
+    public Double getSoilHumidityRed() {
+        return soilHumidityRed;
+    }
+
+    public void setSoilHumidityRed(Double soilHumidityRed) {
+        this.soilHumidityRed = soilHumidityRed;
+    }
+
+    public Double getLightOrange() {
+        return lightOrange;
+    }
+
+    public void setLightOrange(Double lightOrange) {
+        this.lightOrange = lightOrange;
+    }
+
+    public Double getLightYellow() {
+        return lightYellow;
+    }
+
+    public void setLightYellow(Double lightYellow) {
+        this.lightYellow = lightYellow;
+    }
+
+    public Double getLightRed() {
+        return lightRed;
+    }
+
+    public void setLightRed(Double lightRed) {
+        this.lightRed = lightRed;
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public Integer getVersion() {
+        return version;
+    }
+
+    public void setVersion(Integer version) {
+        this.version = version;
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceAirSoilLight{" +
+                "id=" + id +
+                ", deviceNbId='" + deviceNbId + '\'' +
+                ", deviceCode='" + deviceCode + '\'' +
+                ", name='" + name + '\'' +
+                ", status=" + status +
+                ", statusChangeTime=" + statusChangeTime +
+                ", isDelete=" + isDelete +
+                ", gatewayCode='" + gatewayCode + '\'' +
+                ", channel=" + channel +
+                ", accessMode=" + accessMode +
+                ", remark='" + remark + '\'' +
+                ", version=" + version +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceTemperature.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceTemperature.java	(date 1575354116262)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceTemperature.java	(date 1575354116262)
@@ -0,0 +1,383 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "device_temperature")
+public class DeviceTemperature extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "upper_limit")
+    private Double upperLimit;
+    @Column(name = "lower_limit")
+    private Double lowerLimit;
+    @Column(name = "temp_error")
+    private Double tempError;
+    @Column(name = "alarm_value_yellow")
+    private Double alarmValueYellow;
+    @Column(name = "alarm_value_orange")
+    private Double alarmValueOrange;
+    @Column(name = "fixed_parameters")
+    private String fixedParameters;
+    @Column(name = "alarm_value_red")
+    private Double alarmValueRed;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "status_change_time")
+    private Date statusChangeTime;
+    @Column(name = "interval_time")
+    private Integer intervalTime;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "image_path")
+    private String imagePath;
+    @Column(name = "first_letter")
+    private String firstLetter;
+    @Column(name = "is_delete")
+    private Integer isDelete;
+    @Column(name = "has_switch")
+    private Integer hasSwitch;
+    @Column(name = "switch_status")
+    private Integer switchStatus;
+    @Column(name = "switch_status_change_time")
+    private Date switchStatusChangeTime;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+    @Column(name = "gateway_id")
+    private Integer gatewayId;
+    @Column(name = "gateway_name")
+    private String gatewayName;
+    @Column(name = "gateway_code")
+    private String gatewayCode;
+    @Column(name = "channel")
+    private Integer channel;
+    @Column(name = "access_mode")
+    private Byte accessMode;
+    @Column(name = "brand")
+    private String brand;
+    @Column(name = "model")
+    private String model;
+    @Column(name = "firmware")
+    private String firmware;
+    @Column(name = "organization")
+    private String organization;
+    @Column(name = "region")
+    private String region;
+    @Column(name = "branch")
+    private String branch;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public Double getUpperLimit() {
+        return upperLimit;
+    }
+
+    public void setUpperLimit(Double upperLimit) {
+        this.upperLimit = upperLimit;
+    }
+
+    public Double getLowerLimit() {
+        return lowerLimit;
+    }
+
+    public void setLowerLimit(Double lowerLimit) {
+        this.lowerLimit = lowerLimit;
+    }
+
+    public Double getTempError() {
+        return tempError;
+    }
+
+    public void setTempError(Double tempError) {
+        this.tempError = tempError;
+    }
+
+    public Double getAlarmValueYellow() {
+        return alarmValueYellow;
+    }
+
+    public void setAlarmValueYellow(Double alarmValueYellow) {
+        this.alarmValueYellow = alarmValueYellow;
+    }
+
+    public Double getAlarmValueOrange() {
+        return alarmValueOrange;
+    }
+
+    public void setAlarmValueOrange(Double alarmValueOrange) {
+        this.alarmValueOrange = alarmValueOrange;
+    }
+
+    public String getFixedParameters() {
+        return fixedParameters;
+    }
+
+    public void setFixedParameters(String fixedParameters) {
+        this.fixedParameters = fixedParameters == null ? null : fixedParameters.trim();
+    }
+
+    public Double getAlarmValueRed() {
+        return alarmValueRed;
+    }
+
+    public void setAlarmValueRed(Double alarmValueRed) {
+        this.alarmValueRed = alarmValueRed;
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Date getStatusChangeTime() {
+        return statusChangeTime;
+    }
+
+    public void setStatusChangeTime(Date statusChangeTime) {
+        this.statusChangeTime = statusChangeTime;
+    }
+
+    public Integer getIntervalTime() {
+        return intervalTime;
+    }
+
+    public void setIntervalTime(Integer intervalTime) {
+        this.intervalTime = intervalTime;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public String getImagePath() {
+        return imagePath;
+    }
+
+    public void setImagePath(String imagePath) {
+        this.imagePath = imagePath == null ? null : imagePath.trim();
+    }
+
+    public String getFirstLetter() {
+        return firstLetter;
+    }
+
+    public void setFirstLetter(String firstLetter) {
+        this.firstLetter = firstLetter == null ? null : firstLetter.trim();
+    }
+
+    public Integer getIsDelete() {
+        return isDelete;
+    }
+
+    public void setIsDelete(Integer isDelete) {
+        this.isDelete = isDelete;
+    }
+
+    public Integer getHasSwitch() {
+        return hasSwitch;
+    }
+
+    public void setHasSwitch(Integer hasSwitch) {
+        this.hasSwitch = hasSwitch;
+    }
+
+    public Integer getSwitchStatus() {
+        return switchStatus;
+    }
+
+    public void setSwitchStatus(Integer switchStatus) {
+        this.switchStatus = switchStatus;
+    }
+
+    public Date getSwitchStatusChangeTime() {
+        return switchStatusChangeTime;
+    }
+
+    public void setSwitchStatusChangeTime(Date switchStatusChangeTime) {
+        this.switchStatusChangeTime = switchStatusChangeTime;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public Integer getGatewayId() {
+        return gatewayId;
+    }
+
+    public void setGatewayId(Integer gatewayId) {
+        this.gatewayId = gatewayId;
+    }
+
+    public String getGatewayName() {
+        return gatewayName;
+    }
+
+    public void setGatewayName(String gatewayName) {
+        this.gatewayName = gatewayName == null ? null : gatewayName.trim();
+    }
+
+    public String getGatewayCode() {
+        return gatewayCode;
+    }
+
+    public void setGatewayCode(String gatewayCode) {
+        this.gatewayCode = gatewayCode == null ? null : gatewayCode.trim();
+    }
+
+    public Integer getChannel() {
+        return channel;
+    }
+
+    public void setChannel(Integer channel) {
+        this.channel = channel;
+    }
+
+    public Byte getAccessMode() {
+        return accessMode;
+    }
+
+    public void setAccessMode(Byte accessMode) {
+        this.accessMode = accessMode;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand == null ? null : brand.trim();
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model == null ? null : model.trim();
+    }
+
+    public String getFirmware() {
+        return firmware;
+    }
+
+    public void setFirmware(String firmware) {
+        this.firmware = firmware == null ? null : firmware.trim();
+    }
+
+    public String getOrganization() {
+        return organization;
+    }
+
+    public void setOrganization(String organization) {
+        this.organization = organization == null ? null : organization.trim();
+    }
+
+    public String getRegion() {
+        return region;
+    }
+
+    public void setRegion(String region) {
+        this.region = region == null ? null : region.trim();
+    }
+
+    public String getBranch() {
+        return branch;
+    }
+
+    public void setBranch(String branch) {
+        this.branch = branch == null ? null : branch.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceTemperature{" +
+                "id=" + id +
+                ", deviceCode='" + deviceCode + '\'' +
+                ", name='" + name + '\'' +
+                ", status=" + status +
+                ", statusChangeTime=" + statusChangeTime +
+                ", isDelete=" + isDelete +
+                ", hasSwitch=" + hasSwitch +
+                ", deviceTypeId=" + deviceTypeId +
+                ", gatewayId=" + gatewayId +
+                ", gatewayCode='" + gatewayCode + '\'' +
+                ", channel=" + channel +
+                ", accessMode=" + accessMode +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/HistoryBrowseServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/HistoryBrowseServerProduct.java	(date 1575007026488)
+++ src/main/java/datasuorcetwo/datasource/server/HistoryBrowseServerProduct.java	(date 1575007026488)
@@ -0,0 +1,35 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.HistoryBrowse;
+import datasuorcetwo.datasource.repositoryProduct.HistoryBrowseRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class HistoryBrowseServerProduct implements DataBaseServerInte<HistoryBrowse> {
+    @Autowired
+    HistoryBrowseRepositoryProduct historyBrowseRepositoryProduct;
+
+    @Override
+    public Integer getMaxId() {
+        return historyBrowseRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return historyBrowseRepositoryProduct.getMinId();
+    }
+
+    @Override
+    public List<HistoryBrowse> get1wData(Integer beforeId, Integer afterId) {
+        return historyBrowseRepositoryProduct.get1wData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<HistoryBrowse> historyBrowses) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceManyroad.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceManyroad.java	(date 1575352861220)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceManyroad.java	(date 1575352861220)
@@ -0,0 +1,202 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+
+@Entity
+@Table(name = "device_manyroad")
+public class DeviceManyroad extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_switch_id")
+    private Integer deviceSwitchId;
+    @Column(name = "pass_road")
+    private Integer passRoad;
+    @Column(name = "road")
+    private Integer road;
+    @Column(name = "mode")
+    private String mode;
+    @Column(name = "outs")
+    private String outs;
+    @Column(name = "fixed_parameters")
+    private String fixedParameters;
+    @Column(name = "linkage_weather")
+    private Integer linkageWeather;
+    @Column(name = "linkage_device_id")
+    private Integer linkageDeviceId;
+    @Column(name = "linkage_device_type_id")
+    private Integer linkageDeviceTypeId;
+    @Column(name = "lower_limit_expect")
+    private Double lowerLimitExpect;
+    @Column(name = "lower_limit_value")
+    private Double lowerLimitValue;
+    @Column(name = "upper_limit_expect")
+    private Double upperLimitExpect;
+    @Column(name = "upper_limit_value")
+    private Double upperLimitValue;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "spare")
+    private Integer spare;
+    @Column(name = "spare1")
+    private String spare1;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Integer getDeviceSwitchId() {
+        return deviceSwitchId;
+    }
+
+    public void setDeviceSwitchId(Integer deviceSwitchId) {
+        this.deviceSwitchId = deviceSwitchId;
+    }
+
+    public Integer getPassRoad() {
+        return passRoad;
+    }
+
+    public void setPassRoad(Integer passRoad) {
+        this.passRoad = passRoad;
+    }
+
+    public Integer getRoad() {
+        return road;
+    }
+
+    public void setRoad(Integer road) {
+        this.road = road;
+    }
+
+    public String getMode() {
+        return mode;
+    }
+
+    public void setMode(String mode) {
+        this.mode = mode == null ? null : mode.trim();
+    }
+
+    public String getOuts() {
+        return outs;
+    }
+
+    public void setOuts(String outs) {
+        this.outs = outs == null ? null : outs.trim();
+    }
+
+    public String getFixedParameters() {
+        return fixedParameters;
+    }
+
+    public void setFixedParameters(String fixedParameters) {
+        this.fixedParameters = fixedParameters == null ? null : fixedParameters.trim();
+    }
+
+    public Integer getLinkageWeather() {
+        return linkageWeather;
+    }
+
+    public void setLinkageWeather(Integer linkageWeather) {
+        this.linkageWeather = linkageWeather;
+    }
+
+    public Integer getLinkageDeviceId() {
+        return linkageDeviceId;
+    }
+
+    public void setLinkageDeviceId(Integer linkageDeviceId) {
+        this.linkageDeviceId = linkageDeviceId;
+    }
+
+    public Integer getLinkageDeviceTypeId() {
+        return linkageDeviceTypeId;
+    }
+
+    public void setLinkageDeviceTypeId(Integer linkageDeviceTypeId) {
+        this.linkageDeviceTypeId = linkageDeviceTypeId;
+    }
+
+    public Double getLowerLimitExpect() {
+        return lowerLimitExpect;
+    }
+
+    public void setLowerLimitExpect(Double lowerLimitExpect) {
+        this.lowerLimitExpect = lowerLimitExpect;
+    }
+
+    public Double getLowerLimitValue() {
+        return lowerLimitValue;
+    }
+
+    public void setLowerLimitValue(Double lowerLimitValue) {
+        this.lowerLimitValue = lowerLimitValue;
+    }
+
+    public Double getUpperLimitExpect() {
+        return upperLimitExpect;
+    }
+
+    public void setUpperLimitExpect(Double upperLimitExpect) {
+        this.upperLimitExpect = upperLimitExpect;
+    }
+
+    public Double getUpperLimitValue() {
+        return upperLimitValue;
+    }
+
+    public void setUpperLimitValue(Double upperLimitValue) {
+        this.upperLimitValue = upperLimitValue;
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public Integer getSpare() {
+        return spare;
+    }
+
+    public void setSpare(Integer spare) {
+        this.spare = spare;
+    }
+
+    public String getSpare1() {
+        return spare1;
+    }
+
+    public void setSpare1(String spare1) {
+        this.spare1 = spare1 == null ? null : spare1.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceManyroad{" +
+                "id=" + id +
+                ", deviceId=" + deviceSwitchId +
+                ", road=" + road +
+                ", mode='" + mode + '\'' +
+                ", outs='" + outs + '\'' +
+                ", p='" + fixedParameters + '\'' +
+                ", weather=" + linkageWeather +
+                ", linkageId=" + linkageDeviceId +
+                ", linkageTypeId=" + linkageDeviceTypeId +
+                ", expect=" + lowerLimitExpect +
+                ", value=" + lowerLimitValue +
+                ", spare1='" + spare1 + '\'' +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceSoilMoistureNutrient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceSoilMoistureNutrient.java	(date 1575354116307)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceSoilMoistureNutrient.java	(date 1575354116307)
@@ -0,0 +1,383 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "device_soil_moisture_nutrient")
+public class DeviceSoilMoistureNutrient extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "upper_limit")
+    private Double upperLimit;
+    @Column(name = "lower_limit")
+    private Double lowerLimit;
+    @Column(name = "fixed_parameters")
+    private String fixedParameters;
+    @Column(name = "humidity_error")
+    private Double humidityError;
+    @Column(name = "alarm_value_yellow")
+    private Double alarmValueYellow;
+    @Column(name = "alarm_value_orange")
+    private Double alarmValueOrange;
+    @Column(name = "alarm_value_red")
+    private Double alarmValueRed;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "status_change_time")
+    private Date statusChangeTime;
+    @Column(name = "interval_time")
+    private Integer intervalTime;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "image_path")
+    private String imagePath;
+    @Column(name = "first_letter")
+    private String firstLetter;
+    @Column(name = "is_delete")
+    private Integer isDelete;
+    @Column(name = "has_switch")
+    private Integer hasSwitch;
+    @Column(name = "switch_status")
+    private Integer switchStatus;
+    @Column(name = "switch_status_change_time")
+    private Date switchStatusChangeTime;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+    @Column(name = "gateway_id")
+    private Integer gatewayId;
+    @Column(name = "gateway_name")
+    private String gatewayName;
+    @Column(name = "gateway_code")
+    private String gatewayCode;
+    @Column(name = "channel")
+    private Integer channel;
+    @Column(name = "access_mode")
+    private Byte accessMode;
+    @Column(name = "brand")
+    private String brand;
+    @Column(name = "model")
+    private String model;
+    @Column(name = "firmware")
+    private String firmware;
+    @Column(name = "organization")
+    private String organization;
+    @Column(name = "region")
+    private String region;
+    @Column(name = "branch")
+    private String branch;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public Double getUpperLimit() {
+        return upperLimit;
+    }
+
+    public void setUpperLimit(Double upperLimit) {
+        this.upperLimit = upperLimit;
+    }
+
+    public Double getLowerLimit() {
+        return lowerLimit;
+    }
+
+    public void setLowerLimit(Double lowerLimit) {
+        this.lowerLimit = lowerLimit;
+    }
+
+    public String getFixedParameters() {
+        return fixedParameters;
+    }
+
+    public void setFixedParameters(String fixedParameters) {
+        this.fixedParameters = fixedParameters == null ? null : fixedParameters.trim();
+    }
+
+    public Double getHumidityError() {
+        return humidityError;
+    }
+
+    public void setHumidityError(Double humidityError) {
+        this.humidityError = humidityError;
+    }
+
+    public Double getAlarmValueYellow() {
+        return alarmValueYellow;
+    }
+
+    public void setAlarmValueYellow(Double alarmValueYellow) {
+        this.alarmValueYellow = alarmValueYellow;
+    }
+
+    public Double getAlarmValueOrange() {
+        return alarmValueOrange;
+    }
+
+    public void setAlarmValueOrange(Double alarmValueOrange) {
+        this.alarmValueOrange = alarmValueOrange;
+    }
+
+    public Double getAlarmValueRed() {
+        return alarmValueRed;
+    }
+
+    public void setAlarmValueRed(Double alarmValueRed) {
+        this.alarmValueRed = alarmValueRed;
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Date getStatusChangeTime() {
+        return statusChangeTime;
+    }
+
+    public void setStatusChangeTime(Date statusChangeTime) {
+        this.statusChangeTime = statusChangeTime;
+    }
+
+    public Integer getIntervalTime() {
+        return intervalTime;
+    }
+
+    public void setIntervalTime(Integer intervalTime) {
+        this.intervalTime = intervalTime;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public String getImagePath() {
+        return imagePath;
+    }
+
+    public void setImagePath(String imagePath) {
+        this.imagePath = imagePath == null ? null : imagePath.trim();
+    }
+
+    public String getFirstLetter() {
+        return firstLetter;
+    }
+
+    public void setFirstLetter(String firstLetter) {
+        this.firstLetter = firstLetter == null ? null : firstLetter.trim();
+    }
+
+    public Integer getIsDelete() {
+        return isDelete;
+    }
+
+    public void setIsDelete(Integer isDelete) {
+        this.isDelete = isDelete;
+    }
+
+    public Integer getHasSwitch() {
+        return hasSwitch;
+    }
+
+    public void setHasSwitch(Integer hasSwitch) {
+        this.hasSwitch = hasSwitch;
+    }
+
+    public Integer getSwitchStatus() {
+        return switchStatus;
+    }
+
+    public void setSwitchStatus(Integer switchStatus) {
+        this.switchStatus = switchStatus;
+    }
+
+    public Date getSwitchStatusChangeTime() {
+        return switchStatusChangeTime;
+    }
+
+    public void setSwitchStatusChangeTime(Date switchStatusChangeTime) {
+        this.switchStatusChangeTime = switchStatusChangeTime;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public Integer getGatewayId() {
+        return gatewayId;
+    }
+
+    public void setGatewayId(Integer gatewayId) {
+        this.gatewayId = gatewayId;
+    }
+
+    public String getGatewayName() {
+        return gatewayName;
+    }
+
+    public void setGatewayName(String gatewayName) {
+        this.gatewayName = gatewayName == null ? null : gatewayName.trim();
+    }
+
+    public String getGatewayCode() {
+        return gatewayCode;
+    }
+
+    public void setGatewayCode(String gatewayCode) {
+        this.gatewayCode = gatewayCode == null ? null : gatewayCode.trim();
+    }
+
+    public Integer getChannel() {
+        return channel;
+    }
+
+    public void setChannel(Integer channel) {
+        this.channel = channel;
+    }
+
+    public Byte getAccessMode() {
+        return accessMode;
+    }
+
+    public void setAccessMode(Byte accessMode) {
+        this.accessMode = accessMode;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand == null ? null : brand.trim();
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model == null ? null : model.trim();
+    }
+
+    public String getFirmware() {
+        return firmware;
+    }
+
+    public void setFirmware(String firmware) {
+        this.firmware = firmware == null ? null : firmware.trim();
+    }
+
+    public String getOrganization() {
+        return organization;
+    }
+
+    public void setOrganization(String organization) {
+        this.organization = organization == null ? null : organization.trim();
+    }
+
+    public String getRegion() {
+        return region;
+    }
+
+    public void setRegion(String region) {
+        this.region = region == null ? null : region.trim();
+    }
+
+    public String getBranch() {
+        return branch;
+    }
+
+    public void setBranch(String branch) {
+        this.branch = branch == null ? null : branch.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceSMN{" +
+                "id=" + id +
+                ", deviceCode='" + deviceCode + '\'' +
+                ", name='" + name + '\'' +
+                ", status=" + status +
+                ", statusChangeTime=" + statusChangeTime +
+                ", isDelete=" + isDelete +
+                ", hasSwitch=" + hasSwitch +
+                ", deviceTypeId=" + deviceTypeId +
+                ", gatewayId=" + gatewayId +
+                ", gatewayCode='" + gatewayCode + '\'' +
+                ", channel=" + channel +
+                ", accessMode=" + accessMode +
+                '}';
+    }
+}
Index: src/main/readme.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/readme.txt	(date 1564192460511)
+++ src/main/readme.txt	(date 1564192460511)
@@ -0,0 +1,1 @@
+说明：该项目目的是拷贝生产数据库上面的设备信息与记录信息。防止生产环境服务器出现问题导致数据崩溃后无法找回而用。
\ No newline at end of file
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceLight.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceLight.java	(date 1575354116206)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceLight.java	(date 1575354116206)
@@ -0,0 +1,423 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "device_light")
+public class DeviceLight extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_nb_id")
+    private String deviceNbId;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "upper_limit")
+    private Double upperLimit;
+    @Column(name = "lower_limit")
+    private Double lowerLimit;
+    @Column(name = "light_error")
+    private Double lightError;
+    @Column(name = "alarm_value_yellow")
+    private Double alarmValueYellow;
+    @Column(name = "alarm_value_orange")
+    private Double alarmValueOrange;
+    @Column(name = "alarm_value_red")
+    private Double alarmValueRed;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "status_change_time")
+    private Date statusChangeTime;
+    @Column(name = "interval_time")
+    private Integer intervalTime;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "image_path")
+    private String imagePath;
+    @Column(name = "first_letter")
+    private String firstLetter;
+    @Column(name = "rate")
+    private String rate;
+    @Column(name = "alarmStatus")
+    private String alarmstatus;
+    @Column(name = "picture")
+    private String picture;
+    @Column(name = "is_delete")
+    private Integer isDelete;
+    @Column(name = "has_switch")
+    private Integer hasSwitch;
+    @Column(name = "fixed_parameters")
+    private String fixedParameters;
+    @Column(name = "switch_status")
+    private Integer switchStatus;
+    @Column(name = "switch_status_change_time")
+    private Date switchStatusChangeTime;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+    @Column(name = "gateway_id")
+    private Integer gatewayId;
+    @Column(name = "gateway_name")
+    private String gatewayName;
+    @Column(name = "gateway_code")
+    private String gatewayCode;
+    @Column(name = "channel")
+    private Integer channel;
+    @Column(name = "access_mode")
+    private Byte accessMode;
+    @Column(name = "brand")
+    private String brand;
+    @Column(name = "model")
+    private String model;
+    @Column(name = "firmware")
+    private String firmware;
+    @Column(name = "organization")
+    private String organization;
+    @Column(name = "region")
+    private String region;
+    @Column(name = "branch")
+    private String branch;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getDeviceNbId() {
+        return deviceNbId;
+    }
+
+    public void setDeviceNbId(String deviceNbId) {
+        this.deviceNbId = deviceNbId == null ? null : deviceNbId.trim();
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public Double getUpperLimit() {
+        return upperLimit;
+    }
+
+    public void setUpperLimit(Double upperLimit) {
+        this.upperLimit = upperLimit;
+    }
+
+    public Double getLowerLimit() {
+        return lowerLimit;
+    }
+
+    public void setLowerLimit(Double lowerLimit) {
+        this.lowerLimit = lowerLimit;
+    }
+
+    public Double getLightError() {
+        return lightError;
+    }
+
+    public void setLightError(Double lightError) {
+        this.lightError = lightError;
+    }
+
+    public Double getAlarmValueYellow() {
+        return alarmValueYellow;
+    }
+
+    public void setAlarmValueYellow(Double alarmValueYellow) {
+        this.alarmValueYellow = alarmValueYellow;
+    }
+
+    public Double getAlarmValueOrange() {
+        return alarmValueOrange;
+    }
+
+    public void setAlarmValueOrange(Double alarmValueOrange) {
+        this.alarmValueOrange = alarmValueOrange;
+    }
+
+    public Double getAlarmValueRed() {
+        return alarmValueRed;
+    }
+
+    public void setAlarmValueRed(Double alarmValueRed) {
+        this.alarmValueRed = alarmValueRed;
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Date getStatusChangeTime() {
+        return statusChangeTime;
+    }
+
+    public void setStatusChangeTime(Date statusChangeTime) {
+        this.statusChangeTime = statusChangeTime;
+    }
+
+    public Integer getIntervalTime() {
+        return intervalTime;
+    }
+
+    public void setIntervalTime(Integer intervalTime) {
+        this.intervalTime = intervalTime;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public String getImagePath() {
+        return imagePath;
+    }
+
+    public void setImagePath(String imagePath) {
+        this.imagePath = imagePath == null ? null : imagePath.trim();
+    }
+
+    public String getFirstLetter() {
+        return firstLetter;
+    }
+
+    public void setFirstLetter(String firstLetter) {
+        this.firstLetter = firstLetter == null ? null : firstLetter.trim();
+    }
+
+    public String getRate() {
+        return rate;
+    }
+
+    public void setRate(String rate) {
+        this.rate = rate == null ? null : rate.trim();
+    }
+
+    public String getAlarmstatus() {
+        return alarmstatus;
+    }
+
+    public void setAlarmstatus(String alarmstatus) {
+        this.alarmstatus = alarmstatus == null ? null : alarmstatus.trim();
+    }
+
+    public String getPicture() {
+        return picture;
+    }
+
+    public void setPicture(String picture) {
+        this.picture = picture == null ? null : picture.trim();
+    }
+
+    public Integer getIsDelete() {
+        return isDelete;
+    }
+
+    public void setIsDelete(Integer isDelete) {
+        this.isDelete = isDelete;
+    }
+
+    public Integer getHasSwitch() {
+        return hasSwitch;
+    }
+
+    public void setHasSwitch(Integer hasSwitch) {
+        this.hasSwitch = hasSwitch;
+    }
+
+    public String getFixedParameters() {
+        return fixedParameters;
+    }
+
+    public void setFixedParameters(String fixedParameters) {
+        this.fixedParameters = fixedParameters == null ? null : fixedParameters.trim();
+    }
+
+    public Integer getSwitchStatus() {
+        return switchStatus;
+    }
+
+    public void setSwitchStatus(Integer switchStatus) {
+        this.switchStatus = switchStatus;
+    }
+
+    public Date getSwitchStatusChangeTime() {
+        return switchStatusChangeTime;
+    }
+
+    public void setSwitchStatusChangeTime(Date switchStatusChangeTime) {
+        this.switchStatusChangeTime = switchStatusChangeTime;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public Integer getGatewayId() {
+        return gatewayId;
+    }
+
+    public void setGatewayId(Integer gatewayId) {
+        this.gatewayId = gatewayId;
+    }
+
+    public String getGatewayName() {
+        return gatewayName;
+    }
+
+    public void setGatewayName(String gatewayName) {
+        this.gatewayName = gatewayName == null ? null : gatewayName.trim();
+    }
+
+    public String getGatewayCode() {
+        return gatewayCode;
+    }
+
+    public void setGatewayCode(String gatewayCode) {
+        this.gatewayCode = gatewayCode == null ? null : gatewayCode.trim();
+    }
+
+    public Integer getChannel() {
+        return channel;
+    }
+
+    public void setChannel(Integer channel) {
+        this.channel = channel;
+    }
+
+    public Byte getAccessMode() {
+        return accessMode;
+    }
+
+    public void setAccessMode(Byte accessMode) {
+        this.accessMode = accessMode;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand == null ? null : brand.trim();
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model == null ? null : model.trim();
+    }
+
+    public String getFirmware() {
+        return firmware;
+    }
+
+    public void setFirmware(String firmware) {
+        this.firmware = firmware == null ? null : firmware.trim();
+    }
+
+    public String getOrganization() {
+        return organization;
+    }
+
+    public void setOrganization(String organization) {
+        this.organization = organization == null ? null : organization.trim();
+    }
+
+    public String getRegion() {
+        return region;
+    }
+
+    public void setRegion(String region) {
+        this.region = region == null ? null : region.trim();
+    }
+
+    public String getBranch() {
+        return branch;
+    }
+
+    public void setBranch(String branch) {
+        this.branch = branch == null ? null : branch.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceLight{" +
+                "id=" + id +
+                ", deviceNbId='" + deviceNbId + '\'' +
+                ", deviceCode='" + deviceCode + '\'' +
+                ", name='" + name + '\'' +
+                ", status=" + status +
+                ", statusChangeTime=" + statusChangeTime +
+                ", isDelete=" + isDelete +
+                ", deviceTypeId=" + deviceTypeId +
+                ", gatewayId=" + gatewayId +
+                ", gatewayCode='" + gatewayCode + '\'' +
+                ", channel=" + channel +
+                ", accessMode=" + accessMode +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/Gateway.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/Gateway.java	(date 1575354116426)
+++ src/main/java/datasuorcetwo/datasource/entity/Gateway.java	(date 1575354116426)
@@ -0,0 +1,172 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "gateway")
+public class Gateway extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "sn")
+    private String sn;
+    @Column(name = "gateway_id")
+    private Integer gatewayId;
+    @Column(name = "gateway_code")
+    private String gatewayCode;
+    @Column(name = "type")
+    private Integer type;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "model")
+    private Integer model;
+    @Column(name = "brand")
+    private String brand;
+    @Column(name = "remake")
+    private String remake;
+    @Column(name = "max_delay")
+    private Integer maxDelay;
+    @Column(name = "active_time")
+    private Date activeTime;
+    @Column(name = "offline_time")
+    private Date offlineTime;
+    @Column(name = "lora_sensor_offline_time")
+    private Integer loraSensorOfflineTime;
+    @Column(name = "port")
+    private Integer port;
+
+    public Integer getPort() {
+        return port;
+    }
+
+    public void setPort(Integer port) {
+        this.port = port;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getSn() {
+        return sn;
+    }
+
+    public void setSn(String sn) {
+        this.sn = sn == null ? null : sn.trim();
+    }
+
+    public Integer getGatewayId() {
+        return gatewayId;
+    }
+
+    public void setGatewayId(Integer gatewayId) {
+        this.gatewayId = gatewayId;
+    }
+
+    public String getGatewayCode() {
+        return gatewayCode;
+    }
+
+    public void setGatewayCode(String gatewayCode) {
+        this.gatewayCode = gatewayCode == null ? null : gatewayCode.trim();
+    }
+
+    public Integer getType() {
+        return type;
+    }
+
+    public void setType(Integer type) {
+        this.type = type;
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Integer getModel() {
+        return model;
+    }
+
+    public void setModel(Integer model) {
+        this.model = model;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand == null ? null : brand.trim();
+    }
+
+    public String getRemake() {
+        return remake;
+    }
+
+    public void setRemake(String remake) {
+        this.remake = remake == null ? null : remake.trim();
+    }
+
+    public Integer getMaxDelay() {
+        return maxDelay;
+    }
+
+    public void setMaxDelay(Integer maxDelay) {
+        this.maxDelay = maxDelay;
+    }
+
+    public Date getActiveTime() {
+        return activeTime;
+    }
+
+    public void setActiveTime(Date activeTime) {
+        this.activeTime = activeTime;
+    }
+
+    public Date getOfflineTime() {
+        return offlineTime;
+    }
+
+    public void setOfflineTime(Date offlineTime) {
+        this.offlineTime = offlineTime;
+    }
+
+    public Integer getLoraSensorOfflineTime() {
+        return loraSensorOfflineTime;
+    }
+
+    public void setLoraSensorOfflineTime(Integer loraSensorOfflineTime) {
+        this.loraSensorOfflineTime = loraSensorOfflineTime;
+    }
+
+    @Override
+    public String toString() {
+        return "Gateway{" +
+                "id=" + id +
+                ", sn='" + sn + '\'' +
+                ", gatewayId=" + gatewayId +
+                ", gatewayCode='" + gatewayCode + '\'' +
+                ", type=" + type +
+                ", status=" + status +
+                ", brand='" + brand + '\'' +
+                ", remake='" + remake + '\'' +
+                ", activeTime=" + activeTime +
+                ", offlineTime=" + offlineTime +
+                ", port=" + port +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/OrgUserServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/OrgUserServerProduct.java	(date 1575350476614)
+++ src/main/java/datasuorcetwo/datasource/server/OrgUserServerProduct.java	(date 1575350476614)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.OrgUser;
+import datasuorcetwo.datasource.repositoryProduct.OrgUserRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class OrgUserServerProduct implements BaseServerInte<OrgUser> {
+    @Autowired
+    OrgUserRepositoryProduct orgUserRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return orgUserRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<OrgUser> getThanMaxId(Integer maxId) {
+        return orgUserRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<OrgUser> getBetweenData(Integer beforeId, Integer afterId) {
+        return orgUserRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<OrgUser> orgUsers) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<OrgUser> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceWindRainfall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceWindRainfall.java	(date 1575354116366)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceWindRainfall.java	(date 1575354116366)
@@ -0,0 +1,694 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "device_wind_rainfall")
+public class DeviceWindRainfall extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_nb_id")
+    private String deviceNbId;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "temp_error")
+    private Double tempError;
+    @Column(name = "fixed_parameters")
+    private String fixedParameters;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "status_change_time")
+    private Date statusChangeTime;
+    @Column(name = "interval_time")
+    private Integer intervalTime;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "image_path")
+    private String imagePath;
+    @Column(name = "first_letter")
+    private String firstLetter;
+    @Column(name = "is_delete")
+    private Integer isDelete;
+    @Column(name = "has_switch")
+    private Integer hasSwitch;
+    @Column(name = "switch_status")
+    private Integer switchStatus;
+    @Column(name = "switch_status_change_time")
+    private Date switchStatusChangeTime;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+    @Column(name = "gateway_id")
+    private Integer gatewayId;
+    @Column(name = "gateway_name")
+    private String gatewayName;
+    @Column(name = "gateway_code")
+    private String gatewayCode;
+    @Column(name = "channel")
+    private Integer channel;
+    @Column(name = "access_mode")
+    private Byte accessMode;
+    @Column(name = "brand")
+    private String brand;
+    @Column(name = "model")
+    private String model;
+    @Column(name = "firmware")
+    private String firmware;
+    @Column(name = "organization")
+    private String organization;
+    @Column(name = "region")
+    private String region;
+    @Column(name = "branch")
+    private String branch;
+    @Column(name = "wind_upper_limit")
+    private Double windUpperLimit;
+    @Column(name = "wind_lower_limit")
+    private Double windLowerLimit;
+    @Column(name = "wind_alarm_value_yellow")
+    private Double windAlarmValueYellow;
+    @Column(name = "wind_alarm_value_orange")
+    private Double windAlarmValueOrange;
+    @Column(name = "wind_alarm_value_red")
+    private Double windAlarmValueRed;
+    @Column(name = "humidity_uplimit")
+    private Double humidityUplimit;
+    @Column(name = "humidity_lowlimit")
+    private Double humidityLowlimit;
+    @Column(name = "humidity_red")
+    private Double humidityRed;
+    @Column(name = "humidity_yellow")
+    private Double humidityYellow;
+    @Column(name = "humidity_orange")
+    private Double humidityOrange;
+    @Column(name = "temperature_uplimit")
+    private Double temperatureUplimit;
+    @Column(name = "temperature_lowlimit")
+    private Double temperatureLowlimit;
+    @Column(name = "temperature_red")
+    private Double temperatureRed;
+    @Column(name = "temperature_orange")
+    private Double temperatureOrange;
+    @Column(name = "temperature_yellow")
+    private Double temperatureYellow;
+    @Column(name = "light_uplimit")
+    private Double lightUplimit;
+    @Column(name = "light_lowlimit")
+    private Double lightLowlimit;
+    @Column(name = "light_red")
+    private Double lightRed;
+    @Column(name = "light_orange")
+    private Double lightOrange;
+    @Column(name = "light_yellow")
+    private Double lightYellow;
+    @Column(name = "rain_uplimit")
+    private Double rainUplimit;
+    @Column(name = "rain_lowlimit")
+    private Double rainLowlimit;
+    @Column(name = "rain_red")
+    private Double rainRed;
+    @Column(name = "rain_yellow")
+    private Double rainYellow;
+    @Column(name = "rain_orange")
+    private Double rainOrange;
+    @Column(name = "battery_lowlimit")
+    private Double batteryLowlimit;
+    @Column(name = "battery_uplimit")
+    private Double batteryUplimit;
+    @Column(name = "battery_red")
+    private Double batteryRed;
+    @Column(name = "battery_orange")
+    private Double batteryOrange;
+    @Column(name = "battery_yellow")
+    private Double batteryYellow;
+    @Column(name = "pressure_uplimit")
+    private Double pressureUplimit;
+    @Column(name = "pressure_lowlimit")
+    private Double pressureLowlimit;
+    @Column(name = "pressure_red")
+    private Double pressureRed;
+    @Column(name = "pressure_orange")
+    private Double pressureOrange;
+    @Column(name = "pressure_yellow")
+    private Double pressureYellow;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getDeviceNbId() {
+        return deviceNbId;
+    }
+
+    public void setDeviceNbId(String deviceNbId) {
+        this.deviceNbId = deviceNbId;
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public Double getTempError() {
+        return tempError;
+    }
+
+    public void setTempError(Double tempError) {
+        this.tempError = tempError;
+    }
+
+    public String getFixedParameters() {
+        return fixedParameters;
+    }
+
+    public void setFixedParameters(String fixedParameters) {
+        this.fixedParameters = fixedParameters == null ? null : fixedParameters.trim();
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Date getStatusChangeTime() {
+        return statusChangeTime;
+    }
+
+    public void setStatusChangeTime(Date statusChangeTime) {
+        this.statusChangeTime = statusChangeTime;
+    }
+
+    public Integer getIntervalTime() {
+        return intervalTime;
+    }
+
+    public void setIntervalTime(Integer intervalTime) {
+        this.intervalTime = intervalTime;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public String getImagePath() {
+        return imagePath;
+    }
+
+    public void setImagePath(String imagePath) {
+        this.imagePath = imagePath == null ? null : imagePath.trim();
+    }
+
+    public String getFirstLetter() {
+        return firstLetter;
+    }
+
+    public void setFirstLetter(String firstLetter) {
+        this.firstLetter = firstLetter == null ? null : firstLetter.trim();
+    }
+
+    public Integer getIsDelete() {
+        return isDelete;
+    }
+
+    public void setIsDelete(Integer isDelete) {
+        this.isDelete = isDelete;
+    }
+
+    public Integer getHasSwitch() {
+        return hasSwitch;
+    }
+
+    public void setHasSwitch(Integer hasSwitch) {
+        this.hasSwitch = hasSwitch;
+    }
+
+    public Integer getSwitchStatus() {
+        return switchStatus;
+    }
+
+    public void setSwitchStatus(Integer switchStatus) {
+        this.switchStatus = switchStatus;
+    }
+
+    public Date getSwitchStatusChangeTime() {
+        return switchStatusChangeTime;
+    }
+
+    public void setSwitchStatusChangeTime(Date switchStatusChangeTime) {
+        this.switchStatusChangeTime = switchStatusChangeTime;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public Integer getGatewayId() {
+        return gatewayId;
+    }
+
+    public void setGatewayId(Integer gatewayId) {
+        this.gatewayId = gatewayId;
+    }
+
+    public String getGatewayName() {
+        return gatewayName;
+    }
+
+    public void setGatewayName(String gatewayName) {
+        this.gatewayName = gatewayName == null ? null : gatewayName.trim();
+    }
+
+    public String getGatewayCode() {
+        return gatewayCode;
+    }
+
+    public void setGatewayCode(String gatewayCode) {
+        this.gatewayCode = gatewayCode == null ? null : gatewayCode.trim();
+    }
+
+    public Integer getChannel() {
+        return channel;
+    }
+
+    public void setChannel(Integer channel) {
+        this.channel = channel;
+    }
+
+    public Byte getAccessMode() {
+        return accessMode;
+    }
+
+    public void setAccessMode(Byte accessMode) {
+        this.accessMode = accessMode;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand == null ? null : brand.trim();
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model == null ? null : model.trim();
+    }
+
+    public String getFirmware() {
+        return firmware;
+    }
+
+    public void setFirmware(String firmware) {
+        this.firmware = firmware == null ? null : firmware.trim();
+    }
+
+    public String getOrganization() {
+        return organization;
+    }
+
+    public void setOrganization(String organization) {
+        this.organization = organization == null ? null : organization.trim();
+    }
+
+    public String getRegion() {
+        return region;
+    }
+
+    public void setRegion(String region) {
+        this.region = region == null ? null : region.trim();
+    }
+
+    public String getBranch() {
+        return branch;
+    }
+
+    public void setBranch(String branch) {
+        this.branch = branch == null ? null : branch.trim();
+    }
+
+    public Double getWindUpperLimit() {
+        return windUpperLimit;
+    }
+
+    public void setWindUpperLimit(Double windUpperLimit) {
+        this.windUpperLimit = windUpperLimit;
+    }
+
+    public Double getWindLowerLimit() {
+        return windLowerLimit;
+    }
+
+    public void setWindLowerLimit(Double windLowerLimit) {
+        this.windLowerLimit = windLowerLimit;
+    }
+
+    public Double getWindAlarmValueYellow() {
+        return windAlarmValueYellow;
+    }
+
+    public void setWindAlarmValueYellow(Double windAlarmValueYellow) {
+        this.windAlarmValueYellow = windAlarmValueYellow;
+    }
+
+    public Double getWindAlarmValueOrange() {
+        return windAlarmValueOrange;
+    }
+
+    public void setWindAlarmValueOrange(Double windAlarmValueOrange) {
+        this.windAlarmValueOrange = windAlarmValueOrange;
+    }
+
+    public Double getWindAlarmValueRed() {
+        return windAlarmValueRed;
+    }
+
+    public void setWindAlarmValueRed(Double windAlarmValueRed) {
+        this.windAlarmValueRed = windAlarmValueRed;
+    }
+
+    public Double getHumidityUplimit() {
+        return humidityUplimit;
+    }
+
+    public void setHumidityUplimit(Double humidityUplimit) {
+        this.humidityUplimit = humidityUplimit;
+    }
+
+    public Double getHumidityLowlimit() {
+        return humidityLowlimit;
+    }
+
+    public void setHumidityLowlimit(Double humidityLowlimit) {
+        this.humidityLowlimit = humidityLowlimit;
+    }
+
+    public Double getHumidityRed() {
+        return humidityRed;
+    }
+
+    public void setHumidityRed(Double humidityRed) {
+        this.humidityRed = humidityRed;
+    }
+
+    public Double getHumidityYellow() {
+        return humidityYellow;
+    }
+
+    public void setHumidityYellow(Double humidityYellow) {
+        this.humidityYellow = humidityYellow;
+    }
+
+    public Double getHumidityOrange() {
+        return humidityOrange;
+    }
+
+    public void setHumidityOrange(Double humidityOrange) {
+        this.humidityOrange = humidityOrange;
+    }
+
+    public Double getTemperatureUplimit() {
+        return temperatureUplimit;
+    }
+
+    public void setTemperatureUplimit(Double temperatureUplimit) {
+        this.temperatureUplimit = temperatureUplimit;
+    }
+
+    public Double getTemperatureLowlimit() {
+        return temperatureLowlimit;
+    }
+
+    public void setTemperatureLowlimit(Double temperatureLowlimit) {
+        this.temperatureLowlimit = temperatureLowlimit;
+    }
+
+    public Double getTemperatureRed() {
+        return temperatureRed;
+    }
+
+    public void setTemperatureRed(Double temperatureRed) {
+        this.temperatureRed = temperatureRed;
+    }
+
+    public Double getTemperatureOrange() {
+        return temperatureOrange;
+    }
+
+    public void setTemperatureOrange(Double temperatureOrange) {
+        this.temperatureOrange = temperatureOrange;
+    }
+
+    public Double getTemperatureYellow() {
+        return temperatureYellow;
+    }
+
+    public void setTemperatureYellow(Double temperatureYellow) {
+        this.temperatureYellow = temperatureYellow;
+    }
+
+    public Double getLightUplimit() {
+        return lightUplimit;
+    }
+
+    public void setLightUplimit(Double lightUplimit) {
+        this.lightUplimit = lightUplimit;
+    }
+
+    public Double getLightLowlimit() {
+        return lightLowlimit;
+    }
+
+    public void setLightLowlimit(Double lightLowlimit) {
+        this.lightLowlimit = lightLowlimit;
+    }
+
+    public Double getLightRed() {
+        return lightRed;
+    }
+
+    public void setLightRed(Double lightRed) {
+        this.lightRed = lightRed;
+    }
+
+    public Double getLightOrange() {
+        return lightOrange;
+    }
+
+    public void setLightOrange(Double lightOrange) {
+        this.lightOrange = lightOrange;
+    }
+
+    public Double getLightYellow() {
+        return lightYellow;
+    }
+
+    public void setLightYellow(Double lightYellow) {
+        this.lightYellow = lightYellow;
+    }
+
+    public Double getRainUplimit() {
+        return rainUplimit;
+    }
+
+    public void setRainUplimit(Double rainUplimit) {
+        this.rainUplimit = rainUplimit;
+    }
+
+    public Double getRainLowlimit() {
+        return rainLowlimit;
+    }
+
+    public void setRainLowlimit(Double rainLowlimit) {
+        this.rainLowlimit = rainLowlimit;
+    }
+
+    public Double getRainRed() {
+        return rainRed;
+    }
+
+    public void setRainRed(Double rainRed) {
+        this.rainRed = rainRed;
+    }
+
+    public Double getRainYellow() {
+        return rainYellow;
+    }
+
+    public void setRainYellow(Double rainYellow) {
+        this.rainYellow = rainYellow;
+    }
+
+    public Double getRainOrange() {
+        return rainOrange;
+    }
+
+    public void setRainOrange(Double rainOrange) {
+        this.rainOrange = rainOrange;
+    }
+
+    public Double getBatteryLowlimit() {
+        return batteryLowlimit;
+    }
+
+    public void setBatteryLowlimit(Double batteryLowlimit) {
+        this.batteryLowlimit = batteryLowlimit;
+    }
+
+    public Double getBatteryUplimit() {
+        return batteryUplimit;
+    }
+
+    public void setBatteryUplimit(Double batteryUplimit) {
+        this.batteryUplimit = batteryUplimit;
+    }
+
+    public Double getBatteryRed() {
+        return batteryRed;
+    }
+
+    public void setBatteryRed(Double batteryRed) {
+        this.batteryRed = batteryRed;
+    }
+
+    public Double getBatteryOrange() {
+        return batteryOrange;
+    }
+
+    public void setBatteryOrange(Double batteryOrange) {
+        this.batteryOrange = batteryOrange;
+    }
+
+    public Double getBatteryYellow() {
+        return batteryYellow;
+    }
+
+    public void setBatteryYellow(Double batteryYellow) {
+        this.batteryYellow = batteryYellow;
+    }
+
+    public Double getPressureUplimit() {
+        return pressureUplimit;
+    }
+
+    public void setPressureUplimit(Double pressureUplimit) {
+        this.pressureUplimit = pressureUplimit;
+    }
+
+    public Double getPressureLowlimit() {
+        return pressureLowlimit;
+    }
+
+    public void setPressureLowlimit(Double pressureLowlimit) {
+        this.pressureLowlimit = pressureLowlimit;
+    }
+
+    public Double getPressureRed() {
+        return pressureRed;
+    }
+
+    public void setPressureRed(Double pressureRed) {
+        this.pressureRed = pressureRed;
+    }
+
+    public Double getPressureOrange() {
+        return pressureOrange;
+    }
+
+    public void setPressureOrange(Double pressureOrange) {
+        this.pressureOrange = pressureOrange;
+    }
+
+    public Double getPressureYellow() {
+        return pressureYellow;
+    }
+
+    public void setPressureYellow(Double pressureYellow) {
+        this.pressureYellow = pressureYellow;
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceWindRainfall{" +
+                "id=" + id +
+                ", deviceNbId='" + deviceNbId + '\'' +
+                ", deviceCode='" + deviceCode + '\'' +
+                ", name='" + name + '\'' +
+                ", status=" + status +
+                ", statusChangeTime=" + statusChangeTime +
+                ", isDelete=" + isDelete +
+                ", hasSwitch=" + hasSwitch +
+                ", deviceTypeId=" + deviceTypeId +
+                ", gatewayId=" + gatewayId +
+                ", gatewayCode='" + gatewayCode + '\'' +
+                ", channel=" + channel +
+                ", accessMode=" + accessMode +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/UserServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/UserServerProduct.java	(date 1575350476928)
+++ src/main/java/datasuorcetwo/datasource/server/UserServerProduct.java	(date 1575350476928)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.User;
+import datasuorcetwo.datasource.repositoryProduct.UserRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class UserServerProduct implements BaseServerInte<User> {
+    @Autowired
+    UserRepositoryProduct userRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return userRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<User> getThanMaxId(Integer maxId) {
+        return userRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<User> getBetweenData(Integer beforeId, Integer afterId) {
+        return userRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<User> users) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<User> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceVideo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceVideo.java	(date 1575353743148)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceVideo.java	(date 1575353743148)
@@ -0,0 +1,239 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "device_video")
+public class DeviceVideo extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "password")
+    private String password;
+    @Column(name = "status_change_time")
+    private Date statusChangeTime;
+    @Column(name = "fixed_parameters")
+    private String fixedParameters;
+    @Column(name = "interval_time")
+    private Integer intervalTime;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "transfer_rate")
+    private Double transferRate;
+    @Column(name = "image_path")
+    private String imagePath;
+    @Column(name = "first_letter")
+    private String firstLetter;
+    @Column(name = "is_delete")
+    private Integer isDelete;
+    @Column(name = "has_switch")
+    private Integer hasSwitch;
+    @Column(name = "is_ptz_control")
+    private Integer isPtzControl;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+    @Column(name = "live_url")
+    private String liveUrl;
+    @Column(name = "ezopen_url")
+    private String ezopenUrl;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password == null ? null : password.trim();
+    }
+
+    public Date getStatusChangeTime() {
+        return statusChangeTime;
+    }
+
+    public void setStatusChangeTime(Date statusChangeTime) {
+        this.statusChangeTime = statusChangeTime;
+    }
+
+    public String getFixedParameters() {
+        return fixedParameters;
+    }
+
+    public void setFixedParameters(String fixedParameters) {
+        this.fixedParameters = fixedParameters == null ? null : fixedParameters.trim();
+    }
+
+    public Integer getIntervalTime() {
+        return intervalTime;
+    }
+
+    public void setIntervalTime(Integer intervalTime) {
+        this.intervalTime = intervalTime;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public Double getTransferRate() {
+        return transferRate;
+    }
+
+    public void setTransferRate(Double transferRate) {
+        this.transferRate = transferRate;
+    }
+
+    public String getImagePath() {
+        return imagePath;
+    }
+
+    public void setImagePath(String imagePath) {
+        this.imagePath = imagePath == null ? null : imagePath.trim();
+    }
+
+    public String getFirstLetter() {
+        return firstLetter;
+    }
+
+    public void setFirstLetter(String firstLetter) {
+        this.firstLetter = firstLetter == null ? null : firstLetter.trim();
+    }
+
+    public Integer getIsDelete() {
+        return isDelete;
+    }
+
+    public void setIsDelete(Integer isDelete) {
+        this.isDelete = isDelete;
+    }
+
+    public Integer getHasSwitch() {
+        return hasSwitch;
+    }
+
+    public void setHasSwitch(Integer hasSwitch) {
+        this.hasSwitch = hasSwitch;
+    }
+
+    public Integer getIsPtzControl() {
+        return isPtzControl;
+    }
+
+    public void setIsPtzControl(Integer isPtzControl) {
+        this.isPtzControl = isPtzControl;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public String getLiveUrl() {
+        return liveUrl;
+    }
+
+    public void setLiveUrl(String liveUrl) {
+        this.liveUrl = liveUrl == null ? null : liveUrl.trim();
+    }
+
+    public String getEzopenUrl() {
+        return ezopenUrl;
+    }
+
+    public void setEzopenUrl(String ezopenUrl) {
+        this.ezopenUrl = ezopenUrl == null ? null : ezopenUrl.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceVideo{" +
+                "id=" + id +
+                ", deviceCode='" + deviceCode + '\'' +
+                ", address='" + address + '\'' +
+                ", name='" + name + '\'' +
+                ", isDelete=" + isDelete +
+                ", hasSwitch=" + hasSwitch +
+                ", liveUrl='" + liveUrl + '\'' +
+                ", ezopenUrl='" + ezopenUrl + '\'' +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceType.java	(date 1575007890899)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceType.java	(date 1575007890899)
@@ -0,0 +1,64 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+
+@Entity
+@Table(name = "device_type")
+public class DeviceType extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "image_path")
+    private String imagePath;
+    @Column(name = "data_unit")
+    private String dataUnit;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public String getImagePath() {
+        return imagePath;
+    }
+
+    public void setImagePath(String imagePath) {
+        this.imagePath = imagePath == null ? null : imagePath.trim();
+    }
+
+    public String getDataUnit() {
+        return dataUnit;
+    }
+
+    public void setDataUnit(String dataUnit) {
+        this.dataUnit = dataUnit == null ? null : dataUnit.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceType{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", imagePath='" + imagePath + '\'' +
+                ", dataUnit='" + dataUnit + '\'' +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/HistoryBrowseServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/HistoryBrowseServerLocal.java	(date 1575007026806)
+++ src/main/java/datasuorcetwo/datasource/server/HistoryBrowseServerLocal.java	(date 1575007026806)
@@ -0,0 +1,38 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.HistoryBrowse;
+import datasuorcetwo.datasource.repositoryLocal.HistoryBrowseRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class HistoryBrowseServerLocal implements DataBaseServerInte<HistoryBrowse> {
+    @Autowired
+    HistoryBrowseRepositoryLocal historyBrowseRepositoryLocal;
+
+    @Override
+    public Integer getMaxId() {
+        return historyBrowseRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return null;
+    }
+
+    @Override
+    public List<HistoryBrowse> get1wData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<HistoryBrowse> historyBrowses) {
+        if(!historyBrowses.isEmpty()){
+            historyBrowseRepositoryLocal.saveAll(historyBrowses);
+        }
+        return 1;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/LinkageDevice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/LinkageDevice.java	(date 1575354132578)
+++ src/main/java/datasuorcetwo/datasource/entity/LinkageDevice.java	(date 1575354132578)
@@ -0,0 +1,158 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+
+@Entity
+@Table(name = "linkage_device")
+public class LinkageDevice extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_switch_id")
+    private Integer deviceSwitchId;
+    @Column(name = "road")
+    private Integer road;
+    @Column(name = "linkage_weather")
+    private Integer linkageWeather;
+    @Column(name = "linkage_device_id")
+    private Integer linkageDeviceId;
+    @Column(name = "linkage_device_type_id")
+    private Integer linkageDeviceTypeId;
+    @Column(name = "lower_limit_expect")
+    private Double lowerLimitExpect;
+    @Column(name = "lower_limit_value")
+    private Double lowerLimitValue;
+    @Column(name = "upper_limit_expect")
+    private Double upperLimitExpect;
+    @Column(name = "upper_limit_value")
+    private Double upperLimitValue;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "spare")
+    private Integer spare;
+    @Column(name = "spare1")
+    private String spare1;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Integer getDeviceSwitchId() {
+        return deviceSwitchId;
+    }
+
+    public void setDeviceSwitchId(Integer deviceSwitchId) {
+        this.deviceSwitchId = deviceSwitchId;
+    }
+
+    public Integer getRoad() {
+        return road;
+    }
+
+    public void setRoad(Integer road) {
+        this.road = road;
+    }
+
+    public Integer getLinkageWeather() {
+        return linkageWeather;
+    }
+
+    public void setLinkageWeather(Integer linkageWeather) {
+        this.linkageWeather = linkageWeather;
+    }
+
+    public Integer getLinkageDeviceId() {
+        return linkageDeviceId;
+    }
+
+    public void setLinkageDeviceId(Integer linkageDeviceId) {
+        this.linkageDeviceId = linkageDeviceId;
+    }
+
+    public Integer getLinkageDeviceTypeId() {
+        return linkageDeviceTypeId;
+    }
+
+    public void setLinkageDeviceTypeId(Integer linkageDeviceTypeId) {
+        this.linkageDeviceTypeId = linkageDeviceTypeId;
+    }
+
+    public Double getLowerLimitExpect() {
+        return lowerLimitExpect;
+    }
+
+    public void setLowerLimitExpect(Double lowerLimitExpect) {
+        this.lowerLimitExpect = lowerLimitExpect;
+    }
+
+    public Double getLowerLimitValue() {
+        return lowerLimitValue;
+    }
+
+    public void setLowerLimitValue(Double lowerLimitValue) {
+        this.lowerLimitValue = lowerLimitValue;
+    }
+
+    public Double getUpperLimitExpect() {
+        return upperLimitExpect;
+    }
+
+    public void setUpperLimitExpect(Double upperLimitExpect) {
+        this.upperLimitExpect = upperLimitExpect;
+    }
+
+    public Double getUpperLimitValue() {
+        return upperLimitValue;
+    }
+
+    public void setUpperLimitValue(Double upperLimitValue) {
+        this.upperLimitValue = upperLimitValue;
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public Integer getSpare() {
+        return spare;
+    }
+
+    public void setSpare(Integer spare) {
+        this.spare = spare;
+    }
+
+    public String getSpare1() {
+        return spare1;
+    }
+
+    public void setSpare1(String spare1) {
+        this.spare1 = spare1 == null ? null : spare1.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "LinkageDevice{" +
+                "id=" + id +
+                ", deviceSwitchId=" + deviceSwitchId +
+                ", road=" + road +
+                ", linkageWeather=" + linkageWeather +
+                ", linkageDeviceId=" + linkageDeviceId +
+                ", linkageDeviceTypeId=" + linkageDeviceTypeId +
+                ", lowerLimitExpect=" + lowerLimitExpect +
+                ", lowerLimitValue=" + lowerLimitValue +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/GroupDeviceServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/GroupDeviceServerProduct.java	(date 1575350136929)
+++ src/main/java/datasuorcetwo/datasource/server/GroupDeviceServerProduct.java	(date 1575350136929)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.GroupDevice;
+import datasuorcetwo.datasource.repositoryProduct.GroupDeviceRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class GroupDeviceServerProduct implements BaseServerInte<GroupDevice> {
+    @Autowired
+    GroupDeviceRepositoryProduct groupDeviceRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return groupDeviceRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<GroupDevice> getThanMaxId(Integer maxId) {
+        return groupDeviceRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<GroupDevice> getBetweenData(Integer beforeId, Integer afterId) {
+        return groupDeviceRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<GroupDevice> groupDevices) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<GroupDevice> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/HistoryBrowse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/HistoryBrowse.java	(date 1563331978053)
+++ src/main/java/datasuorcetwo/datasource/entity/HistoryBrowse.java	(date 1563331978053)
@@ -0,0 +1,75 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "history_browse")
+public class HistoryBrowse extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "browse_time")
+    private Date browseTime;
+    @Column(name = "device_id")
+    private Integer deviceId;
+    @Column(name = "user_id")
+    private Integer userId;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public Date getBrowseTime() {
+        return browseTime;
+    }
+
+    public void setBrowseTime(Date browseTime) {
+        this.browseTime = browseTime;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+
+    public Integer getUserId() {
+        return userId;
+    }
+
+    public void setUserId(Integer userId) {
+        this.userId = userId;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/GroupServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/GroupServerProduct.java	(date 1575350137214)
+++ src/main/java/datasuorcetwo/datasource/server/GroupServerProduct.java	(date 1575350137214)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.Group;
+import datasuorcetwo.datasource.repositoryProduct.GroupRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class GroupServerProduct implements BaseServerInte<Group> {
+    @Autowired
+    GroupRepositoryProduct groupRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return groupRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<Group> getThanMaxId(Integer maxId) {
+        return groupRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<Group> getBetweenData(Integer beforeId, Integer afterId) {
+        return groupRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<Group> groups) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<Group> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/GroupDevice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/GroupDevice.java	(date 1575007891959)
+++ src/main/java/datasuorcetwo/datasource/entity/GroupDevice.java	(date 1575007891959)
@@ -0,0 +1,64 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+
+@Entity
+@Table(name = "group_device")
+public class GroupDevice extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "group_id")
+    private Integer groupId;
+    @Column(name = "device_id")
+    private Integer deviceId;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Integer getGroupId() {
+        return groupId;
+    }
+
+    public void setGroupId(Integer groupId) {
+        this.groupId = groupId;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    @Override
+    public String toString() {
+        return "GroupDevice{" +
+                "id=" + id +
+                ", groupId=" + groupId +
+                ", deviceId=" + deviceId +
+                ", deviceTypeId=" + deviceTypeId +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/LinkageDeviceServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/LinkageDeviceServerProduct.java	(date 1575350137038)
+++ src/main/java/datasuorcetwo/datasource/server/LinkageDeviceServerProduct.java	(date 1575350137038)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.LinkageDevice;
+import datasuorcetwo.datasource.repositoryProduct.LinkageDeviceRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class LinkageDeviceServerProduct implements BaseServerInte<LinkageDevice> {
+    @Autowired
+    LinkageDeviceRepositoryProduct linkageDeviceRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return linkageDeviceRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<LinkageDevice> getThanMaxId(Integer maxId) {
+        return linkageDeviceRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<LinkageDevice> getBetweenData(Integer beforeId, Integer afterId) {
+        return linkageDeviceRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<LinkageDevice> linkageDevices) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<LinkageDevice> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/Group.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/Group.java	(date 1575007891028)
+++ src/main/java/datasuorcetwo/datasource/entity/Group.java	(date 1575007891028)
@@ -0,0 +1,108 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+
+@Entity
+@Table(name = "`group`")
+public class Group extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "group_id")
+    private Integer id;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "parent_id")
+    private Integer parentId;
+    @Column(name = "remark")
+    private String remark;
+    @Column(name = "org_id")
+    private Integer orgId;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "address")
+    private String address;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public Integer getParentId() {
+        return parentId;
+    }
+
+    public void setParentId(Integer parentId) {
+        this.parentId = parentId;
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    public Integer getOrgId() {
+        return orgId;
+    }
+
+    public void setOrgId(Integer orgId) {
+        this.orgId = orgId;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "Group{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", parentId=" + parentId +
+                ", remark='" + remark + '\'' +
+                ", orgId=" + orgId +
+                ", longitude=" + longitude +
+                ", latitude=" + latitude +
+                ", address='" + address + '\'' +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/OrgServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/OrgServerProduct.java	(date 1575350476814)
+++ src/main/java/datasuorcetwo/datasource/server/OrgServerProduct.java	(date 1575350476814)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.Org;
+import datasuorcetwo.datasource.repositoryProduct.OrgRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class OrgServerProduct implements BaseServerInte<Org> {
+    @Autowired
+    OrgRepositoryProduct orgRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return orgRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<Org> getThanMaxId(Integer maxId) {
+        return orgRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<Org> getBetweenData(Integer beforeId, Integer afterId) {
+        return orgRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<Org> orgs) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<Org> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceAirSoilLightRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceAirSoilLightRepositoryLocal.java	(date 1575340404733)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceAirSoilLightRepositoryLocal.java	(date 1575340404733)
@@ -0,0 +1,19 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceAirSoilLight;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceAirSoilLightRepositoryLocal extends JpaRepository<DeviceAirSoilLight, Integer> {
+
+    @Query(nativeQuery = true, value = "select id from device_air_soil_light order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_air_soil_light where id > ?")
+    List<DeviceAirSoilLight> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_air_soil_light where id >= ? and id < ?")
+    List<DeviceAirSoilLight> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceTypeServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceTypeServerProduct.java	(date 1575349846420)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceTypeServerProduct.java	(date 1575349846420)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceType;
+import datasuorcetwo.datasource.repositoryProduct.DeviceTypeRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceTypeServerProduct implements BaseServerInte<DeviceType> {
+    @Autowired
+    DeviceTypeRepositoryProduct deviceTypeRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceTypeRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceType> getThanMaxId(Integer maxId) {
+        return deviceTypeRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceType> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceTypeRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceType> deviceTypes) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceType> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/User.java	(date 1575354361925)
+++ src/main/java/datasuorcetwo/datasource/entity/User.java	(date 1575354361925)
@@ -0,0 +1,307 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "user")
+public class User extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "openId")
+    private String openid;
+    @Column(name = "username")
+    private String username;
+    @Column(name = "password")
+    private String password;
+    @Column(name = "token")
+    private String token;
+    @Column(name = "user_icon")
+    private String userIcon;
+    @Column(name = "email")
+    private String email;
+    @Column(name = "register_time")
+    private Date registerTime;
+    @Column(name = "user_type")
+    private Integer userType;
+    @Column(name = "mobile")
+    private String mobile;
+    @Column(name = "verify_code")
+    private String verifyCode;
+    @Column(name = "out_date")
+    private Date outDate;
+    @Column(name = "real_name")
+    private String realName;
+    @Column(name = "last_login_time")
+    private Date lastLoginTime;
+    @Column(name = "last_login_ip")
+    private String lastLoginIp;
+    @Column(name = "gender")
+    private Integer gender;
+    @Column(name = "sms_notice")
+    private Integer smsNotice;
+    @Column(name = "account_balance")
+    private Double accountBalance;
+    @Column(name = "qq")
+    private String qq;
+    @Column(name = "out_time")
+    private Date outTime;
+    @Column(name = "nick")
+    private String nick;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "telPhone")
+    private String telphone;
+    @Column(name = "company")
+    private String company;
+    @Column(name = "dept")
+    private String dept;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "addressDetail")
+    private String addressdetail;
+    @Column(name = "verify_code_num")
+    private Integer verifyCodeNum;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getOpenid() {
+        return openid;
+    }
+
+    public void setOpenid(String openid) {
+        this.openid = openid == null ? null : openid.trim();
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username == null ? null : username.trim();
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password == null ? null : password.trim();
+    }
+
+    public String getToken() {
+        return token;
+    }
+
+    public void setToken(String token) {
+        this.token = token == null ? null : token.trim();
+    }
+
+    public String getUserIcon() {
+        return userIcon;
+    }
+
+    public void setUserIcon(String userIcon) {
+        this.userIcon = userIcon == null ? null : userIcon.trim();
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email == null ? null : email.trim();
+    }
+
+    public Date getRegisterTime() {
+        return registerTime;
+    }
+
+    public void setRegisterTime(Date registerTime) {
+        this.registerTime = registerTime;
+    }
+
+    public Integer getUserType() {
+        return userType;
+    }
+
+    public void setUserType(Integer userType) {
+        this.userType = userType;
+    }
+
+    public String getMobile() {
+        return mobile;
+    }
+
+    public void setMobile(String mobile) {
+        this.mobile = mobile == null ? null : mobile.trim();
+    }
+
+    public String getVerifyCode() {
+        return verifyCode;
+    }
+
+    public void setVerifyCode(String verifyCode) {
+        this.verifyCode = verifyCode == null ? null : verifyCode.trim();
+    }
+
+    public Date getOutDate() {
+        return outDate;
+    }
+
+    public void setOutDate(Date outDate) {
+        this.outDate = outDate;
+    }
+
+    public String getRealName() {
+        return realName;
+    }
+
+    public void setRealName(String realName) {
+        this.realName = realName == null ? null : realName.trim();
+    }
+
+    public Date getLastLoginTime() {
+        return lastLoginTime;
+    }
+
+    public void setLastLoginTime(Date lastLoginTime) {
+        this.lastLoginTime = lastLoginTime;
+    }
+
+    public String getLastLoginIp() {
+        return lastLoginIp;
+    }
+
+    public void setLastLoginIp(String lastLoginIp) {
+        this.lastLoginIp = lastLoginIp == null ? null : lastLoginIp.trim();
+    }
+
+    public Integer getGender() {
+        return gender;
+    }
+
+    public void setGender(Integer gender) {
+        this.gender = gender;
+    }
+
+    public Integer getSmsNotice() {
+        return smsNotice;
+    }
+
+    public void setSmsNotice(Integer smsNotice) {
+        this.smsNotice = smsNotice;
+    }
+
+    public Double getAccountBalance() {
+        return accountBalance;
+    }
+
+    public void setAccountBalance(Double accountBalance) {
+        this.accountBalance = accountBalance;
+    }
+
+    public String getQq() {
+        return qq;
+    }
+
+    public void setQq(String qq) {
+        this.qq = qq == null ? null : qq.trim();
+    }
+
+    public Date getOutTime() {
+        return outTime;
+    }
+
+    public void setOutTime(Date outTime) {
+        this.outTime = outTime;
+    }
+
+    public String getNick() {
+        return nick;
+    }
+
+    public void setNick(String nick) {
+        this.nick = nick == null ? null : nick.trim();
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public String getTelphone() {
+        return telphone;
+    }
+
+    public void setTelphone(String telphone) {
+        this.telphone = telphone == null ? null : telphone.trim();
+    }
+
+    public String getCompany() {
+        return company;
+    }
+
+    public void setCompany(String company) {
+        this.company = company == null ? null : company.trim();
+    }
+
+    public String getDept() {
+        return dept;
+    }
+
+    public void setDept(String dept) {
+        this.dept = dept == null ? null : dept.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getAddressdetail() {
+        return addressdetail;
+    }
+
+    public void setAddressdetail(String addressdetail) {
+        this.addressdetail = addressdetail == null ? null : addressdetail.trim();
+    }
+
+    public Integer getVerifyCodeNum() {
+        return verifyCodeNum;
+    }
+
+    public void setVerifyCodeNum(Integer verifyCodeNum) {
+        this.verifyCodeNum = verifyCodeNum;
+    }
+
+    @Override
+    public String toString() {
+        return "User{" +
+                "id=" + id +
+                ", username='" + username + '\'' +
+                ", userType=" + userType +
+                ", mobile='" + mobile + '\'' +
+                ", verifyCode='" + verifyCode + '\'' +
+                ", realName='" + realName + '\'' +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceVideoServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceVideoServerProduct.java	(date 1575349846684)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceVideoServerProduct.java	(date 1575349846684)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceVideo;
+import datasuorcetwo.datasource.repositoryProduct.DeviceVideoRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceVideoServerProduct implements BaseServerInte<DeviceVideo> {
+    @Autowired
+    DeviceVideoRepositoryProduct deviceVideoRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceVideoRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceVideo> getThanMaxId(Integer maxId) {
+        return deviceVideoRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceVideo> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceVideoRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceVideo> deviceVideos) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceVideo> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/OrgUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/OrgUser.java	(date 1575007890158)
+++ src/main/java/datasuorcetwo/datasource/entity/OrgUser.java	(date 1575007890158)
@@ -0,0 +1,53 @@
+package datasuorcetwo.datasource.entity;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.Table;
+import java.io.Serializable;
+
+@Entity
+@Table(name = "org_user")
+public class OrgUser extends BaseEntity implements Serializable {
+
+    @Column(name = "org_id")
+    private Integer orgId;
+    @Id
+    @Column(name = "user_id")
+    private Integer id;
+    @Column(name = "remark")
+    private String remark;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Integer getOrgId() {
+        return orgId;
+    }
+
+    public void setOrgId(Integer org_id) {
+        this.orgId = org_id;
+    }
+
+    public String getRemark() {
+        return remark;
+    }
+
+    public void setRemark(String remark) {
+        this.remark = remark == null ? null : remark.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "OrgUser{" +
+                "orgId=" + orgId +
+                ", id=" + id +
+                ", remark='" + remark + '\'' +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceWindRainfallServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceWindRainfallServerProduct.java	(date 1575349846888)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceWindRainfallServerProduct.java	(date 1575349846888)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceWindRainfall;
+import datasuorcetwo.datasource.repositoryProduct.DeviceWindRainfallRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceWindRainfallServerProduct implements BaseServerInte<DeviceWindRainfall> {
+    @Autowired
+    DeviceWindRainfallRepositoryProduct deviceWindRainfallRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceWindRainfallRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceWindRainfall> getThanMaxId(Integer maxId) {
+        return deviceWindRainfallRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceWindRainfall> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceWindRainfallRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceWindRainfall> deviceWindRainfalls) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceWindRainfall> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/Org.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/Org.java	(date 1575354222931)
+++ src/main/java/datasuorcetwo/datasource/entity/Org.java	(date 1575354222931)
@@ -0,0 +1,227 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "org")
+public class Org extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "org_1st_user_name")
+    private String org1stUserName;
+    @Column(name = "org_icon")
+    private String orgIcon;
+    @Column(name = "email")
+    private String email;
+    @Column(name = "register_time")
+    private Date registerTime;
+    @Column(name = "org_type")
+    private Integer orgType;
+    @Column(name = "real_name")
+    private String realName;
+    @Column(name = "org_level")
+    private Integer orgLevel;
+    @Column(name = "account_balance")
+    private Double accountBalance;
+    @Column(name = "qq")
+    private String qq;
+    @Column(name = "out_time")
+    private Date outTime;
+    @Column(name = "nick")
+    private String nick;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "telPhone")
+    private String telphone;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "addressDetail")
+    private String addressdetail;
+    @Column(name = "user_account_limit")
+    private Integer userAccountLimit;
+    @Column(name = "other_org")
+    private String otherOrg;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getOrg1stUserName() {
+        return org1stUserName;
+    }
+
+    public void setOrg1stUserName(String org1stUserName) {
+        this.org1stUserName = org1stUserName == null ? null : org1stUserName.trim();
+    }
+
+    public String getOrgIcon() {
+        return orgIcon;
+    }
+
+    public void setOrgIcon(String orgIcon) {
+        this.orgIcon = orgIcon == null ? null : orgIcon.trim();
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email == null ? null : email.trim();
+    }
+
+    public Date getRegisterTime() {
+        return registerTime;
+    }
+
+    public void setRegisterTime(Date registerTime) {
+        this.registerTime = registerTime;
+    }
+
+    public Integer getOrgType() {
+        return orgType;
+    }
+
+    public void setOrgType(Integer orgType) {
+        this.orgType = orgType;
+    }
+
+    public String getRealName() {
+        return realName;
+    }
+
+    public void setRealName(String realName) {
+        this.realName = realName == null ? null : realName.trim();
+    }
+
+    public Integer getOrgLevel() {
+        return orgLevel;
+    }
+
+    public void setOrgLevel(Integer orgLevel) {
+        this.orgLevel = orgLevel;
+    }
+
+    public Double getAccountBalance() {
+        return accountBalance;
+    }
+
+    public void setAccountBalance(Double accountBalance) {
+        this.accountBalance = accountBalance;
+    }
+
+    public String getQq() {
+        return qq;
+    }
+
+    public void setQq(String qq) {
+        this.qq = qq == null ? null : qq.trim();
+    }
+
+    public Date getOutTime() {
+        return outTime;
+    }
+
+    public void setOutTime(Date outTime) {
+        this.outTime = outTime;
+    }
+
+    public String getNick() {
+        return nick;
+    }
+
+    public void setNick(String nick) {
+        this.nick = nick == null ? null : nick.trim();
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public String getTelphone() {
+        return telphone;
+    }
+
+    public void setTelphone(String telphone) {
+        this.telphone = telphone == null ? null : telphone.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getAddressdetail() {
+        return addressdetail;
+    }
+
+    public void setAddressdetail(String addressdetail) {
+        this.addressdetail = addressdetail == null ? null : addressdetail.trim();
+    }
+
+    public Integer getUserAccountLimit() {
+        return userAccountLimit;
+    }
+
+    public void setUserAccountLimit(Integer userAccountLimit) {
+        this.userAccountLimit = userAccountLimit;
+    }
+
+    public String getOtherOrg() {
+        return otherOrg;
+    }
+
+    public void setOtherOrg(String otherOrg) {
+        this.otherOrg = otherOrg == null ? null : otherOrg.trim();
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    @Override
+    public String toString() {
+        return "Org{" +
+                "id=" + id +
+                ", org1stUserName='" + org1stUserName + '\'' +
+                ", userAccountLimit=" + userAccountLimit +
+                ", otherOrg='" + otherOrg + '\'' +
+                ", longitude=" + longitude +
+                ", latitude=" + latitude +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/GatewayServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/GatewayServerProduct.java	(date 1575349846777)
+++ src/main/java/datasuorcetwo/datasource/server/GatewayServerProduct.java	(date 1575349846777)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.Gateway;
+import datasuorcetwo.datasource.repositoryProduct.GatewayRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class GatewayServerProduct implements BaseServerInte<Gateway> {
+    @Autowired
+    GatewayRepositoryProduct gatewayRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return gatewayRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<Gateway> getThanMaxId(Integer maxId) {
+        return gatewayRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<Gateway> getBetweenData(Integer beforeId, Integer afterId) {
+        return gatewayRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<Gateway> gateways) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<Gateway> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceLightRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceLightRepositoryLocal.java	(date 1575340404691)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceLightRepositoryLocal.java	(date 1575340404691)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceLight;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceLightRepositoryLocal extends JpaRepository<DeviceLight, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_light order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_light where id > ?")
+    List<DeviceLight> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_light where id >= ? and id < ?")
+    List<DeviceLight> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceLightServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceLightServerProduct.java	(date 1575342239689)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceLightServerProduct.java	(date 1575342239689)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceLight;
+import datasuorcetwo.datasource.repositoryProduct.DeviceLightRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceLightServerProduct implements BaseServerInte<DeviceLight> {
+    @Autowired
+    DeviceLightRepositoryProduct deviceLightRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceLightRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceLight> getThanMaxId(Integer maxId) {
+        return deviceLightRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceLight> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceLightRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceLight> deviceLights) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceLight> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceSixteenroadSoilServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceSixteenroadSoilServerLocal.java	(date 1575349521964)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceSixteenroadSoilServerLocal.java	(date 1575349521964)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceSixteenroadSoil;
+import datasuorcetwo.datasource.repositoryLocal.DeviceSixteenroadSoilRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceSixteenroadSoilServerLocal implements BaseServerInte<DeviceSixteenroadSoil> {
+    @Autowired
+    DeviceSixteenroadSoilRepositoryLocal deviceSixteenroadSoilRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceSixteenroadSoilRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceSixteenroadSoilRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceSixteenroadSoil> getThanMaxId(Integer maxId) {
+        return deviceSixteenroadSoilRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceSixteenroadSoil> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceSixteenroadSoilRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceSixteenroadSoil> deviceSixteenroadSoils) {
+        if(!deviceSixteenroadSoils.isEmpty()){
+            deviceSixteenroadSoilRepositoryLocal.saveAll(deviceSixteenroadSoils);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceSixteenroadSoil> iterable) {
+        deviceSixteenroadSoilRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceHumidityRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceHumidityRepositoryLocal.java	(date 1575340404924)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceHumidityRepositoryLocal.java	(date 1575340404924)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceHumidity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceHumidityRepositoryLocal extends JpaRepository<DeviceHumidity, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_humidity order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_humidity where id > ?")
+    List<DeviceHumidity> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_humidity where id >= ? and id < ?")
+    List<DeviceHumidity> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceManyroadServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceManyroadServerProduct.java	(date 1575342239547)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceManyroadServerProduct.java	(date 1575342239547)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceManyroad;
+import datasuorcetwo.datasource.repositoryProduct.DeviceManyroadRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceManyroadServerProduct implements BaseServerInte<DeviceManyroad> {
+    @Autowired
+    DeviceManyroadRepositoryProduct deviceManyroadRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceManyroadRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceManyroad> getThanMaxId(Integer maxId) {
+        return deviceManyroadRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceManyroad> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceManyroadRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceManyroad> deviceManyroads) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceManyroad> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceSixteenroadSoilServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceSixteenroadSoilServerProduct.java	(date 1575342239412)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceSixteenroadSoilServerProduct.java	(date 1575342239412)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceSixteenroadSoil;
+import datasuorcetwo.datasource.repositoryProduct.DeviceSixteenroadSoilRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceSixteenroadSoilServerProduct implements BaseServerInte<DeviceSixteenroadSoil> {
+    @Autowired
+    DeviceSixteenroadSoilRepositoryProduct deviceSixteenroadSoilRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceSixteenroadSoilRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceSixteenroadSoil> getThanMaxId(Integer maxId) {
+        return deviceSixteenroadSoilRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceSixteenroadSoil> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceSixteenroadSoilRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceSixteenroadSoil> deviceSixteenroadSoils) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceSixteenroadSoil> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceCo2RepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceCo2RepositoryLocal.java	(date 1575335407762)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceCo2RepositoryLocal.java	(date 1575335407762)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceCo2;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceCo2RepositoryLocal extends JpaRepository<DeviceCo2, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_co2 order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_co2 where id > ?")
+    List<DeviceCo2> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_co2 where id >= ? and id < ?")
+    List<DeviceCo2> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceSoilMoistureNutrientServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceSoilMoistureNutrientServerProduct.java	(date 1575349521909)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceSoilMoistureNutrientServerProduct.java	(date 1575349521909)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceSoilMoistureNutrient;
+import datasuorcetwo.datasource.repositoryProduct.DeviceSoilMoistureNutrientRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceSoilMoistureNutrientServerProduct implements BaseServerInte<DeviceSoilMoistureNutrient> {
+    @Autowired
+    DeviceSoilMoistureNutrientRepositoryProduct deviceSoilMoistureNutrientRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceSoilMoistureNutrientRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceSoilMoistureNutrient> getThanMaxId(Integer maxId) {
+        return deviceSoilMoistureNutrientRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceSoilMoistureNutrient> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceSoilMoistureNutrientRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceSoilMoistureNutrient> deviceSoilMoistureNutrients) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceSoilMoistureNutrient> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceAlarmRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceAlarmRepositoryLocal.java	(date 1575340404813)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceAlarmRepositoryLocal.java	(date 1575340404813)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceAlarm;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceAlarmRepositoryLocal extends JpaRepository<DeviceAlarm, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_alarm order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_alarm where id > ?")
+    List<DeviceAlarm> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_alarm where id >= ? and id < ?")
+    List<DeviceAlarm> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceTemperatureServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceTemperatureServerProduct.java	(date 1575349521802)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceTemperatureServerProduct.java	(date 1575349521802)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceTemperature;
+import datasuorcetwo.datasource.repositoryProduct.DeviceTemperatureRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceTemperatureServerProduct implements BaseServerInte<DeviceTemperature> {
+    @Autowired
+    DeviceTemperatureRepositoryProduct deviceTemperatureRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceTemperatureRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceTemperature> getThanMaxId(Integer maxId) {
+        return deviceTemperatureRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceTemperature> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceTemperatureRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceTemperature> deviceTemperatures) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceTemperature> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceTypeRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceTypeRepositoryLocal.java	(date 1575340405054)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceTypeRepositoryLocal.java	(date 1575340405054)
@@ -0,0 +1,17 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceType;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceTypeRepositoryLocal extends JpaRepository<DeviceType, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_type order by id desc limit 1")
+    Integer findMaxId();
+    @Query(nativeQuery = true, value = "select * from device_type where id > ?")
+    List<DeviceType> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_type where id >= ? and id < ?")
+    List<DeviceType> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/UserServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/UserServerLocal.java	(date 1575350476883)
+++ src/main/java/datasuorcetwo/datasource/server/UserServerLocal.java	(date 1575350476883)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.User;
+import datasuorcetwo.datasource.repositoryLocal.UserRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class UserServerLocal implements BaseServerInte<User> {
+    @Autowired
+    UserRepositoryLocal userRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(userRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return userRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<User> getThanMaxId(Integer maxId) {
+        return userRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<User> getBetweenData(Integer beforeId, Integer afterId) {
+        return userRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<User> users) {
+        if(!users.isEmpty()){
+            userRepositoryLocal.saveAll(users);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<User> iterable) {
+        userRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DeviceSixteenroadSoil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DeviceSixteenroadSoil.java	(date 1575354116467)
+++ src/main/java/datasuorcetwo/datasource/entity/DeviceSixteenroadSoil.java	(date 1575354116467)
@@ -0,0 +1,353 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "device_sixteenroad_soil")
+public class DeviceSixteenroadSoil extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "device_nb_id")
+    private String deviceNbId;
+    @Column(name = "device_code")
+    private String deviceCode;
+    @Column(name = "name")
+    private String name;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "remake")
+    private String remake;
+    @Column(name = "status")
+    private Integer status;
+    @Column(name = "status_change_time")
+    private Date statusChangeTime;
+    @Column(name = "longitude")
+    private Double longitude;
+    @Column(name = "latitude")
+    private Double latitude;
+    @Column(name = "is_delete")
+    private Integer isDelete;
+    @Column(name = "has_switch")
+    private Integer hasSwitch;
+    @Column(name = "device_type_id")
+    private Integer deviceTypeId;
+    @Column(name = "gateway_id")
+    private Integer gatewayId;
+    @Column(name = "gateway_name")
+    private String gatewayName;
+    @Column(name = "gateway_code")
+    private String gatewayCode;
+    @Column(name = "channel")
+    private Integer channel;
+    @Column(name = "access_mode")
+    private Byte accessMode;
+    @Column(name = "all_road_name")
+    private String allRoadName;
+    @Column(name = "all_road_status")
+    private String allRoadStatus;
+    @Column(name = "all_road_humidity_orange")
+    private String allRoadHumidityOrange;
+    @Column(name = "all_road_humidity_yellow")
+    private String allRoadHumidityYellow;
+    @Column(name = "all_road_humidity_red")
+    private String allRoadHumidityRed;
+    @Column(name = "all_road_temperature_orange")
+    private String allRoadTemperatureOrange;
+    @Column(name = "all_road_temperature_yellow")
+    private String allRoadTemperatureYellow;
+    @Column(name = "all_road_temperature_red")
+    private String allRoadTemperatureRed;
+    @Column(name = "brand")
+    private String brand;
+    @Column(name = "model")
+    private String model;
+    @Column(name = "firmware")
+    private String firmware;
+    @Column(name = "organization")
+    private String organization;
+    @Column(name = "region")
+    private String region;
+    @Column(name = "branch")
+    private String branch;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getDeviceNbId() {
+        return deviceNbId;
+    }
+
+    public void setDeviceNbId(String deviceNbId) {
+        this.deviceNbId = deviceNbId == null ? null : deviceNbId.trim();
+    }
+
+    public String getDeviceCode() {
+        return deviceCode;
+    }
+
+    public void setDeviceCode(String deviceCode) {
+        this.deviceCode = deviceCode == null ? null : deviceCode.trim();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name == null ? null : name.trim();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address == null ? null : address.trim();
+    }
+
+    public String getRemake() {
+        return remake;
+    }
+
+    public void setRemake(String remake) {
+        this.remake = remake == null ? null : remake.trim();
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Date getStatusChangeTime() {
+        return statusChangeTime;
+    }
+
+    public void setStatusChangeTime(Date statusChangeTime) {
+        this.statusChangeTime = statusChangeTime;
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public Integer getIsDelete() {
+        return isDelete;
+    }
+
+    public void setIsDelete(Integer isDelete) {
+        this.isDelete = isDelete;
+    }
+
+    public Integer getHasSwitch() {
+        return hasSwitch;
+    }
+
+    public void setHasSwitch(Integer hasSwitch) {
+        this.hasSwitch = hasSwitch;
+    }
+
+    public Integer getDeviceTypeId() {
+        return deviceTypeId;
+    }
+
+    public void setDeviceTypeId(Integer deviceTypeId) {
+        this.deviceTypeId = deviceTypeId;
+    }
+
+    public Integer getGatewayId() {
+        return gatewayId;
+    }
+
+    public void setGatewayId(Integer gatewayId) {
+        this.gatewayId = gatewayId;
+    }
+
+    public String getGatewayName() {
+        return gatewayName;
+    }
+
+    public void setGatewayName(String gatewayName) {
+        this.gatewayName = gatewayName == null ? null : gatewayName.trim();
+    }
+
+    public String getGatewayCode() {
+        return gatewayCode;
+    }
+
+    public void setGatewayCode(String gatewayCode) {
+        this.gatewayCode = gatewayCode == null ? null : gatewayCode.trim();
+    }
+
+    public Integer getChannel() {
+        return channel;
+    }
+
+    public void setChannel(Integer channel) {
+        this.channel = channel;
+    }
+
+    public Byte getAccessMode() {
+        return accessMode;
+    }
+
+    public void setAccessMode(Byte accessMode) {
+        this.accessMode = accessMode;
+    }
+
+    public String getAllRoadName() {
+        return allRoadName;
+    }
+
+    public void setAllRoadName(String allRoadName) {
+        this.allRoadName = allRoadName == null ? null : allRoadName.trim();
+    }
+
+    public String getAllRoadStatus() {
+        return allRoadStatus;
+    }
+
+    public void setAllRoadStatus(String allRoadStatus) {
+        this.allRoadStatus = allRoadStatus == null ? null : allRoadStatus.trim();
+    }
+
+    public String getAllRoadHumidityOrange() {
+        return allRoadHumidityOrange;
+    }
+
+    public void setAllRoadHumidityOrange(String allRoadHumidityOrange) {
+        this.allRoadHumidityOrange = allRoadHumidityOrange == null ? null : allRoadHumidityOrange.trim();
+    }
+
+    public String getAllRoadHumidityYellow() {
+        return allRoadHumidityYellow;
+    }
+
+    public void setAllRoadHumidityYellow(String allRoadHumidityYellow) {
+        this.allRoadHumidityYellow = allRoadHumidityYellow == null ? null : allRoadHumidityYellow.trim();
+    }
+
+    public String getAllRoadHumidityRed() {
+        return allRoadHumidityRed;
+    }
+
+    public void setAllRoadHumidityRed(String allRoadHumidityRed) {
+        this.allRoadHumidityRed = allRoadHumidityRed == null ? null : allRoadHumidityRed.trim();
+    }
+
+    public String getAllRoadTemperatureOrange() {
+        return allRoadTemperatureOrange;
+    }
+
+    public void setAllRoadTemperatureOrange(String allRoadTemperatureOrange) {
+        this.allRoadTemperatureOrange = allRoadTemperatureOrange == null ? null : allRoadTemperatureOrange.trim();
+    }
+
+    public String getAllRoadTemperatureYellow() {
+        return allRoadTemperatureYellow;
+    }
+
+    public void setAllRoadTemperatureYellow(String allRoadTemperatureYellow) {
+        this.allRoadTemperatureYellow = allRoadTemperatureYellow == null ? null : allRoadTemperatureYellow.trim();
+    }
+
+    public String getAllRoadTemperatureRed() {
+        return allRoadTemperatureRed;
+    }
+
+    public void setAllRoadTemperatureRed(String allRoadTemperatureRed) {
+        this.allRoadTemperatureRed = allRoadTemperatureRed == null ? null : allRoadTemperatureRed.trim();
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand == null ? null : brand.trim();
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model == null ? null : model.trim();
+    }
+
+    public String getFirmware() {
+        return firmware;
+    }
+
+    public void setFirmware(String firmware) {
+        this.firmware = firmware == null ? null : firmware.trim();
+    }
+
+    public String getOrganization() {
+        return organization;
+    }
+
+    public void setOrganization(String organization) {
+        this.organization = organization == null ? null : organization.trim();
+    }
+
+    public String getRegion() {
+        return region;
+    }
+
+    public void setRegion(String region) {
+        this.region = region == null ? null : region.trim();
+    }
+
+    public String getBranch() {
+        return branch;
+    }
+
+    public void setBranch(String branch) {
+        this.branch = branch == null ? null : branch.trim();
+    }
+
+    @Override
+    public String toString() {
+        return "DeviceSixteenroadSoil{" +
+                "id=" + id +
+                ", nbId='" + deviceNbId + '\'' +
+                ", deviceCode='" + deviceCode + '\'' +
+                ", name='" + name + '\'' +
+                ", status=" + status +
+                ", statusChangeTime=" + statusChangeTime +
+                ", isDelete=" + isDelete +
+                ", gatewayCode='" + gatewayCode + '\'' +
+                ", channel=" + channel +
+                ", accessMode=" + accessMode +
+                ", allRoadName='" + allRoadName + '\'' +
+                ", allRoadStatus='" + allRoadStatus + '\'' +
+                '}';
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceTemperatureRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceTemperatureRepositoryLocal.java	(date 1575340405103)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceTemperatureRepositoryLocal.java	(date 1575340405103)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceTemperature;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceTemperatureRepositoryLocal extends JpaRepository<DeviceTemperature, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_temperature order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_temperature where id > ?")
+    List<DeviceTemperature> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_temperature where id >= ? and id < ?")
+    List<DeviceTemperature> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceAlarmServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceAlarmServerProduct.java	(date 1575342239644)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceAlarmServerProduct.java	(date 1575342239644)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceAlarm;
+import datasuorcetwo.datasource.repositoryProduct.DeviceAlarmRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceAlarmServerProduct implements BaseServerInte<DeviceAlarm> {
+    @Autowired
+    DeviceAlarmRepositoryProduct deviceAlarmRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceAlarmRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceAlarm> getThanMaxId(Integer maxId) {
+        return deviceAlarmRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceAlarm> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceAlarmRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceAlarm> deviceAlarms) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceAlarm> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceSixteenroadSoilRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceSixteenroadSoilRepositoryLocal.java	(date 1575340405182)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceSixteenroadSoilRepositoryLocal.java	(date 1575340405182)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceSixteenroadSoil;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceSixteenroadSoilRepositoryLocal extends JpaRepository<DeviceSixteenroadSoil, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_sixteenroad_soil order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_sixteenroad_soil where id > ?")
+    List<DeviceSixteenroadSoil> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_sixteenroad_soil where id >= ? and id < ?")
+    List<DeviceSixteenroadSoil> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceSoilMoistureNutrientRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceSoilMoistureNutrientRepositoryLocal.java	(date 1575340404995)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceSoilMoistureNutrientRepositoryLocal.java	(date 1575340404995)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceSoilMoistureNutrient;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceSoilMoistureNutrientRepositoryLocal extends JpaRepository<DeviceSoilMoistureNutrient, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_soil_moisture_nutrient order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_soil_moisture_nutrient where id > ?")
+    List<DeviceSoilMoistureNutrient> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_soil_moisture_nutrient where id >= ? and id < ?")
+    List<DeviceSoilMoistureNutrient> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceCo2ServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceCo2ServerProduct.java	(date 1575335495254)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceCo2ServerProduct.java	(date 1575335495254)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceCo2;
+import datasuorcetwo.datasource.repositoryProduct.DeviceCo2RepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceCo2ServerProduct implements BaseServerInte<DeviceCo2> {
+    @Autowired
+    DeviceCo2RepositoryProduct deviceCo2RepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceCo2RepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceCo2> getThanMaxId(Integer maxId) {
+        return deviceCo2RepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceCo2> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceCo2RepositoryProduct.getBetweenData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceCo2> deviceCo2s) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceCo2> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceManyroadRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceManyroadRepositoryLocal.java	(date 1575340405139)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceManyroadRepositoryLocal.java	(date 1575340405139)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceManyroad;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceManyroadRepositoryLocal extends JpaRepository<DeviceManyroad, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_manyroad order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_manyroad where id > ?")
+    List<DeviceManyroad> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_manyroad where id >= ? and id < ?")
+    List<DeviceManyroad> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceSixteenroadSoilRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceSixteenroadSoilRepositoryProduct.java	(date 1575341426138)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceSixteenroadSoilRepositoryProduct.java	(date 1575341426138)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceSixteenroadSoil;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceSixteenroadSoilRepositoryProduct extends JpaRepository<DeviceSixteenroadSoil, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_sixteenroad_soil order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_sixteenroad_soil where id > ?")
+    List<DeviceSixteenroadSoil> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_sixteenroad_soil where id >= ? and id < ?")
+    List<DeviceSixteenroadSoil> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceHumidityServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceHumidityServerProduct.java	(date 1575342239735)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceHumidityServerProduct.java	(date 1575342239735)
@@ -0,0 +1,40 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceHumidity;
+import datasuorcetwo.datasource.repositoryProduct.DeviceHumidityRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceHumidityServerProduct implements BaseServerInte<DeviceHumidity> {
+    @Autowired
+    DeviceHumidityRepositoryProduct deviceHumidityRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        return deviceHumidityRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceHumidity> getThanMaxId(Integer maxId) {
+        return deviceHumidityRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceHumidity> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceHumidityRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceHumidity> deviceHumidities) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceHumidity> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/GroupRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/GroupRepositoryLocal.java	(date 1575340583406)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/GroupRepositoryLocal.java	(date 1575340583406)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.Group;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface GroupRepositoryLocal extends JpaRepository<Group, Integer> {
+    @Query(nativeQuery = true, value = "select group_id from `group` order by group_id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from `group` where group_id > ?")
+    List<Group> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from `group` where group_id >= ? and group_id < ?")
+    List<Group> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/GroupDeviceServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/GroupDeviceServerLocal.java	(date 1575350137117)
+++ src/main/java/datasuorcetwo/datasource/server/GroupDeviceServerLocal.java	(date 1575350137117)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.GroupDevice;
+import datasuorcetwo.datasource.repositoryLocal.GroupDeviceRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class GroupDeviceServerLocal implements BaseServerInte<GroupDevice> {
+    @Autowired
+    GroupDeviceRepositoryLocal groupDeviceRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(groupDeviceRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return groupDeviceRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<GroupDevice> getThanMaxId(Integer maxId) {
+        return groupDeviceRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<GroupDevice> getBetweenData(Integer beforeId, Integer afterId) {
+        return groupDeviceRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<GroupDevice> groupDevices) {
+        if(!groupDevices.isEmpty()){
+            groupDeviceRepositoryLocal.saveAll(groupDevices);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<GroupDevice> iterable) {
+        groupDeviceRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/GatewayRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/GatewayRepositoryLocal.java	(date 1575340404500)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/GatewayRepositoryLocal.java	(date 1575340404500)
@@ -0,0 +1,17 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.Gateway;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface GatewayRepositoryLocal extends JpaRepository<Gateway, Integer> {
+    @Query(nativeQuery = true, value = "select id from gateway order by id desc limit 1")
+    Integer findMaxId();
+    @Query(nativeQuery = true, value = "select * from gateway where id > ?")
+    List<Gateway> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from gateway where id >= ? and id < ?")
+    List<Gateway> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/LinkageDeviceServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/LinkageDeviceServerLocal.java	(date 1575350476781)
+++ src/main/java/datasuorcetwo/datasource/server/LinkageDeviceServerLocal.java	(date 1575350476781)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.LinkageDevice;
+import datasuorcetwo.datasource.repositoryLocal.LinkageDeviceRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class LinkageDeviceServerLocal implements BaseServerInte<LinkageDevice> {
+    @Autowired
+    LinkageDeviceRepositoryLocal linkageDeviceRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(linkageDeviceRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return linkageDeviceRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<LinkageDevice> getThanMaxId(Integer maxId) {
+        return linkageDeviceRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<LinkageDevice> getBetweenData(Integer beforeId, Integer afterId) {
+        return linkageDeviceRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<LinkageDevice> linkageDevices) {
+        if(!linkageDevices.isEmpty()){
+            linkageDeviceRepositoryLocal.saveAll(linkageDevices);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<LinkageDevice> iterable) {
+        linkageDeviceRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceWindRainfallRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceWindRainfallRepositoryLocal.java	(date 1575340404865)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceWindRainfallRepositoryLocal.java	(date 1575340404865)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceWindRainfall;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceWindRainfallRepositoryLocal extends JpaRepository<DeviceWindRainfall, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_wind_rainfall order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_wind_rainfall where id > ?")
+    List<DeviceWindRainfall> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_wind_rainfall where id >= ? and id < ?")
+    List<DeviceWindRainfall> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/OrgServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/OrgServerLocal.java	(date 1575350476973)
+++ src/main/java/datasuorcetwo/datasource/server/OrgServerLocal.java	(date 1575350476973)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.Org;
+import datasuorcetwo.datasource.repositoryLocal.OrgRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class OrgServerLocal implements BaseServerInte<Org> {
+    @Autowired
+    OrgRepositoryLocal orgRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(orgRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return orgRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<Org> getThanMaxId(Integer maxId) {
+        return orgRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<Org> getBetweenData(Integer beforeId, Integer afterId) {
+        return orgRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<Org> orgs) {
+        if(!orgs.isEmpty()){
+            orgRepositoryLocal.saveAll(orgs);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<Org> iterable) {
+        orgRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceVideoRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceVideoRepositoryLocal.java	(date 1575340404574)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DeviceVideoRepositoryLocal.java	(date 1575340404574)
@@ -0,0 +1,17 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DeviceVideo;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceVideoRepositoryLocal extends JpaRepository<DeviceVideo, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_video order by id desc limit 1")
+    Integer findMaxId();
+    @Query(nativeQuery = true, value = "select * from device_video where id > ?")
+    List<DeviceVideo> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_video where id >= ? and id < ?")
+    List<DeviceVideo> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/OrgUserServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/OrgUserServerLocal.java	(date 1575350477019)
+++ src/main/java/datasuorcetwo/datasource/server/OrgUserServerLocal.java	(date 1575350477019)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.OrgUser;
+import datasuorcetwo.datasource.repositoryLocal.OrgUserRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class OrgUserServerLocal implements BaseServerInte<OrgUser> {
+    @Autowired
+    OrgUserRepositoryLocal orgUserRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(orgUserRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return orgUserRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<OrgUser> getThanMaxId(Integer maxId) {
+        return orgUserRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<OrgUser> getBetweenData(Integer beforeId, Integer afterId) {
+        return orgUserRepositoryLocal.getBetweenData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<OrgUser> orgUsers) {
+        if(!orgUsers.isEmpty()){
+            orgUserRepositoryLocal.saveAll(orgUsers);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<OrgUser> iterable) {
+        orgUserRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/OrgRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/OrgRepositoryLocal.java	(date 1575340654222)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/OrgRepositoryLocal.java	(date 1575340654222)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.Org;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface OrgRepositoryLocal extends JpaRepository<Org, Integer> {
+    @Query(nativeQuery = true, value = "select id from org order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from org where id > ?")
+    List<Org> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from org where id >= ? and id < ?")
+    List<Org> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceVideoServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceVideoServerLocal.java	(date 1575349846581)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceVideoServerLocal.java	(date 1575349846581)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceVideo;
+import datasuorcetwo.datasource.repositoryLocal.DeviceVideoRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceVideoServerLocal implements BaseServerInte<DeviceVideo> {
+    @Autowired
+    DeviceVideoRepositoryLocal deviceVideoRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceVideoRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceVideoRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceVideo> getThanMaxId(Integer maxId) {
+        return deviceVideoRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceVideo> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceVideoRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceVideo> deviceVideos) {
+        if(!deviceVideos.isEmpty()){
+            deviceVideoRepositoryLocal.saveAll(deviceVideos);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceVideo> iterable) {
+        deviceVideoRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/LinkageDeviceRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/LinkageDeviceRepositoryLocal.java	(date 1575340583470)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/LinkageDeviceRepositoryLocal.java	(date 1575340583470)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.LinkageDevice;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface LinkageDeviceRepositoryLocal extends JpaRepository<LinkageDevice, Integer> {
+    @Query(nativeQuery = true, value = "select id from linkage_device order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from linkage_device where id > ?")
+    List<LinkageDevice> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from linkage_device where id >= ? and id < ?")
+    List<LinkageDevice> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceWindRainfallServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceWindRainfallServerLocal.java	(date 1575349846728)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceWindRainfallServerLocal.java	(date 1575349846728)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceWindRainfall;
+import datasuorcetwo.datasource.repositoryLocal.DeviceWindRainfallRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceWindRainfallServerLocal implements BaseServerInte<DeviceWindRainfall> {
+    @Autowired
+    DeviceWindRainfallRepositoryLocal deviceWindRainfallRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceWindRainfallRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceWindRainfallRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceWindRainfall> getThanMaxId(Integer maxId) {
+        return deviceWindRainfallRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceWindRainfall> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceWindRainfallRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceWindRainfall> deviceWindRainfalls) {
+        if(!deviceWindRainfalls.isEmpty()){
+            deviceWindRainfallRepositoryLocal.saveAll(deviceWindRainfalls);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceWindRainfall> iterable) {
+        deviceWindRainfallRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/HistoryBrowseRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/HistoryBrowseRepositoryLocal.java	(date 1563333846558)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/HistoryBrowseRepositoryLocal.java	(date 1563333846558)
@@ -0,0 +1,10 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.HistoryBrowse;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface HistoryBrowseRepositoryLocal extends JpaRepository<HistoryBrowse, Integer> {
+    @Query(nativeQuery = true, value = "select id from history_browse order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/server/GatewayServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/GatewayServerLocal.java	(date 1575350137168)
+++ src/main/java/datasuorcetwo/datasource/server/GatewayServerLocal.java	(date 1575350137168)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.Gateway;
+import datasuorcetwo.datasource.repositoryLocal.GatewayRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class GatewayServerLocal implements BaseServerInte<Gateway> {
+    @Autowired
+    GatewayRepositoryLocal gatewayRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(gatewayRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return gatewayRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<Gateway> getThanMaxId(Integer maxId) {
+        return gatewayRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<Gateway> getBetweenData(Integer beforeId, Integer afterId) {
+        return gatewayRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<Gateway> gateways) {
+        if(!gateways.isEmpty()){
+            gatewayRepositoryLocal.saveAll(gateways);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<Gateway> iterable) {
+        gatewayRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/GroupDeviceRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/GroupDeviceRepositoryLocal.java	(date 1575340583346)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/GroupDeviceRepositoryLocal.java	(date 1575340583346)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.GroupDevice;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface GroupDeviceRepositoryLocal extends JpaRepository<GroupDevice, Integer> {
+    @Query(nativeQuery = true, value = "select id from group_device order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from group_device where id > ?")
+    List<GroupDevice> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from group_device where id >= ? and id < ?")
+    List<GroupDevice> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/GroupServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/GroupServerLocal.java	(date 1575350136994)
+++ src/main/java/datasuorcetwo/datasource/server/GroupServerLocal.java	(date 1575350136994)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.Group;
+import datasuorcetwo.datasource.repositoryLocal.GroupRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class GroupServerLocal implements BaseServerInte<Group> {
+    @Autowired
+    GroupRepositoryLocal groupRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(groupRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return groupRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<Group> getThanMaxId(Integer maxId) {
+        return groupRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<Group> getBetweenData(Integer beforeId, Integer afterId) {
+        return groupRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<Group> groups) {
+        if(!groups.isEmpty()){
+            groupRepositoryLocal.saveAll(groups);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<Group> iterable) {
+        groupRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceManyroadServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceManyroadServerLocal.java	(date 1575342239501)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceManyroadServerLocal.java	(date 1575342239501)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceManyroad;
+import datasuorcetwo.datasource.repositoryLocal.DeviceManyroadRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceManyroadServerLocal implements BaseServerInte<DeviceManyroad> {
+    @Autowired
+    DeviceManyroadRepositoryLocal deviceManyroadRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceManyroadRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceManyroadRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceManyroad> getThanMaxId(Integer maxId) {
+        return deviceManyroadRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceManyroad> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceManyroadRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceManyroad> deviceManyroads) {
+        if(!deviceManyroads.isEmpty()){
+            deviceManyroadRepositoryLocal.saveAll(deviceManyroads);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceManyroad> iterable) {
+        deviceManyroadRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceSoilMoistureNutrientServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceSoilMoistureNutrientServerLocal.java	(date 1575349522069)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceSoilMoistureNutrientServerLocal.java	(date 1575349522069)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceSoilMoistureNutrient;
+import datasuorcetwo.datasource.repositoryLocal.DeviceSoilMoistureNutrientRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceSoilMoistureNutrientServerLocal implements BaseServerInte<DeviceSoilMoistureNutrient> {
+    @Autowired
+    DeviceSoilMoistureNutrientRepositoryLocal deviceSoilMoistureNutrientRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceSoilMoistureNutrientRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceSoilMoistureNutrientRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceSoilMoistureNutrient> getThanMaxId(Integer maxId) {
+        return deviceSoilMoistureNutrientRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceSoilMoistureNutrient> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceSoilMoistureNutrientRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceSoilMoistureNutrient> deviceSoilMoistureNutrients) {
+        if(!deviceSoilMoistureNutrients.isEmpty()){
+            deviceSoilMoistureNutrientRepositoryLocal.saveAll(deviceSoilMoistureNutrients);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceSoilMoistureNutrient> iterable) {
+        deviceSoilMoistureNutrientRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/UserRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/UserRepositoryLocal.java	(date 1575340754802)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/UserRepositoryLocal.java	(date 1575340754802)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface UserRepositoryLocal extends JpaRepository<User, Integer> {
+    @Query(nativeQuery = true, value = "select id from `user` order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from `user` where id > ?")
+    List<User> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from `user` where id >= ? and id < ?")
+    List<User> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceTemperatureServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceTemperatureServerLocal.java	(date 1575349846493)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceTemperatureServerLocal.java	(date 1575349846493)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceTemperature;
+import datasuorcetwo.datasource.repositoryLocal.DeviceTemperatureRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceTemperatureServerLocal implements BaseServerInte<DeviceTemperature> {
+    @Autowired
+    DeviceTemperatureRepositoryLocal deviceTemperatureRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceTemperatureRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceTemperatureRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceTemperature> getThanMaxId(Integer maxId) {
+        return deviceTemperatureRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceTemperature> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceTemperatureRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceTemperature> deviceTemperatures) {
+        if(!deviceTemperatures.isEmpty()){
+            deviceTemperatureRepositoryLocal.saveAll(deviceTemperatures);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceTemperature> iterable) {
+        deviceTemperatureRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/OrgUserRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/OrgUserRepositoryLocal.java	(date 1575341096220)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/OrgUserRepositoryLocal.java	(date 1575341096220)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.OrgUser;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface OrgUserRepositoryLocal extends JpaRepository<OrgUser, Integer> {
+    @Query(nativeQuery = true, value = "select user_id from org_user order by user_id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from org_user where user_id > ?")
+    List<OrgUser> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from org_user where user_id >= ? and user_id < ?")
+    List<OrgUser> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceTypeServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceTypeServerLocal.java	(date 1575349846835)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceTypeServerLocal.java	(date 1575349846835)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceType;
+import datasuorcetwo.datasource.repositoryLocal.DeviceTypeRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceTypeServerLocal implements BaseServerInte<DeviceType> {
+    @Autowired
+    DeviceTypeRepositoryLocal deviceTypeRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceTypeRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceTypeRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceType> getThanMaxId(Integer maxId) {
+        return deviceTypeRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceType> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceTypeRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceType> deviceTypes) {
+        if(!deviceTypes.isEmpty()){
+            deviceTypeRepositoryLocal.saveAll(deviceTypes);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceType> iterable) {
+        deviceTypeRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceAlarmServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceAlarmServerLocal.java	(date 1575342239156)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceAlarmServerLocal.java	(date 1575342239156)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceAlarm;
+import datasuorcetwo.datasource.repositoryLocal.DeviceAlarmRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceAlarmServerLocal implements BaseServerInte<DeviceAlarm> {
+    @Autowired
+    DeviceAlarmRepositoryLocal deviceAlarmRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceAlarmRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceAlarmRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceAlarm> getThanMaxId(Integer maxId) {
+        return deviceAlarmRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceAlarm> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceAlarmRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceAlarm> deviceAlarms) {
+        if(!deviceAlarms.isEmpty()){
+            deviceAlarmRepositoryLocal.saveAll(deviceAlarms);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceAlarm> iterable) {
+        deviceAlarmRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceCo2ServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceCo2ServerLocal.java	(date 1575336893611)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceCo2ServerLocal.java	(date 1575336893611)
@@ -0,0 +1,48 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceCo2;
+import datasuorcetwo.datasource.repositoryLocal.DeviceCo2RepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Service
+public class DeviceCo2ServerLocal implements BaseServerInte<DeviceCo2> {
+    @Autowired
+    DeviceCo2RepositoryLocal deviceCo2RepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceCo2RepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceCo2RepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceCo2> getThanMaxId(Integer id) {
+        return deviceCo2RepositoryLocal.findThanMaxId(id);
+    }
+
+    @Override
+    public List<DeviceCo2> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceCo2RepositoryLocal.getBetweenData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceCo2> deviceCo2s) {
+        if(!deviceCo2s.isEmpty()){
+            deviceCo2RepositoryLocal.saveAll(deviceCo2s);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceCo2> iterable) {
+        deviceCo2RepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceHumidityServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceHumidityServerLocal.java	(date 1575342239321)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceHumidityServerLocal.java	(date 1575342239321)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceHumidity;
+import datasuorcetwo.datasource.repositoryLocal.DeviceHumidityRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceHumidityServerLocal implements BaseServerInte<DeviceHumidity> {
+    @Autowired
+    DeviceHumidityRepositoryLocal deviceHumidityRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceHumidityRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceHumidityRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceHumidity> getThanMaxId(Integer maxId) {
+        return deviceHumidityRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceHumidity> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceHumidityRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceHumidity> deviceHumidities) {
+        if(!deviceHumidities.isEmpty()){
+            deviceHumidityRepositoryLocal.saveAll(deviceHumidities);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceHumidity> iterable) {
+        deviceHumidityRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceLightServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceLightServerLocal.java	(date 1575342239264)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceLightServerLocal.java	(date 1575342239264)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceLight;
+import datasuorcetwo.datasource.repositoryLocal.DeviceLightRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceLightServerLocal implements BaseServerInte<DeviceLight> {
+    @Autowired
+    DeviceLightRepositoryLocal deviceLightRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceLightRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceLightRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceLight> getThanMaxId(Integer maxId) {
+        return deviceLightRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceLight> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceLightRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceLight> deviceLights) {
+        if(!deviceLights.isEmpty()){
+            deviceLightRepositoryLocal.saveAll(deviceLights);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceLight> iterable) {
+        deviceLightRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/OrgUserRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/OrgUserRepositoryProduct.java	(date 1575341426495)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/OrgUserRepositoryProduct.java	(date 1575341426495)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.OrgUser;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface OrgUserRepositoryProduct extends JpaRepository<OrgUser, Integer> {
+    @Query(nativeQuery = true, value = "select user_id from org_user order by user_id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from org_user where user_id > ?")
+    List<OrgUser> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from org_user where user_id >= ? and user_id < ?")
+    List<OrgUser> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/UserRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/UserRepositoryProduct.java	(date 1575341472241)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/UserRepositoryProduct.java	(date 1575341472241)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface UserRepositoryProduct extends JpaRepository<User, Integer> {
+    @Query(nativeQuery = true, value = "select id from `user` order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from `user` where id > ?")
+    List<User> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from `user` where id >= ? and id < ?")
+    List<User> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceAirSoilLightServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceAirSoilLightServerLocal.java	(date 1575342239457)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceAirSoilLightServerLocal.java	(date 1575342239457)
@@ -0,0 +1,47 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceAirSoilLight;
+import datasuorcetwo.datasource.repositoryLocal.DeviceAirSoilLightRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceAirSoilLightServerLocal implements BaseServerInte<DeviceAirSoilLight> {
+    @Autowired
+    DeviceAirSoilLightRepositoryLocal deviceAirSoilLightRepositoryLocal;
+
+    @Override
+    public int getMaxId() {
+        if(deviceAirSoilLightRepositoryLocal.findMaxId() == null){
+            return 0;
+        }
+        return deviceAirSoilLightRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public List<DeviceAirSoilLight> getThanMaxId(Integer maxId) {
+        return deviceAirSoilLightRepositoryLocal.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceAirSoilLight> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceAirSoilLightRepositoryLocal.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceAirSoilLight> deviceAirSoilLights) {
+        if(!deviceAirSoilLights.isEmpty()){
+            deviceAirSoilLightRepositoryLocal.saveAll(deviceAirSoilLights);
+        }
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceAirSoilLight> iterable) {
+        deviceAirSoilLightRepositoryLocal.deleteAll(iterable);
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DeviceAirSoilLightServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DeviceAirSoilLightServerProduct.java	(date 1575342239378)
+++ src/main/java/datasuorcetwo/datasource/server/DeviceAirSoilLightServerProduct.java	(date 1575342239378)
@@ -0,0 +1,43 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.BaseServerInte;
+import datasuorcetwo.datasource.entity.DeviceAirSoilLight;
+import datasuorcetwo.datasource.repositoryProduct.DeviceAirSoilLightRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DeviceAirSoilLightServerProduct implements BaseServerInte<DeviceAirSoilLight> {
+    @Autowired
+    DeviceAirSoilLightRepositoryProduct deviceAirSoilLightRepositoryProduct;
+
+    @Override
+    public int getMaxId() {
+        if(deviceAirSoilLightRepositoryProduct.findMaxId() == null){
+            return 0;
+        }
+        return deviceAirSoilLightRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public List<DeviceAirSoilLight> getThanMaxId(Integer maxId) {
+        return deviceAirSoilLightRepositoryProduct.findThanMaxId(maxId);
+    }
+
+    @Override
+    public List<DeviceAirSoilLight> getBetweenData(Integer beforeId, Integer afterId) {
+        return deviceAirSoilLightRepositoryProduct.getBetweenData(beforeId,afterId);
+    }
+
+    @Override
+    public int insert(List<DeviceAirSoilLight> deviceAirSoilLights) {
+        return 0;
+    }
+
+    @Override
+    public int deleteByIterator(Iterable<DeviceAirSoilLight> iterable) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/GroupRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/GroupRepositoryProduct.java	(date 1575341425905)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/GroupRepositoryProduct.java	(date 1575341425905)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.Group;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface GroupRepositoryProduct extends JpaRepository<Group, Integer> {
+    @Query(nativeQuery = true, value = "select group_id from `group` order by group_id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from `group` where group_id > ?")
+    List<Group> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from `group` where group_id >= ? and group_id < ?")
+    List<Group> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/HistoryBrowseRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/HistoryBrowseRepositoryProduct.java	(date 1575007028314)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/HistoryBrowseRepositoryProduct.java	(date 1575007028314)
@@ -0,0 +1,19 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.HistoryBrowse;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface HistoryBrowseRepositoryProduct extends JpaRepository<HistoryBrowse, Integer> {
+
+    @Query(nativeQuery = true, value = "select id from history_browse limit 1")
+    Integer getMinId();
+
+    @Query(nativeQuery = true, value = "select * from history_browse where id > ? and id <= ?")
+    List<HistoryBrowse> get1wData(Integer beforeId, Integer afterId);
+
+    @Query(nativeQuery = true, value = "select id from history_browse order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/LinkageDeviceRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/LinkageDeviceRepositoryProduct.java	(date 1575341426539)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/LinkageDeviceRepositoryProduct.java	(date 1575341426539)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.LinkageDevice;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface LinkageDeviceRepositoryProduct extends JpaRepository<LinkageDevice, Integer> {
+    @Query(nativeQuery = true, value = "select id from linkage_device order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from linkage_device where id > ?")
+    List<LinkageDevice> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from linkage_device where id >= ? and id < ?")
+    List<LinkageDevice> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/OrgRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/OrgRepositoryProduct.java	(date 1575341426709)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/OrgRepositoryProduct.java	(date 1575341426709)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.Org;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface OrgRepositoryProduct extends JpaRepository<Org, Integer> {
+    @Query(nativeQuery = true, value = "select id from org order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from org where id > ?")
+    List<Org> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from org where id >= ? and id < ?")
+    List<Org> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceVideoRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceVideoRepositoryProduct.java	(date 1575341426334)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceVideoRepositoryProduct.java	(date 1575341426334)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceVideo;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceVideoRepositoryProduct extends JpaRepository<DeviceVideo, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_video order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_video where id > ?")
+    List<DeviceVideo> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_video where id >= ? and id < ?")
+    List<DeviceVideo> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceWindRainfallRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceWindRainfallRepositoryProduct.java	(date 1575341426584)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceWindRainfallRepositoryProduct.java	(date 1575341426584)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceWindRainfall;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceWindRainfallRepositoryProduct extends JpaRepository<DeviceWindRainfall, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_wind_rainfall order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_wind_rainfall where id > ?")
+    List<DeviceWindRainfall> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_wind_rainfall where id >= ? and id < ?")
+    List<DeviceWindRainfall> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/GatewayRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/GatewayRepositoryProduct.java	(date 1575341426178)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/GatewayRepositoryProduct.java	(date 1575341426178)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.Gateway;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface GatewayRepositoryProduct extends JpaRepository<Gateway, Integer> {
+    @Query(nativeQuery = true, value = "select id from gateway order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from gateway where id > ?")
+    List<Gateway> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from gateway where id >= ? and id < ?")
+    List<Gateway> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/GroupDeviceRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/GroupDeviceRepositoryProduct.java	(date 1575341425996)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/GroupDeviceRepositoryProduct.java	(date 1575341425996)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.GroupDevice;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface GroupDeviceRepositoryProduct extends JpaRepository<GroupDevice, Integer> {
+    @Query(nativeQuery = true, value = "select id from group_device order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from group_device where id > ?")
+    List<GroupDevice> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from group_device where id >= ? and id < ?")
+    List<GroupDevice> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceTypeRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceTypeRepositoryProduct.java	(date 1575341426461)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DeviceTypeRepositoryProduct.java	(date 1575341426461)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DeviceType;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DeviceTypeRepositoryProduct extends JpaRepository<DeviceType, Integer> {
+    @Query(nativeQuery = true, value = "select id from device_type order by id desc limit 1")
+    Integer findMaxId();
+
+    @Query(nativeQuery = true, value = "select * from device_type where id > ?")
+    List<DeviceType> findThanMaxId(Integer id);
+
+    @Query(nativeQuery = true, value = "select * from device_type where id >= ? and id < ?")
+    List<DeviceType> getBetweenData(Integer beforeId, Integer afterId);
+}
Index: mvnw.cmd
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mvnw.cmd	(date 1563181899842)
+++ mvnw.cmd	(date 1563181899842)
@@ -0,0 +1,161 @@
+@REM ----------------------------------------------------------------------------
+@REM Licensed to the Apache Software Foundation (ASF) under one
+@REM or more contributor license agreements.  See the NOTICE file
+@REM distributed with this work for additional information
+@REM regarding copyright ownership.  The ASF licenses this file
+@REM to you under the Apache License, Version 2.0 (the
+@REM "License"); you may not use this file except in compliance
+@REM with the License.  You may obtain a copy of the License at
+@REM
+@REM    https://www.apache.org/licenses/LICENSE-2.0
+@REM
+@REM Unless required by applicable law or agreed to in writing,
+@REM software distributed under the License is distributed on an
+@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+@REM KIND, either express or implied.  See the License for the
+@REM specific language governing permissions and limitations
+@REM under the License.
+@REM ----------------------------------------------------------------------------
+
+@REM ----------------------------------------------------------------------------
+@REM Maven2 Start Up Batch script
+@REM
+@REM Required ENV vars:
+@REM JAVA_HOME - location of a JDK home dir
+@REM
+@REM Optional ENV vars
+@REM M2_HOME - location of maven2's installed home dir
+@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
+@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a key stroke before ending
+@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
+@REM     e.g. to debug Maven itself, use
+@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+@REM ----------------------------------------------------------------------------
+
+@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
+@echo off
+@REM set title of command window
+title %0
+@REM enable echoing my setting MAVEN_BATCH_ECHO to 'on'
+@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%
+
+@REM set %HOME% to equivalent of $HOME
+if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")
+
+@REM Execute a user defined script before this one
+if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
+@REM check for pre script, once with legacy .bat ending and once with .cmd ending
+if exist "%HOME%\mavenrc_pre.bat" call "%HOME%\mavenrc_pre.bat"
+if exist "%HOME%\mavenrc_pre.cmd" call "%HOME%\mavenrc_pre.cmd"
+:skipRcPre
+
+@setlocal
+
+set ERROR_CODE=0
+
+@REM To isolate internal variables from possible post scripts, we use another setlocal
+@setlocal
+
+@REM ==== START VALIDATION ====
+if not "%JAVA_HOME%" == "" goto OkJHome
+
+echo.
+echo Error: JAVA_HOME not found in your environment. >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+:OkJHome
+if exist "%JAVA_HOME%\bin\java.exe" goto init
+
+echo.
+echo Error: JAVA_HOME is set to an invalid directory. >&2
+echo JAVA_HOME = "%JAVA_HOME%" >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+@REM ==== END VALIDATION ====
+
+:init
+
+@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
+@REM Fallback to current working directory if not found.
+
+set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
+IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir
+
+set EXEC_DIR=%CD%
+set WDIR=%EXEC_DIR%
+:findBaseDir
+IF EXIST "%WDIR%"\.mvn goto baseDirFound
+cd ..
+IF "%WDIR%"=="%CD%" goto baseDirNotFound
+set WDIR=%CD%
+goto findBaseDir
+
+:baseDirFound
+set MAVEN_PROJECTBASEDIR=%WDIR%
+cd "%EXEC_DIR%"
+goto endDetectBaseDir
+
+:baseDirNotFound
+set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
+cd "%EXEC_DIR%"
+
+:endDetectBaseDir
+
+IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig
+
+@setlocal EnableExtensions EnableDelayedExpansion
+for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
+@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%
+
+:endReadAdditionalConfig
+
+SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
+set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
+set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar"
+FOR /F "tokens=1,2 delims==" %%A IN (%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties) DO (
+	IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B 
+)
+
+@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
+if exist %WRAPPER_JAR% (
+    echo Found %WRAPPER_JAR%
+) else (
+    echo Couldn't find %WRAPPER_JAR%, downloading it ...
+	echo Downloading from: %DOWNLOAD_URL%
+    powershell -Command "(New-Object Net.WebClient).DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"
+    echo Finished downloading %WRAPPER_JAR%
+)
+@REM End of extension
+
+%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
+if ERRORLEVEL 1 goto error
+goto end
+
+:error
+set ERROR_CODE=1
+
+:end
+@endlocal & set ERROR_CODE=%ERROR_CODE%
+
+if not "%MAVEN_SKIP_RC%" == "" goto skipRcPost
+@REM check for post script, once with legacy .bat ending and once with .cmd ending
+if exist "%HOME%\mavenrc_post.bat" call "%HOME%\mavenrc_post.bat"
+if exist "%HOME%\mavenrc_post.cmd" call "%HOME%\mavenrc_post.cmd"
+:skipRcPost
+
+@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
+if "%MAVEN_BATCH_PAUSE%" == "on" pause
+
+if "%MAVEN_TERMINATE_CMD%" == "on" exit %ERROR_CODE%
+
+exit /B %ERROR_CODE%
Index: mvnw
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mvnw	(date 1563181899869)
+++ mvnw	(date 1563181899869)
@@ -0,0 +1,286 @@
+#!/bin/sh
+# ----------------------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#    https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ----------------------------------------------------------------------------
+
+# ----------------------------------------------------------------------------
+# Maven2 Start Up Batch script
+#
+# Required ENV vars:
+# ------------------
+#   JAVA_HOME - location of a JDK home dir
+#
+# Optional ENV vars
+# -----------------
+#   M2_HOME - location of maven2's installed home dir
+#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
+#     e.g. to debug Maven itself, use
+#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+# ----------------------------------------------------------------------------
+
+if [ -z "$MAVEN_SKIP_RC" ] ; then
+
+  if [ -f /etc/mavenrc ] ; then
+    . /etc/mavenrc
+  fi
+
+  if [ -f "$HOME/.mavenrc" ] ; then
+    . "$HOME/.mavenrc"
+  fi
+
+fi
+
+# OS specific support.  $var _must_ be set to either true or false.
+cygwin=false;
+darwin=false;
+mingw=false
+case "`uname`" in
+  CYGWIN*) cygwin=true ;;
+  MINGW*) mingw=true;;
+  Darwin*) darwin=true
+    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
+    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
+    if [ -z "$JAVA_HOME" ]; then
+      if [ -x "/usr/libexec/java_home" ]; then
+        export JAVA_HOME="`/usr/libexec/java_home`"
+      else
+        export JAVA_HOME="/Library/Java/Home"
+      fi
+    fi
+    ;;
+esac
+
+if [ -z "$JAVA_HOME" ] ; then
+  if [ -r /etc/gentoo-release ] ; then
+    JAVA_HOME=`java-config --jre-home`
+  fi
+fi
+
+if [ -z "$M2_HOME" ] ; then
+  ## resolve links - $0 may be a link to maven's home
+  PRG="$0"
+
+  # need this for relative symlinks
+  while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+      PRG="$link"
+    else
+      PRG="`dirname "$PRG"`/$link"
+    fi
+  done
+
+  saveddir=`pwd`
+
+  M2_HOME=`dirname "$PRG"`/..
+
+  # make it fully qualified
+  M2_HOME=`cd "$M2_HOME" && pwd`
+
+  cd "$saveddir"
+  # echo Using m2 at $M2_HOME
+fi
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched
+if $cygwin ; then
+  [ -n "$M2_HOME" ] &&
+    M2_HOME=`cygpath --unix "$M2_HOME"`
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
+fi
+
+# For Mingw, ensure paths are in UNIX format before anything is touched
+if $mingw ; then
+  [ -n "$M2_HOME" ] &&
+    M2_HOME="`(cd "$M2_HOME"; pwd)`"
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
+  # TODO classpath?
+fi
+
+if [ -z "$JAVA_HOME" ]; then
+  javaExecutable="`which javac`"
+  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
+    # readlink(1) is not available as standard on Solaris 10.
+    readLink=`which readlink`
+    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
+      if $darwin ; then
+        javaHome="`dirname \"$javaExecutable\"`"
+        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
+      else
+        javaExecutable="`readlink -f \"$javaExecutable\"`"
+      fi
+      javaHome="`dirname \"$javaExecutable\"`"
+      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
+      JAVA_HOME="$javaHome"
+      export JAVA_HOME
+    fi
+  fi
+fi
+
+if [ -z "$JAVACMD" ] ; then
+  if [ -n "$JAVA_HOME"  ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+      # IBM's JDK on AIX uses strange locations for the executables
+      JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+      JAVACMD="$JAVA_HOME/bin/java"
+    fi
+  else
+    JAVACMD="`which java`"
+  fi
+fi
+
+if [ ! -x "$JAVACMD" ] ; then
+  echo "Error: JAVA_HOME is not defined correctly." >&2
+  echo "  We cannot execute $JAVACMD" >&2
+  exit 1
+fi
+
+if [ -z "$JAVA_HOME" ] ; then
+  echo "Warning: JAVA_HOME environment variable is not set."
+fi
+
+CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher
+
+# traverses directory structure from process work directory to filesystem root
+# first directory with .mvn subdirectory is considered project base directory
+find_maven_basedir() {
+
+  if [ -z "$1" ]
+  then
+    echo "Path not specified to find_maven_basedir"
+    return 1
+  fi
+
+  basedir="$1"
+  wdir="$1"
+  while [ "$wdir" != '/' ] ; do
+    if [ -d "$wdir"/.mvn ] ; then
+      basedir=$wdir
+      break
+    fi
+    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
+    if [ -d "${wdir}" ]; then
+      wdir=`cd "$wdir/.."; pwd`
+    fi
+    # end of workaround
+  done
+  echo "${basedir}"
+}
+
+# concatenates all lines of a file
+concat_lines() {
+  if [ -f "$1" ]; then
+    echo "$(tr -s '\n' ' ' < "$1")"
+  fi
+}
+
+BASE_DIR=`find_maven_basedir "$(pwd)"`
+if [ -z "$BASE_DIR" ]; then
+  exit 1;
+fi
+
+##########################################################################################
+# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+# This allows using the maven wrapper in projects that prohibit checking in binary data.
+##########################################################################################
+if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Found .mvn/wrapper/maven-wrapper.jar"
+    fi
+else
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
+    fi
+    jarUrl="https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar"
+    while IFS="=" read key value; do
+      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
+      esac
+    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Downloading from: $jarUrl"
+    fi
+    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
+
+    if command -v wget > /dev/null; then
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Found wget ... using wget"
+        fi
+        wget "$jarUrl" -O "$wrapperJarPath"
+    elif command -v curl > /dev/null; then
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Found curl ... using curl"
+        fi
+        curl -o "$wrapperJarPath" "$jarUrl"
+    else
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Falling back to using Java to download"
+        fi
+        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
+        if [ -e "$javaClass" ]; then
+            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
+                if [ "$MVNW_VERBOSE" = true ]; then
+                  echo " - Compiling MavenWrapperDownloader.java ..."
+                fi
+                # Compiling the Java class
+                ("$JAVA_HOME/bin/javac" "$javaClass")
+            fi
+            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
+                # Running the downloader
+                if [ "$MVNW_VERBOSE" = true ]; then
+                  echo " - Running MavenWrapperDownloader.java ..."
+                fi
+                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
+            fi
+        fi
+    fi
+fi
+##########################################################################################
+# End of extension
+##########################################################################################
+
+export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
+if [ "$MVNW_VERBOSE" = true ]; then
+  echo $MAVEN_PROJECTBASEDIR
+fi
+MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin; then
+  [ -n "$M2_HOME" ] &&
+    M2_HOME=`cygpath --path --windows "$M2_HOME"`
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
+  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
+    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
+fi
+
+WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+exec "$JAVACMD" \
+  $MAVEN_OPTS \
+  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
+  "-Dmaven.home=${M2_HOME}" "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
+  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(date 1563237998284)
+++ pom.xml	(date 1563237998284)
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-starter-parent</artifactId>
+        <version>2.1.6.RELEASE</version>
+        <relativePath/> <!-- lookup parent from repository -->
+    </parent>
+    <groupId>data-suorce-two</groupId>
+    <artifactId>datasource</artifactId>
+    <version>0.0.1-SNAPSHOT</version>
+    <name>datasource</name>
+    <description>Demo project for Spring Boot</description>
+
+    <properties>
+        <java.version>1.8</java.version>
+    </properties>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-data-jpa</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+            <scope>runtime</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-thymeleaf</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>log4j</groupId>
+            <artifactId>log4j</artifactId>
+            <version>1.2.17</version>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-maven-plugin</artifactId>
+            </plugin>
+        </plugins>
+    </build>
+
+</project>
Index: .mvn/wrapper/maven-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .mvn/wrapper/maven-wrapper.properties	(date 1563181899791)
+++ .mvn/wrapper/maven-wrapper.properties	(date 1563181899791)
@@ -0,0 +1,1 @@
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.6.0/apache-maven-3.6.0-bin.zip
Index: .mvn/wrapper/MavenWrapperDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .mvn/wrapper/MavenWrapperDownloader.java	(date 1563181921038)
+++ .mvn/wrapper/MavenWrapperDownloader.java	(date 1563181921038)
@@ -0,0 +1,114 @@
+/*
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+  https://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing,
+software distributed under the License is distributed on an
+"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+KIND, either express or implied.  See the License for the
+specific language governing permissions and limitations
+under the License.
+*/
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.net.URL;
+import java.nio.channels.Channels;
+import java.nio.channels.ReadableByteChannel;
+import java.util.Properties;
+
+public class MavenWrapperDownloader {
+
+    /**
+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
+     */
+    private static final String DEFAULT_DOWNLOAD_URL =
+            "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar";
+
+    /**
+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to
+     * use instead of the default one.
+     */
+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =
+            ".mvn/wrapper/maven-wrapper.properties";
+
+    /**
+     * Path where the maven-wrapper.jar will be saved to.
+     */
+    private static final String MAVEN_WRAPPER_JAR_PATH =
+            ".mvn/wrapper/maven-wrapper.jar";
+
+    /**
+     * Name of the property which should be used to override the default download url for the wrapper.
+     */
+    private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";
+
+    public static void main(String args[]) {
+        System.out.println("- Downloader started");
+        File baseDirectory = new File(args[0]);
+        System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());
+
+        // If the maven-wrapper.properties exists, read it and check if it contains a custom
+        // wrapperUrl parameter.
+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
+        String url = DEFAULT_DOWNLOAD_URL;
+        if (mavenWrapperPropertyFile.exists()) {
+            FileInputStream mavenWrapperPropertyFileInputStream = null;
+            try {
+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
+                Properties mavenWrapperProperties = new Properties();
+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
+            } catch (IOException e) {
+                System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");
+            } finally {
+                try {
+                    if (mavenWrapperPropertyFileInputStream != null) {
+                        mavenWrapperPropertyFileInputStream.close();
+                    }
+                } catch (IOException e) {
+                    // Ignore ...
+                }
+            }
+        }
+        System.out.println("- Downloading from: : " + url);
+
+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
+        if (!outputFile.getParentFile().exists()) {
+            if (!outputFile.getParentFile().mkdirs()) {
+                System.out.println(
+                        "- ERROR creating output direcrory '" + outputFile.getParentFile().getAbsolutePath() + "'");
+            }
+        }
+        System.out.println("- Downloading to: " + outputFile.getAbsolutePath());
+        try {
+            downloadFileFromURL(url, outputFile);
+            System.out.println("Done");
+            System.exit(0);
+        } catch (Throwable e) {
+            System.out.println("- Error downloading");
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+
+    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
+        URL website = new URL(urlString);
+        ReadableByteChannel rbc;
+        rbc = Channels.newChannel(website.openStream());
+        FileOutputStream fos = new FileOutputStream(destination);
+        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
+        fos.close();
+        rbc.close();
+    }
+
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(date 1563181899892)
+++ .gitignore	(date 1563181899892)
@@ -0,0 +1,31 @@
+HELP.md
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**
+!**/src/test/**
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+
+### VS Code ###
+.vscode/
Index: src/main/java/datasuorcetwo/datasource/DatasourceApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/DatasourceApplication.java	(date 1563255274062)
+++ src/main/java/datasuorcetwo/datasource/DatasourceApplication.java	(date 1563255274062)
@@ -0,0 +1,17 @@
+package datasuorcetwo.datasource;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.scheduling.annotation.EnableAsync;
+import org.springframework.scheduling.annotation.EnableScheduling;
+
+@SpringBootApplication
+@EnableScheduling
+@EnableAsync
+public class DatasourceApplication {
+
+    public static void main(String[] args) {
+        SpringApplication.run(DatasourceApplication.class, args);
+    }
+
+}
Index: src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/application.yml	(date 1575855203507)
+++ src/main/resources/application.yml	(date 1575855203507)
@@ -0,0 +1,36 @@
+server:
+  # 数据、设备信息等部分同步的端口
+  port: 8800
+  # NB指令同步的端口
+#  port:8801
+# 生产数据库 - 数据源1
+spring:
+  datasource:
+    # 添加了两个自定义字段：product 和 local 用来区分两个数据源，但是这样一来springboot就不认识这个东西了，需要重新定义，
+    # 定义数据源，建立java文件
+    product:
+      driver-class-name: com.mysql.cj.jdbc.Driver
+      # 注：之前没有添加 &serverTimezone=Asia/Shanghai ，配置多数据源之后，报mysql连接失败HikariPool错误
+      # 异常信息：com.zaxxer.hikari.pool.HikariPool : HikariPool-1 - Exception during pool initialization.
+#      jdbc-url: jdbc:mysql://localhost:3306/jinfen?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
+#      username: root
+#      password: 12345678
+      # 腾讯数据库 - 外网
+      jdbc-url: jdbc:mysql://sh-cdb-4mopinby.sql.tencentcdb.com:63450/jinfeng?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
+      username: root
+      password: Gmd888Debug
+    # 本地数据库 - 数据源2
+    local:
+      driver-class-name: com.mysql.cj.jdbc.Driver
+#      jdbc-url: jdbc:mysql://localhost:3306/jinfeng_copy?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
+#      username: root
+#      password: 12345678
+      # 电信数据库 - 外网
+      jdbc-url: jdbc:mysql://125.124.169.46:5528/jinfeng?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
+      username: root
+      password: Gmd@8@Debug
+  jpa:
+    hibernate:
+      ddl-auto: update
+    show-sql: true
+    database: mysql
\ No newline at end of file
Index: src/test/java/datasuorcetwo/datasource/DatasourceApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/datasuorcetwo/datasource/DatasourceApplicationTests.java	(date 1563264795384)
+++ src/test/java/datasuorcetwo/datasource/DatasourceApplicationTests.java	(date 1563264795384)
@@ -0,0 +1,16 @@
+package datasuorcetwo.datasource;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringRunner;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest
+public class DatasourceApplicationTests {
+
+    @Test
+    public void contextLoads() {
+    }
+
+}
Index: 说明.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 说明.txt	(date 1567653345015)
+++ 说明.txt	(date 1567653345015)
@@ -0,0 +1,15 @@
+该项目涉及的是：
+1、将一个数据库的数据复制到另一个数据库
+1）两个数据源，不只需要两个数据源的地址，还需要两个数据源的配置文件（自己配置）
+2）使所有的实体类都继承一个实体类基类，这个实体基类中我定义了一个id字段：目的是为了实现jpa的save方法不会舍弃对象中的id
+    直接自增，而是将对象中的id也添加到数据库，这样就不会导致对象中的id丢失。这个类还需要配合IdOrGenerate进行使用。
+3）创建了一个BaseServerInte泛型接口，其中声明了一些基本的接口使用，因为该项目对所有的实体类都是进行增删改查等一些相同操
+    作，因此将其一些该有的相同操作整合定义的一个泛型接口。
+4）创建了一个ThreadPoolComponent线程池对象，该对象交给spring的IOC容器管理。
+5）创建一个UpdateRunnable泛型任务类，但不交给spring容器管理，因为spring容器管理默认是单例的，而后续该类的使用会随着需要被复
+    制的实体的增多而增多，因此可能会创建多个UpdateRunnable的对象来实现。（不过是否也可以将其交给spring容器管理，然后设
+    置为prototype，而非单例？）
+6）创建一个UpdateTableTimer类，通过UpdateRunnable进行创建任务然后将任务通过ThreadPoolComponent线程池来执行。然后通过定时
+    器来进行循环监测。
+注：定时与多线程的使用需要在启动类上添加@EnableAsync（多线程使用的注解，开启后则可以通过spring提供的ThreadPoolTaskExecutor
+    来使用多线程了）@EnableScheduling（定时器注解）
\ No newline at end of file
Index: src/main/java/datasuorcetwo/datasource/baseInterface/DataBaseServerInte.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/baseInterface/DataBaseServerInte.java	(date 1575421652181)
+++ src/main/java/datasuorcetwo/datasource/baseInterface/DataBaseServerInte.java	(date 1575421652181)
@@ -0,0 +1,13 @@
+package datasuorcetwo.datasource.baseInterface;
+
+import java.util.List;
+
+public interface DataBaseServerInte<T> {
+    // 目标数据库获取最大id
+    Integer getMaxId();
+    // 源数据库的最小id
+    Integer getMinId();
+    List<T> get1wData(Integer beforeId, Integer afterId);
+    // 插入到目标数据库
+    int insert(List<T> ts);
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataCo2ServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataCo2ServerLocal.java	(date 1574818883149)
+++ src/main/java/datasuorcetwo/datasource/server/DataCo2ServerLocal.java	(date 1574818883149)
@@ -0,0 +1,39 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataCo2;
+import datasuorcetwo.datasource.repositoryLocal.DataCo2RepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataCo2ServerLocal implements DataBaseServerInte<DataCo2> {
+
+    @Autowired
+    DataCo2RepositoryLocal dataCo2RepositoryLocal;
+
+    @Override
+    public Integer getMaxId() {
+        return dataCo2RepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return null;
+    }
+
+    @Override
+    public List<DataCo2> get1wData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<DataCo2> dataCo2s) {
+        if(!dataCo2s.isEmpty()){
+            dataCo2RepositoryLocal.saveAll(dataCo2s);
+        }
+        return 1;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataCo2ServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataCo2ServerProduct.java	(date 1574823676130)
+++ src/main/java/datasuorcetwo/datasource/server/DataCo2ServerProduct.java	(date 1574823676130)
@@ -0,0 +1,36 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataCo2;
+import datasuorcetwo.datasource.repositoryProduct.DataCo2RepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataCo2ServerProduct implements DataBaseServerInte<DataCo2> {
+
+    @Autowired
+    DataCo2RepositoryProduct dataCo2RepositoryProduct;
+
+    @Override
+    public Integer getMaxId() {
+        return dataCo2RepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return dataCo2RepositoryProduct.getMinId();
+    }
+
+    @Override
+    public List<DataCo2> get1wData(Integer beforeId, Integer afterId) {
+        return dataCo2RepositoryProduct.get1wData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DataCo2> dataCo2s) {
+        return 0;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DataAcceleration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DataAcceleration.java	(date 1574824420248)
+++ src/main/java/datasuorcetwo/datasource/entity/DataAcceleration.java	(date 1574824420248)
@@ -0,0 +1,75 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "data_acceleration")
+public class DataAcceleration extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "accx_value")
+    private Double accxValue;
+    @Column(name = "accy_value")
+    private Double accyValue;
+    @Column(name = "accz_value")
+    private Double acczValue;
+    @Column(name = "device_id")
+    private Integer deviceId;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public Double getAccxValue() {
+        return accxValue;
+    }
+
+    public void setAccxValue(Double accxValue) {
+        this.accxValue = accxValue;
+    }
+
+    public Double getAccyValue() {
+        return accyValue;
+    }
+
+    public void setAccyValue(Double accyValue) {
+        this.accyValue = accyValue;
+    }
+
+    public Double getAcczValue() {
+        return acczValue;
+    }
+
+    public void setAcczValue(Double acczValue) {
+        this.acczValue = acczValue;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DataCo2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DataCo2.java	(date 1574819521461)
+++ src/main/java/datasuorcetwo/datasource/entity/DataCo2.java	(date 1574819521461)
@@ -0,0 +1,55 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "data_co2")
+public class DataCo2 extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "co2_value")
+    private Double co2Value;
+    @Column(name = "device_id")
+    private Integer deviceId;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public Double getCo2Value() {
+        return co2Value;
+    }
+
+    public void setCo2Value(Double co2Value) {
+        this.co2Value = co2Value;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DataCo2RepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DataCo2RepositoryProduct.java	(date 1574823328016)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DataCo2RepositoryProduct.java	(date 1574823328016)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DataCo2;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DataCo2RepositoryProduct extends JpaRepository<DataCo2, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_co2 limit 1")
+    Integer getMinId();
+
+    @Query(nativeQuery = true, value = "select id,create_time,co2_value,device_id from data_co2 where id > ? and id <= ?")
+    List<DataCo2> get1wData(Integer beforeId, Integer afterId);
+
+    @Query(nativeQuery = true, value = "select id from data_co2 order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DataCo2RepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DataCo2RepositoryLocal.java	(date 1574816847980)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DataCo2RepositoryLocal.java	(date 1574816847980)
@@ -0,0 +1,10 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DataCo2;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface DataCo2RepositoryLocal extends JpaRepository<DataCo2, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_co2 order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/entity/DataAirSoilLight.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/entity/DataAirSoilLight.java	(date 1574832280879)
+++ src/main/java/datasuorcetwo/datasource/entity/DataAirSoilLight.java	(date 1574832280879)
@@ -0,0 +1,95 @@
+package datasuorcetwo.datasource.entity;
+
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Table(name = "data_air_soil_light")
+public class DataAirSoilLight extends BaseEntity implements Serializable {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "idOrGenerate")
+    @GenericGenerator(name = "idOrGenerate", strategy = "datasuorcetwo.datasource.entity.IdOrGenerate")
+    @Column(name = "Id")
+    private Integer id;
+    @Column(name = "create_time")
+    private Date createTime;
+    @Column(name = "device_id")
+    private Integer deviceId;
+    @Column(name = "air_temperature_value")
+    private Double airTemperatureValue;
+    @Column(name = "air_humidity_value")
+    private Double airHumidityValue;
+    @Column(name = "soil_temperature_value")
+    private Double soilTemperatureValue;
+    @Column(name = "soil_humidity_value")
+    private Double soilHumidityValue;
+    @Column(name = "light_value")
+    private Double lightValue;
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Date getCreateTime() {
+        return createTime;
+    }
+
+    public void setCreateTime(Date createTime) {
+        this.createTime = createTime;
+    }
+
+    public Integer getDeviceId() {
+        return deviceId;
+    }
+
+    public void setDeviceId(Integer deviceId) {
+        this.deviceId = deviceId;
+    }
+
+    public Double getAirTemperatureValue() {
+        return airTemperatureValue;
+    }
+
+    public void setAirTemperatureValue(Double airTemperatureValue) {
+        this.airTemperatureValue = airTemperatureValue;
+    }
+
+    public Double getAirHumidityValue() {
+        return airHumidityValue;
+    }
+
+    public void setAirHumidityValue(Double airHumidityValue) {
+        this.airHumidityValue = airHumidityValue;
+    }
+
+    public Double getSoilTemperatureValue() {
+        return soilTemperatureValue;
+    }
+
+    public void setSoilTemperatureValue(Double soilTemperatureValue) {
+        this.soilTemperatureValue = soilTemperatureValue;
+    }
+
+    public Double getSoilHumidityValue() {
+        return soilHumidityValue;
+    }
+
+    public void setSoilHumidityValue(Double soilHumidityValue) {
+        this.soilHumidityValue = soilHumidityValue;
+    }
+
+    public Double getLightValue() {
+        return lightValue;
+    }
+
+    public void setLightValue(Double lightValue) {
+        this.lightValue = lightValue;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DataAirSoilLightRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DataAirSoilLightRepositoryLocal.java	(date 1574832527305)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DataAirSoilLightRepositoryLocal.java	(date 1574832527305)
@@ -0,0 +1,10 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DataAirSoilLight;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface DataAirSoilLightRepositoryLocal extends JpaRepository<DataAirSoilLight, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_air_soil_light order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DataAirSoilLightRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DataAirSoilLightRepositoryProduct.java	(date 1574832527244)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DataAirSoilLightRepositoryProduct.java	(date 1574832527244)
@@ -0,0 +1,19 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DataAirSoilLight;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DataAirSoilLightRepositoryProduct extends JpaRepository<DataAirSoilLight, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_air_soil_light limit 1")
+    Integer getMinId();
+
+    @Query(nativeQuery = true, value = "select id,create_time,air_temperature_value,air_humidity_value,soil_temperature_value," +
+            "soil_humidity_value,light_value,device_id from data_air_soil_light where id > ? and id <= ?")
+    List<DataAirSoilLight> get1wData(Integer beforeId, Integer afterId);
+
+    @Query(nativeQuery = true, value = "select id from data_air_soil_light order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryLocal/DataAccelerationRepositoryLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryLocal/DataAccelerationRepositoryLocal.java	(date 1574824586084)
+++ src/main/java/datasuorcetwo/datasource/repositoryLocal/DataAccelerationRepositoryLocal.java	(date 1574824586084)
@@ -0,0 +1,10 @@
+package datasuorcetwo.datasource.repositoryLocal;
+
+import datasuorcetwo.datasource.entity.DataAcceleration;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface DataAccelerationRepositoryLocal extends JpaRepository<DataAcceleration, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_acceleration order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/repositoryProduct/DataAccelerationRepositoryProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/repositoryProduct/DataAccelerationRepositoryProduct.java	(date 1574824836809)
+++ src/main/java/datasuorcetwo/datasource/repositoryProduct/DataAccelerationRepositoryProduct.java	(date 1574824836809)
@@ -0,0 +1,18 @@
+package datasuorcetwo.datasource.repositoryProduct;
+
+import datasuorcetwo.datasource.entity.DataAcceleration;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+
+public interface DataAccelerationRepositoryProduct extends JpaRepository<DataAcceleration, Integer> {
+    @Query(nativeQuery = true, value = "select id from data_acceleration limit 1")
+    Integer getMinId();
+
+    @Query(nativeQuery = true, value = "select id,create_time,accx_value,accy_value,accz_value,device_id from data_acceleration where id > ? and id <= ?")
+    List<DataAcceleration> get1wData(Integer beforeId, Integer afterId);
+
+    @Query(nativeQuery = true, value = "select id from data_acceleration order by id desc limit 1")
+    Integer findMaxId();
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataAccelerationServerLocal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataAccelerationServerLocal.java	(date 1574824836732)
+++ src/main/java/datasuorcetwo/datasource/server/DataAccelerationServerLocal.java	(date 1574824836732)
@@ -0,0 +1,39 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataAcceleration;
+import datasuorcetwo.datasource.repositoryLocal.DataAccelerationRepositoryLocal;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataAccelerationServerLocal implements DataBaseServerInte<DataAcceleration> {
+
+    @Autowired
+    DataAccelerationRepositoryLocal dataAccelerationRepositoryLocal;
+
+    @Override
+    public Integer getMaxId() {
+        return dataAccelerationRepositoryLocal.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return null;
+    }
+
+    @Override
+    public List<DataAcceleration> get1wData(Integer beforeId, Integer afterId) {
+        return null;
+    }
+
+    @Override
+    public int insert(List<DataAcceleration> dataAccelerations) {
+        if(!dataAccelerations.isEmpty()){
+            dataAccelerationRepositoryLocal.saveAll(dataAccelerations);
+        }
+        return 1;
+    }
+}
Index: src/main/java/datasuorcetwo/datasource/server/DataAccelerationServerProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/datasuorcetwo/datasource/server/DataAccelerationServerProduct.java	(date 1574825042640)
+++ src/main/java/datasuorcetwo/datasource/server/DataAccelerationServerProduct.java	(date 1574825042640)
@@ -0,0 +1,36 @@
+package datasuorcetwo.datasource.server;
+
+import datasuorcetwo.datasource.baseInterface.DataBaseServerInte;
+import datasuorcetwo.datasource.entity.DataAcceleration;
+import datasuorcetwo.datasource.repositoryProduct.DataAccelerationRepositoryProduct;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class DataAccelerationServerProduct implements DataBaseServerInte<DataAcceleration> {
+
+    @Autowired
+    DataAccelerationRepositoryProduct dataAccelerationRepositoryProduct;
+
+    @Override
+    public Integer getMaxId() {
+        return dataAccelerationRepositoryProduct.findMaxId();
+    }
+
+    @Override
+    public Integer getMinId() {
+        return dataAccelerationRepositoryProduct.getMinId();
+    }
+
+    @Override
+    public List<DataAcceleration> get1wData(Integer beforeId, Integer afterId) {
+        return dataAccelerationRepositoryProduct.get1wData(beforeId, afterId);
+    }
+
+    @Override
+    public int insert(List<DataAcceleration> dataAccelerations) {
+        return 0;
+    }
+}
diff --git .mvn/wrapper/maven-wrapper.jar .mvn/wrapper/maven-wrapper.jar
new file mode 100644
index 0000000000000000000000000000000000000000..01e67997377a393fd672c7dcde9dccbedf0cb1e9
GIT binary patch
literal 48337
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

